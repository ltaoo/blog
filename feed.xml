<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ltaoo&#39;s web</title>
  
  
  <link href="/blog/feed.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-07T15:14:50.076Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ltaoo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记 react-reconciler and host 分享</title>
    <link href="http://yoursite.com/2020/05/13/react-reconciler-and-host/"/>
    <id>http://yoursite.com/2020/05/13/react-reconciler-and-host/</id>
    <published>2020-05-13T00:00:00.000Z</published>
    <updated>2020-06-07T15:14:50.076Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/blog/2020/05/13/react-reconciler-and-host/title.png" alt="cover"></p><a id="more"></a><p>Hi，大家好，我这次分享的主题是 <code>react-reconciler and host</code>，不知道大家对这两个东西有了解吗？没有最好了（笑），希望这次分享能让大家了解这是什么，怎么使用。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513140952633.png" alt="1"></p><p>我们先来聊聊 <code>React</code>，我们现在开发已经离不开框架了，为什么 <code>React</code> 或者 <code>Vue</code> 变成主流趋势了呢？或者说 <code>React</code> 相比原生、<code>jQuery</code> 有什么优点呢？</p><p>性能好对吧，为什么性能好呢？因为它有虚拟 <code>DOM</code> 加 <code>Diff</code> 算法，官方有这么一段话，<code>React</code> 使用一些聪明的方法来减少更新页面的昂贵的 <code>DOM</code> 操作。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513141859486.png" alt="2"></p><p>用一个例子简单说明</p><p>我们有一份数据要渲染到页面上，之前的做法是根据数据生成 <code>html</code> 替换原先的；现在做法是找到具体的 <code>DOM</code> 发生了什么改变，然后应用这个改变即可。</p><p>这两种方式对浏览器来说区别是非常大的，当然这里大家应该都了解所以就不展开了。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513142553820.png" alt="3"></p><p>OK，我们接下来来介绍 <code>reconciler</code>，<code>react</code> 在新版本把更新相关的作为了一个单独的包，就叫 <code>react-reconciler</code>，那么具体是哪些内容呢？我们先来看看更新过程</p><p>首先是创建更新，我们调用 <code>setState</code> 就会创建一个更新，然后经过一系列的函数，把这个更新挂载到发生更新的组件对应的 <code>fiber</code> 上，最后调用 <code>renderRootSync</code></p><p>第二个步骤是去遍历 <code>fiber</code> 树，在遍历的过程中，会更新 <code>fiber</code> 以及对比子节点这里对比不是所谓的 <code>diff</code> ，具体的后面会讲到；并且，在遍历过程还会筛选出有变化，包括更新、移除、新增的 <code>fiber</code> 保存起来。</p><p>第五个步骤会进行一些准备工作，包括新增 <code>DOM</code> 的初始化、如何更新 <code>DOM</code> 的说明。</p><p>最后就是执行对 <code>DOM</code> 的操作了，更新、移除、新增节点。</p><p>前面五个步骤是 <code>reconciler</code> 的范畴，最后是属于 <code>host</code> 的范畴。</p><p>可能对 <code>fiber</code> 有些疑问，我们接下来就介绍 <code>fiber</code></p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200512170957956.png" alt="5. fiber"></p><p><code>fiber</code> 是 <code>React</code> 内部的数据结构，可以由  <code>ReactElement</code> 生成的。我们用 <code>jsx</code> 来描述页面，<code>jsx</code> 会变成 <code>ReactElement</code> 对吧，每个 <code>Element</code> 都会生成一个 <code>fiber</code> </p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200512171125680.png" alt="6. fiber tree"></p><p>所以我们的页面最终会生成一棵 <code>fiber</code> 树，父子节点通过 <code>child</code> 字段，兄弟节点通过 <code>sibling</code> 字段相连。如果有这样 <code>jsx</code>，生成的 <code>fiber</code> 树是这样的。<code>fiberRoot</code> 是内部创建的。</p><p>前面提到更新过程会遍历 <code>fiber</code> 树，那是深度优先还是广度优先呢？就是说先遍历兄弟节点，还是先遍历子节点？</p><p>答案是先遍历子节点，也就是深度优先，这和前面的第四步「收集有变化的 <code>fiber</code> 」有关，这里可以看看实现深度遍历的代码，为了方便看这里省去了一些内容</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200512171813274.png" alt="7. code of loop fiber tree"></p><p>遍历就是从第一个开始，然后获取它的子节点，如果存在子节点就继续遍历，否则就调用 <code>completeUnitOfWork</code>，该方法会去找是否有兄弟节点，如果没有就看看父节点有没有兄弟节点，如果有就返回，继续遍历。</p><p>OK，到这里我们就了解了 <code>fiber</code>、<code>fiber</code> 树和遍历方式对吧，对这部分有疑问吗？如果没有那我们就继续，</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513144132979.png" alt="7"></p><p>大家肯定注意到，前面很多方法名都和 <code>work</code> 相关，<code>beginWork</code>、<code>completeWork</code> 等等，</p><p>其实 <code>work</code> 就是 <code>fiber</code>，只是换了个名字，更确切的说是 <code>fiber</code> 在进行更新过程的语义，<code>React</code> 把更新 <code>fiber</code> 的过程看作「一件事」，并且是每个 <code>fiber</code> 的更新都是一件事</p><p>除此之外，在开始做事之前，会先创建一个副本，在这个副本上进行工作，原始内容不变，这其实是借鉴自 <code>git</code> 分支的概念，我们每次要开发新功能，是不是先切一个 <code>feature</code> 分支，在这个分支上写代码，不影响 <code>master</code>，完成后再把 <code>feature</code> 分支合并到 <code>master</code>，<code>React</code> 这里也是一样的。<code>current</code> 等同 <code>master</code>，<code>workInProgress</code> 等同 <code>feature</code>。</p><p>并且开始工作的 <code>fiber</code> 是一个循环结构， <code>current.alternate === workInProgress</code>，<code>workInProgress.alternate === current</code>。好，我们现在知道了 <code>fiber</code> 是什么，知道 <code>work</code> 是什么对吧，接下来我们再详细聊聊更新过程</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200512174501117.png" alt="9. setState"></p><p>更新的起点是  <code>setState</code>，我们通常都是使用该方法来触发更新，该方法会创建一个 <code>update</code>，然后挂载到 <code>fiber.updateQueue</code> 上，<code>update.payload</code> 就是更新的内容。</p><p>这部分逻辑没有很复杂的地方吧，唯一要注意的可能是 <code>expirationTime</code>，即所谓的过期时间，默认情况它是一个常量，1073741823，该值虽然是一个数字，但在 <code>react</code> 是用来表达「优先级」的含义，值越大，优先级越高，就是更新这个 <code>fiber</code> 的优先级越高。</p><p>由于需要使用 <code>ConcurrentMode</code> 才会触发不同的 <code>expirationTime</code> 所以这里就不展开了，默认情况下更新优先级都相同。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200512174623435.png" alt="10. updateComponent"></p><p>创建更新后并挂载到 <code>fiber</code> 上后，调用一系列的方法遍历 <code>fiber</code> 树，遍历过程会调用 <code>beginWork</code> ，算是真正开始进行更新的方法吧，该方法内会根据 <code>fiber</code> 的 <code>tag</code> 调用不同的更新方法，比如 <code>updateClassComponent</code>、<code>updateHostComponent</code> 等等，<code>updateClassComponent</code> 内的逻辑可能会比较多，生命周期就是在这里调用的，还有实例化等操作，具体的可以自己看哈，就不展开了，最后会调用 <code>render</code> 方法返回子节点，如果存在子节点就调用 <code>reconcileChildren</code> 方法，意为「调和」，可以理解成对比吧，<code>updateHostComponent</code> 也是一样的。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200512184839641.png" alt="11. reconcileChildren code"></p><p><code>reconcileChildren</code> 有个分支，看是新建，还是对比，但无论是新建还是对比，都是返回新的 <code>fiber</code> 作为子 <code>fiber</code>。可以说，<code>reconcilerChildren</code> 就是用 <code>ReactElement</code> 生成新 <code>fiber</code> 的方法。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513151040172.png" alt="11"></p><p>这里是用之前的例子来说明</p><p>第一次调用 <code>reconcileChildren</code> 时，<code>workInProgress</code> 是 <code>App</code> 这个 <code>fiber</code>，<code>newChildren</code> 是 <code>render</code> 调用的结果，用  <code>workInProgress.child</code> 和 <code>div</code> 这个 <code>element</code> 对比，返回新 <code>fiber</code>；第二次调用 <code>workInProgress</code> 就是这个新 <code>fiber</code>，也就是 <code>div</code> 这个，然后用它的子节点 <code>p</code> 和数组 <code>Element</code> 做对比；第三次是 <code>p0</code> 这个 <code>fiber</code>，第四次是 <code>p1</code>。</p><p>这里能理解吗</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513151502251.png" alt="image-20200513151502251"></p><p>更具体就是判断下 <code>newChildren</code> 类型是什么然后调用对应的方法，比如这里的 <code>reconcileSingleElement</code> 和 <code>reconcileChildrenArray</code>，但是无论哪个，它们都是会返回 <code>fiber</code>，不同之处在于是复用已有的 <code>fiber</code> 还是直接用 <code>element</code>创建新的 <code>fiber</code>。</p><p>这里详细讲讲是数组的情况吧，因为这里就涉及到 <code>key</code> 的作用了</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513152036804.png" alt="image-20200513152036804"></p><p>这里是直接把代码翻译过来了</p><p>这么看可能还是很难理解，那我们用图形来说明，这是一个有新增节点、移除节点的例子。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513152110606.png" alt="image-20200513152110606"></p><p>上面矩形表示的是 <code>fiber</code>，下面圆形表示 <code>ReactElement</code>，我们要「对比」这些，就是找出新增和移除</p><p>首先是第一个，直接调用 <code>updateSlot</code> 返回  <code>fiber</code>；然后第二个 <code>fiber p1</code> 和下面的 <code>null</code>，为什么是 <code>null</code> 呢，因为 <code>hasP1 === false</code> 了，同样调用 <code>updateSlot</code> 但是返回 <code>null</code>，所以中断遍历；</p><p>中断后，优先看看 <code>ReactElement</code> 是不是已经遍历完了，如果遍历完了，就说明剩下的 <code>fiber</code> 兄弟节点都是被移除的，但是这里发现还有；然后再看看 <code>fiber</code> 是否还有兄弟节点，如果没有就说明剩下的 <code>ReactElement</code> 都是新增的，但是这里我们发现还有，所以剩下的 <code>ReactElement</code> 不是新增的；</p><p>然后，把剩下的 <code>fiber</code> 保存到 <code>Map</code> 中，就是右上角这个，创建这个 <code>Map</code> 优先用 <code>fiber.key</code> 作为 <code>key</code> ，否则就用 <code>index</code>。</p><p>然后遍历剩下的 <code>ReactElement</code>，调用 <code>updateFromMap</code>  创建 <code>fiber</code>，在方法里会判断是复用已有的还是创建一个全新的，先是 <code>index === 2</code> 这个，发现有，那么就复用之前的，并且从 <code>Map</code> 中移除 2 这个；然后是 <code>index === 3</code> 这个，发现没有，那就是创建一个全新的。</p><p>好，遍历完成了，发现 <code>Map</code> 中还剩一个 <code>index === 1</code> 这个，那这个就是被删除的了。这样，就清楚了删除和新增的具体是哪些了。</p><p>这里能理解吗，下面还有两个例子我们再来看看</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513152717579.png" alt="image-20200513152717579"></p><p>这个例子演示的是 <code>newIdx === newChildren.length</code> 的例子，和之前一样，先遍历，但是 <code>newChildren</code> 直接遍历完了，然后判断 <code>newIdx === newChildren.length</code>，那还剩下的兄弟 <code>fiber</code> 就肯定是被移除的对吧，所以直接返回。 </p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513152939274.png" alt="image-20200513152939274"></p><p>这个例子类似，先是遍历，然后发现不存在兄弟节点，中断遍历，然后由于不存在兄弟节点了，那剩下的 <code>newChildren</code> 肯定都是要用来创建新的 <code>fiber</code>。</p><p>但是现在只是知道了新增和移除的，那更新的呢？是在 <code>beginWork</code> 之后，会调用 <code>completeWork</code> 方法，该方法会找出更新的 <code>fiber</code></p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513153426095.png" alt="image-20200513153426095"></p><p>在调用 <code>completeWork</code> 方法前是调用 <code>completeUnitOfWork</code>，该方法是用来收集 <code>effect</code> 的，<code>effect</code> 就是新增、移除和更新的 <code>fiber</code>。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513155141064.png" alt="image-20200513155141064"></p><p>该方法会在遍历过程，<code>child === null</code> 的时候调用，这里大概说明了下，不过我们还是用图形来说明吧，这里假设更新同时存在更新、移除和新增。</p><p>我们在遍历到 <code>p0 fiber</code> 时，它的 <code>child === null</code> 所以会调用 <code>completeUnitOfWork</code> 对吧，在该方法内，会先调用一次 <code>complteWork</code>，如果它有更新，<code>effectTag</code> 就会改变，但是它的 <code>effectTag</code> 还是 0，所以忽略该 <code>fiber</code>，然后返回它的兄弟节点继续遍历，调用 <code>beginWork</code> 方法，同样的，<code>child === null</code> ，不过在调用 <code>completeWork</code> 后，它的 <code>effectTag</code> 变成了 <code>Update</code>，所以回到 <code>complteUnitOfWork</code> 方法内，会把它自身挂载到父 <code>fiber</code> 的 <code>effect chain</code> 上，然后继续返回兄弟节点；</p><p>接下来就是 <code>p3</code>，这个是新增的，道理同上；我们再看看具体怎么保存的吧。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513155102628.png" alt="image-20200513155102628"></p><p><code>p2</code> 是更新的，先看看父 <code>fiber</code> 是否存在 <code>effect chain</code>，这时是已经存在的，就是之前遍历过程中移除的 <code>p1</code>，早已经挂载到父 <code>fiber</code> 上了。我们先看看自身上有没有 <code>effect</code> ，发现没有，然后把 <code>returnFiber.nextEffect</code> 指向自身，再把 <code>returnFiber.lastEffect</code> 指向自身。这样就挂载好了 <code>p2</code>。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513155603107.png" alt="image-20200513155603107"></p><p>然后是 <code>p3</code>，和 <code>p2</code> 同理，不再赘述。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513155617899.png" alt="image-20200513155617899"></p><p>关键的地方来了，在处理完 <code>p3</code> 后，仍然在当前方法也就是 <code>complteUnitOfWork</code> 方法内，用 <code>returnFiber</code> 继续调用 <code>completeWork</code> 和挂载的逻辑，因为这里有一个 <code>do while</code> 循环；</p><p>这时 <code>returnFiber === div</code>，它调用 <code>complteWork</code>，然后和前面逻辑一样，把自身的 <code>effect chain</code> 挂载到父 <code>fiber</code> 上，此时是有的，所以就挂载上去了。</p><p>靠这样，所有的 <code>effect</code> 最终会到 <code>fiberRoot</code> 上。</p><p>到这里其实 <code>reconciler</code> 的核心部分已经讲完了，有什么问题吗？</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513160236432.png" alt="image-20200513160236432"></p><p>收集好之后，终于可以对 <code>DOM</code> 进行操作了，就是调用 <code>commitRoot</code>，根据 <code>effectTag</code> 的值执行具体的操作。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513160251891.png" alt="image-20200513160251891"></p><p>移除、新增和更新。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513160314477.png" alt="image-20200513160314477"></p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513160947756.png" alt="image-20200513160947756"></p><p>更新稍微麻烦些，它要知道怎么去更新，在前面 <code>complteWork</code> 方法内会调用 <code>updateHostComponent</code>，这个不同于 <code>beginWork</code> 内的，这里会去进行对比，得出要更新的内容，保存在 <code>updateQueue</code> 字段上，这是一个数组，每两个元素表示一次更新的内容，比如 <code>children</code> 变成 2；<code>className</code> 变成 <code>selected</code>。</p><p>如果确实有更新，也是在这里把 <code>effectTag</code> 改成 <code>Update</code> 的。</p><p>到这里，<code>react-reconciler</code> 的内容就真的完了，后面的是 <code>host</code> 相关的了。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513161206888.png" alt="image-20200513161206888"></p><p><code>host</code> 就是所谓的宿主，浏览器是宿主，原生是宿主。</p><p>先来看看浏览器，简单来说，浏览器页面，就是对 <code>DOM</code> 的图形化展示。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513161454722.png" alt="image-20200513161454722"></p><p>浏览器使用渲染引擎对 <code>DOM</code> 进行渲染，变成图片，就是这样。我们改变 <code>DOM</code>，渲染引擎重新渲染，生成新的图片。</p><p>改变 <code>DOM</code> 可以是手动改，也可以让 <code>reconciler</code> 修改，如果是 <code>reconciler</code>，连接两者的就是 <code>hostConfig</code>，即宿主提供一些方法给 <code>reconciler</code> 调用。</p><p>所以我们如果想在其他宿主使用 <code>reconciler</code>，实现这样一个 <code>hostConfig</code> 就可以了。甚至我们可以在 <code>nodejs</code> 中使用 <code>react-reconciler</code>。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513161935968.png" alt="image-20200513161935968"></p><p>需要提供平台对象，浏览器是 <code>HTMLElement</code>，我们这里就叫 <code>NodeElement</code> 好了，分为容器和文本；以及创建 <code>Node</code> 的方法、移除 <code>Node</code> 的方法、更新 <code>Node</code> 的方法和插入 <code>Node</code> 的方法。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513162214744.png" alt="image-20200513162214744"></p><p> <code>hostConfig.js</code> 文件保存上述的方法，为了简单所以这里省略了很多。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513162329225.png" alt="image-20200513162329225"></p><p>连接方式很简单，调用 <code>reconciler</code> 传入 <code>hostConfig</code> 就可以了。然后向外暴露一个渲染方法，等同于 <code>ReactDOM.render</code>。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513162424070.png" alt="image-20200513162424070"></p><p>然后我们就可以用 <code>jsx</code> 在 <code>nodejs</code> 平台写代码了不过我们没有 <code>babel</code> 所以只能直接用 <code>createElement</code> 了。</p><p>调用 <code>render</code> 方法后，可以打印看看返回值是什么。然后我们可以再次调用 <code>render</code>，触发更新逻辑，返回新的结果。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513162749684.png" alt="image-20200513162749684"></p><p>这里根据 <code>jsx</code> 生成的平台对象实例，等同于 <code>DOM</code>。再实现一个渲染引擎将这个对象渲染成图片，就实现了我们的宿主平台。</p><p>这里附上示例代码</p><p><a href="https://codesandbox.io/s/eloquent-moser-ryh3i?file=/src/index.js" target="_blank" rel="noopener">https://codesandbox.io/s/eloquent-moser-ryh3i?file=/src/index.js</a></p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513163024514.png" alt="image-20200513163024514"></p><p>OK，分享到这里就结束了，我们可以再回顾下之前的内容。</p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513163045472.png" alt="image-20200513163045472"></p><p><img src="/blog/2020/05/13/react-reconciler-and-host/image-20200513163055633.png" alt="image-20200513163055633"></p><p>至此，全部内容就介绍完了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/blog/2020/05/13/react-reconciler-and-host/title.png&quot; alt=&quot;cover&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>setState 是同步还是异步</title>
    <link href="http://yoursite.com/2020/04/13/setState%20%E6%98%AF%E5%90%8C%E6%AD%A5%E8%BF%98%E6%98%AF%E5%BC%82%E6%AD%A5/"/>
    <id>http://yoursite.com/2020/04/13/setState 是同步还是异步/</id>
    <published>2020-04-13T00:00:00.000Z</published>
    <updated>2020-04-13T14:36:33.464Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>以下内容均基于 16.8.6 版本。</p></blockquote><p><code>setState</code> 是同步还是异步，这个问题很多人讨论过，各种说法都有，面试时也经常会问到，那它到底是同步还是异步呢？</p><p>我认为，它既是同步的，也是异步的。</p><a id="more"></a><p>首先来说说我们是怎么判断它是同步还是异步，往往是在 <code>setState</code> 后访问 <code>state</code> 来确定，所以下面这个例子很常见</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      count: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1、直接调用</span></span><br><span class="line">    <span class="keyword">this</span>.update();</span><br><span class="line">    <span class="comment">// 2、包裹在 setTimeout 内调用</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.update();</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  update = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="number">1</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      count: <span class="number">2</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.state.count);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; count &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">p</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>COUNT: &#123;count&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种情况两次打印结果都是 0；第二种分别打印 1 和 2；</p><h2 id="批量更新所以看起来像异步实际还是同步"><a href="#批量更新所以看起来像异步实际还是同步" class="headerlink" title="批量更新所以看起来像异步实际还是同步"></a>批量更新所以看起来像异步实际还是同步</h2><p>大部分博客就会提到「批量更新」这个概念，可以理解为在一次同步任务内，<code>setState</code> 会「合并」到一起进行更新，但是 <code>setTimeout</code> 不在同步任务内，所以不进行「合并」，而是直接依次执行（或者说依次更新）。</p><p>用伪代码来说明是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isBatchingUpdates = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> innerState = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟 this.state</span></span><br><span class="line"><span class="keyword">let</span> state = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模拟 setState 方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setState</span>(<span class="params">nextState</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 把 nextState 保存起来，实际源码是保存在了 fiber 上</span></span><br><span class="line">  innerState = nextState;</span><br><span class="line">  <span class="comment">// 真实代码还有很多方法，下面都是省略了</span></span><br><span class="line">  requestWork();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 更新的入口</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 延迟执行真正的更新</span></span><br><span class="line">  <span class="keyword">if</span> (isBatchingUpdates) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 真正的更新</span></span><br><span class="line">  performWork();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">performWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 假装这是在进行更新，用之前保存的 nextState 替换掉当前的 state</span></span><br><span class="line">  state = innerState;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用来执行 handleClick 方法的方法，fn 就是 handleClick</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">batchedUpdates</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  isBatchingUpdates = <span class="literal">true</span>;</span><br><span class="line">  fn();</span><br><span class="line">  </span><br><span class="line">  isBatchingUpdates = <span class="literal">false</span>;</span><br><span class="line">  performWork();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试用例</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1、</span></span><br><span class="line">  setState(<span class="number">1</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(state);</span><br><span class="line">  setState(<span class="number">2</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(state);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 2、</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    setState(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(state);</span><br><span class="line">    setState(<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(state);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">batchedUpdates(handleClick);</span><br></pre></td></tr></table></figure><p>可以发现效果和最开始的例子是相同的。</p><p>单纯从代码来说，这应该是同步的，因为没有 <code>setTimeout</code> 或者其他什么异步方法介入。那么是否表示，<code>setState</code> 就是同步的呢？</p><p>并不是，代码可以有多个条件分支，那为什么不能在「某种情况」下使用 <code>setTimeout</code> 呢？</p><h2 id="使用-ConcurrentMode-时-setState-是异步"><a href="#使用-ConcurrentMode-时-setState-是异步" class="headerlink" title="使用 ConcurrentMode 时 setState 是异步"></a>使用 ConcurrentMode 时 setState 是异步</h2><p>如果把 <code>App</code> 组件用 <code>React.unstable_ConcurrentMode</code> 组件包裹，即使在 <code>setTimeout</code> 内调用，两次打印的结果还是 0 和 0，即和第一种情况的结果一致。</p><p><a href="https://codesandbox.io/s/setstate-is-sync-or-asnyc-01c4i?file=/src/App.js" target="_blank" rel="noopener">实际演示代码</a></p><p>这是因为触发了异步逻辑，继续用上面伪代码来说明会是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略相同的代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> isConcurrentMode = <span class="literal">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">requestWork</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 延迟执行真正的更新</span></span><br><span class="line">  <span class="keyword">if</span> (isBatchingUpdates) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 实际代码完全不是这样的！！！这里只是为了说明</span></span><br><span class="line">  <span class="keyword">if</span> (isConcurrentMode) &#123;</span><br><span class="line">    scheduleCallback(performWork);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 真正的更新</span></span><br><span class="line">  performWork();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scheduleCallback</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  setTimeout(fn, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然实际代码要复杂得多，并且 <code>scheduleCallback</code> 的实现其实是在 <code>scheduler</code> 包内的。</p><p><a href="https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L295" target="_blank" rel="noopener">https://github.com/facebook/react/blob/master/packages/scheduler/src/Scheduler.js#L295</a></p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>所以，<code>setState</code> 是同步还是异步的呢？我认为</p><p>它既是同步也是异步，视情况而定。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以下内容均基于 16.8.6 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;setState&lt;/code&gt; 是同步还是异步，这个问题很多人讨论过，各种说法都有，面试时也经常会问到，那它到底是同步还是异步呢？&lt;/p&gt;
&lt;p&gt;我认为，它既是同步的，也是异步的。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
  </entry>
  
  <entry>
    <title>react 源码中的 findHighestPriorityRoot 方法</title>
    <link href="http://yoursite.com/2020/04/08/find-highest-priority-root/"/>
    <id>http://yoursite.com/2020/04/08/find-highest-priority-root/</id>
    <published>2020-04-08T00:00:00.000Z</published>
    <updated>2020-04-09T09:55:33.132Z</updated>
    
    <content type="html"><![CDATA[<p>在看源码时，可以看到有这么一个方法，从函数名来看，是「找到优先级最高的 <code>root</code>」，但每个应用只有一个 <code>root</code>，那为什么还要去「找」呢？<br>因为 <code>react</code> 支持多个实例，即支持调用多次 <code>ReactDOM.render</code>。如果他们同时发生更新，也要有个先后关系，这个方法，就是用来从多个实例对应的 <code>root</code> 中，找出最先进行更新的那个 <code>root</code>。</p><a id="more"></a><blockquote><p>该博客适合对源码有一定了解的同学</p><ol><li>知道 <code>root</code> 表示什么</li><li>知道整个渲染流程的调用链</li><li>知道批量更新与非批量更新</li></ol></blockquote><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p><code>findHighestPriorityRoot</code> 方法其实是一个从「链结构」查找特定节点的算法。<code>root</code> 视为一个节点，<code>root.nextScheduledRoot</code> 指向下一个节点，并且最后一个节点指向第一个节点。</p><p><code>firstScheduledRoot</code> 是该链结构的一个节点，<code>lastScheduledRoot</code> 是该链结构的最后一个节点。每次先从第一个节点开始找。</p><p><img src="/blog/2020/04/08/find-highest-priority-root/1、list-example.png" alt="链结构示例"></p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><p>这个算法其实很简单，每个节点上有 <code>value</code> 字段，找到链结构中 <code>value</code> 为最大值的那个节点</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Root</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(value, nextRoot = null) &#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        <span class="comment">// nextScheduledRoot 简写成 next</span></span><br><span class="line">        <span class="keyword">this</span>.next = nextRoot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> firstRoot = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> lastRoot = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findHighestPriorityRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxValueRoot = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> root = firstRoot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里用循环实现</span></span><br><span class="line">    <span class="keyword">while</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value, next &#125; = root;</span><br><span class="line">        <span class="keyword">if</span> (value &gt; maxValue) &#123;</span><br><span class="line">            maxValue = value;</span><br><span class="line">            maxValueRoot = root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果只有一个节点</span></span><br><span class="line">        <span class="keyword">if</span> (next === root) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 避免死循环</span></span><br><span class="line">        <span class="keyword">if</span> (root === lastRoot) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        root = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxValueRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root1 = <span class="keyword">new</span> Root(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">const</span> root2 = <span class="keyword">new</span> Root(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">firstRoot = root1;</span><br><span class="line">lastRoot = root2;</span><br><span class="line">root1.next = root2;</span><br><span class="line">root2.next = root1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> result = findHighestPriorityRoot();</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br></pre></td></tr></table></figure><h3 id="其他影响查找的逻辑"><a href="#其他影响查找的逻辑" class="headerlink" title="其他影响查找的逻辑"></a>其他影响查找的逻辑</h3><p>实际的 <code>findHighestPriorityRoot</code> 方法，还有其他逻辑。<br>1、当 <code>value</code> 为 0 时，该节点就视为无效，需要将该节点从链结构中移除，考虑到这个因素，上面的代码需要进行修改</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findHighestPriorityRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxValueRoot = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> root = firstRoot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里用循环实现</span></span><br><span class="line">    <span class="keyword">while</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value, next &#125; = root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增的分支</span></span><br><span class="line">        <span class="keyword">if</span> (value === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果只有一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (root === next) &#123;</span><br><span class="line">                root.next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root === firstRoot) &#123;</span><br><span class="line">                <span class="comment">// 该无效的节点是第一个节点，那么第二个节点就变成第一个了</span></span><br><span class="line">                firstRoot = next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root === lastRoot) &#123;</span><br><span class="line">                <span class="comment">// 该无效的节点是最后一个节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这是原先的逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (value &gt; maxValue) &#123;</span><br><span class="line">                maxValue = value;</span><br><span class="line">                maxValueRoot = root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果只有一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (next === root) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 避免死循环</span></span><br><span class="line">            <span class="keyword">if</span> (root === lastRoot) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            root = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxValueRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、当 <code>value === 1000</code> 时，不需要再查找，该值必然为最大值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findHighestPriorityRoot</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> maxValue = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> maxValueRoot = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> root = firstRoot;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里用循环实现</span></span><br><span class="line">    <span class="keyword">while</span> (root !== <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value, next &#125; = root;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新增的分支</span></span><br><span class="line">        <span class="keyword">if</span> (value === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果只有一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (root === next) &#123;</span><br><span class="line">                root.next = <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root === firstRoot) &#123;</span><br><span class="line">                <span class="comment">// 该无效的节点是第一个节点，那么第二个节点就变成第一个了</span></span><br><span class="line">                firstRoot = next;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root === lastRoot) &#123;</span><br><span class="line">                <span class="comment">// 该无效的节点是最后一个节点</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 这是原先的逻辑</span></span><br><span class="line">            <span class="keyword">if</span> (value &gt; maxValue) &#123;</span><br><span class="line">                maxValue = value;</span><br><span class="line">                maxValueRoot = root;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果只有一个节点</span></span><br><span class="line">            <span class="keyword">if</span> (next === root) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 避免死循环</span></span><br><span class="line">            <span class="keyword">if</span> (root === lastRoot) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (maxValue === <span class="number">1000</span>) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            root = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> maxValueRoot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对照实际函数"><a href="#对照实际函数" class="headerlink" title="对照实际函数"></a>对照实际函数</h3><p>附上 16.8.6 版本该方法实际源码 <a href="https://github.com/facebook/react/blob/16.8.6/packages/react-reconciler/src/ReactFiberScheduler.js#L2138" target="_blank" rel="noopener">https://github.com/facebook/react/blob/16.8.6/packages/react-reconciler/src/ReactFiberScheduler.js#L2138</a></p><p><code>expirationTime</code> 对应 <code>value</code><br><code>highestPriorityWork</code> 对应 <code>maxValue</code><br><code>highestPriorityRoot</code> 对应 <code>maxValueRoot</code><br><code>lastScheduledRoot</code> 对应 <code>lastRoot</code><br><code>firstScheduledRoot</code> 对应 <code>firstRoot</code></p><p><code>NoWork === 0</code><br><code>Sync === 1000</code></p><h2 id="实际用例"><a href="#实际用例" class="headerlink" title="实际用例"></a>实际用例</h2><p>正常业务场景下，只会调用一次 <code>ReactDOM.render</code>，所以不会出现需要「寻找优先级最高的 <code>root</code>」这种情况。不过为了能证实上述的说法，现在运行一个实际用例，断点查看运行过程中那些全局变量的变化</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App1</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 点击按钮后，更新 `app1 并且将 app2 渲染到页面上</span></span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            value: <span class="number">1</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App2</span> /&gt;</span>, document.getElementById('app2'));</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    render() &#123;</span></span><br><span class="line"><span class="xml">        return <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>click it<span class="tag">&lt;/<span class="name">button</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">class App2 extends React.Component &#123;</span></span><br><span class="line"><span class="xml">    render() &#123;</span></span><br><span class="line"><span class="xml">        return <span class="tag">&lt;<span class="name">p</span>&gt;</span>App2<span class="tag">&lt;/<span class="name">p</span>&gt;</span>;</span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">App1</span> /&gt;</span>, document.getElementById('app1'));</span></span><br></pre></td></tr></table></figure><p>点击按钮会更新 <code>app1</code>，并且将 <code>app2</code> 渲染到页面上。</p><p><code>setState</code> 执行后，调用链路简单来说是<br><code>setState</code> -&gt; <code>enqueueSetState</code> -&gt; <code>scheduleWork</code> -&gt; <code>requestWork</code> -&gt; 省略…</p><h3 id="第一次调用-findHighestPriorityRoot"><a href="#第一次调用-findHighestPriorityRoot" class="headerlink" title="第一次调用 findHighestPriorityRoot"></a>第一次调用 findHighestPriorityRoot</h3><p>第一次调用是在创建 <code>update</code> 时的 <code>requestCurrentTime</code> 方法内，但第一次调用由于 <code>firstScheduledRoot</code> 好 <code>lastScheduledRoot</code> 都是 <code>null</code>，就等于不存在任何节点用于查找，所以这次调用没有任何意义。</p><h3 id="第二次调用"><a href="#第二次调用" class="headerlink" title="第二次调用"></a>第二次调用</h3><p><code>requestWork</code> 方法方法会调用 <code>addRootToSchedule</code>，调用参数为 <code>app1Root</code>（表示 <code>app1</code> 生成的 <code>root</code>，后面同理），调用后会将 <code>firstScheduledRoot</code> 和 <code>lastScheduledRoot</code> 这两个全局变量都赋值为 <code>app1Root</code>。</p><p>然后调用栈回到 <code>requestWork</code> 方法内，由于此时是「批量更新」(<code>isBatchingUpdates === true</code>)，所以不会继续往下执行，而是中断，并等到该批次结尾再执行。</p><blockquote><p>「该批次」可以理解为一次同步任务执行，上面例子就是 <code>handleClick</code> 该方法执行完后。</p></blockquote><p>所以接下来是调用 <code>ReactDOM.render(&lt;App2 /&gt;)</code>，<code>render</code> 方法的调用链路和 <code>setState</code> 差别不是很大，同样会调用 <code>scheduleWork</code> 并且之后就是一样的了。<br><code>render</code> -&gt; <code>updateContainer</code> -&gt; <code>scheduleRootUpdate</code> -&gt; <code>scheduleWork</code>。</p><p><code>render</code> 和 <code>setState</code> 一样也会创建 <code>update</code>，所以同样会调用 <code>requestCurrentTime</code>，所以也会调用 <code>findHighestPriorityRoot</code> 方法，此时由于 <code>lastScheduledRoot</code> 和 <code>firstScheduledRoot</code> 都已经被赋值为 <code>app1Root</code> 了，所以是可以进行查找的，但由于此时只存在 <code>app1Root</code>，所以肯定只能找到该节点，并且实际的该方法并不返回值，而是会将 <code>nextFlushedRoot</code> 全局变量置为找到的节点。</p><p>然后在 <code>requestWork</code> 方法内同样会调用 <code>addRootToSchedule</code>，不过这次和 <code>setState</code> 过程中调用时就不同了，此时<code>lastScheduledRoot === firstScheduledRoot === app1Root</code>，所以会走另外一个逻辑</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// root === app2Root、lastScheduledRoot === firstScheudledRoot === app1Root</span></span><br><span class="line">lastScheduledRoot.nextScheduledRoot = root;</span><br><span class="line">lastScheduledRoot = root;</span><br><span class="line">lastScheduledRoot.nextScheduledRoot = firstScheduledRoot;</span><br></pre></td></tr></table></figure><p>即将 <code>app2Root</code> 保存到 <code>app1Root</code> 上，然后将 <code>lastScheduledRoot</code> 覆盖为 <code>app2Root</code>，再将 <code>app1Root</code> 保存到 <code>app2Root</code> 上，用代码表示是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">firstScheduledRoot === app1Root;</span><br><span class="line">lastScheduledRoot === app2Root;</span><br><span class="line">app1Root.nextScheduledRoot === app2Root;</span><br><span class="line">app2Root.nextScheduledRoot === app1Root;</span><br></pre></td></tr></table></figure><p>这和我们之前自己实现 <code>findHighestPriorityRoot</code> 时使用的用例很类似，可以说就是在初始化这个链结构。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> root1 = <span class="keyword">new</span> Root(<span class="number">200</span>);</span><br><span class="line"><span class="keyword">const</span> root2 = <span class="keyword">new</span> Root(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">firstRoot = root1;</span><br><span class="line">lastRoot = root2;</span><br><span class="line">root1.next = root2;</span><br><span class="line">root2.next = root1</span><br></pre></td></tr></table></figure><p>再次从 <code>addRootToSchedule</code> 方法回到 <code>requestWork</code> 中，此时会走非批量更新，即<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// setState 过程中置为 true</span></span><br><span class="line"><span class="keyword">if</span> (isBatchingUpdates) &#123;</span><br><span class="line">  <span class="comment">// ReactDOM.render 过程中置为 true</span></span><br><span class="line">  <span class="keyword">if</span> (isUnbatchingUpdates) &#123;</span><br><span class="line">    <span class="comment">// 所以会调用这里</span></span><br><span class="line">    <span class="comment">// root === app2Root</span></span><br><span class="line">    nextFlushedRoot = root;</span><br><span class="line">    nextFlushedExpirationTime = Sync;</span><br><span class="line">    performWorkOnRoot(root, Sync, <span class="literal">false</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>performWorkOnRoot</code> 之后的调用链是 <code>renderRoot</code>，再之后的，也不会再调用 <code>findHighestPriorityRoot</code> 方法了。</p><h3 id="第三次调用"><a href="#第三次调用" class="headerlink" title="第三次调用"></a>第三次调用</h3><p><code>app2 render</code> 完成后，接下来会回到 <code>app1</code> 的更新，即调用 <code>performSyncWork</code> 方法，这是前面提到的「批处理结尾」时会调用的方法。<br>该方法就是调用 <code>performWork(Sync, false)</code>，该方法内，先调用一次 <code>findHighestPriorityRoot</code>，此时仍然</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">firstScheduledRoot === app1Root;</span><br><span class="line">lastScheduledRoot === app2Root;</span><br><span class="line"></span><br><span class="line">app1Root.nextScheduledRoot === app2Root;</span><br><span class="line">app2Root.nextScheduledRoot === app1Root;</span><br></pre></td></tr></table></figure><p><code>app2Root</code> 已经「完成工作」，或者说「已经无效」，所以需要被移除，我们前面也讲到如何从链中移除一个节点，所以 <code>app1Root</code> 就变成了 <code>lastScheduledRoot</code>，同时还是 <code>firstScheduledRoot</code>，并且 <code>nextFlushedRoot</code> 也置为了 <code>app1Root</code>。<br>然后再调用 <code>performWork(nextFlushedRoot)</code> 实现对 <code>app1</code> 的更新。</p><h3 id="第四次调用"><a href="#第四次调用" class="headerlink" title="第四次调用"></a>第四次调用</h3><p>实际上，在 <code>performWork(nextFlushedRoot)</code> 下面，还会调用一次 <code>findHighestPriorityRoot</code>，目的是找到下一个需要更新的 <code>root</code> 进行更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (nextFlushedRoot !== <span class="literal">null</span>) &#123;</span><br><span class="line">    performWork(nextFlushedRoot);</span><br><span class="line">    findHighestPriorityRoot();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，这次调用时，<code>app1Root</code> 已经「无效」，所以被移除，链上不再存在节点，自然 <code>nextFlushedRoot === null</code>，从而中止了循环。</p><h2 id="可能存在的疑问"><a href="#可能存在的疑问" class="headerlink" title="可能存在的疑问"></a>可能存在的疑问</h2><h3 id="1、为什么不直接调用两次-ReactDOM-render"><a href="#1、为什么不直接调用两次-ReactDOM-render" class="headerlink" title="1、为什么不直接调用两次 ReactDOM.render"></a>1、为什么不直接调用两次 <code>ReactDOM.render</code></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App1</span> /&gt;</span>, document.getElementById('app1'));</span></span><br><span class="line"><span class="xml">ReactDOM.render(<span class="tag">&lt;<span class="name">App2</span> /&gt;</span>, document.getElementById('app2'));</span></span><br></pre></td></tr></table></figure><p>为什么这么写就不行？</p><p>因为 <code>render</code> 是非批量更新，即它会直接走完整个流程，如果想要出现链中有两个以上的节点，需要控制 <code>addRootToSchedule</code> 方法的调用顺序。<br>即，在第一个 <code>app1</code> 执行完 <code>addRootToSchedule</code> 方法后，需要中断当前 <code>app1</code> 的更新，开始下一个 <code>app2</code> 的更新。<br>所以，我们的实际用例可以改成先完成初始化，在点击按钮后，调用 <code>app1</code> 和 <code>app2</code> 的 <code>setState</code>。</p><blockquote><p>还有一些遗漏，后面再补。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在看源码时，可以看到有这么一个方法，从函数名来看，是「找到优先级最高的 &lt;code&gt;root&lt;/code&gt;」，但每个应用只有一个 &lt;code&gt;root&lt;/code&gt;，那为什么还要去「找」呢？&lt;br&gt;因为 &lt;code&gt;react&lt;/code&gt; 支持多个实例，即支持调用多次 &lt;code&gt;ReactDOM.render&lt;/code&gt;。如果他们同时发生更新，也要有个先后关系，这个方法，就是用来从多个实例对应的 &lt;code&gt;root&lt;/code&gt; 中，找出最先进行更新的那个 &lt;code&gt;root&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React 源码中的位运算</title>
    <link href="http://yoursite.com/2020/02/08/react%20%E4%B8%AD%E7%9A%84%E4%BD%8D%E8%BF%90%E7%AE%97/"/>
    <id>http://yoursite.com/2020/02/08/react 中的位运算/</id>
    <published>2020-02-08T00:00:00.000Z</published>
    <updated>2020-02-08T12:59:31.882Z</updated>
    
    <content type="html"><![CDATA[<p>看 <code>react</code> 源码过程中，发现这样的代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NoContext = <span class="comment">/*                    */</span> <span class="number">0b000000</span>;</span><br><span class="line"><span class="keyword">const</span> BatchedContext = <span class="comment">/*               */</span> <span class="number">0b000001</span>;</span><br><span class="line"><span class="keyword">const</span> EventContext = <span class="comment">/*                 */</span> <span class="number">0b000010</span>;</span><br><span class="line"><span class="keyword">const</span> DiscreteEventContext = <span class="comment">/*         */</span> <span class="number">0b000100</span>;</span><br><span class="line"><span class="keyword">const</span> LegacyUnbatchedContext = <span class="comment">/*       */</span> <span class="number">0b001000</span>;</span><br><span class="line"><span class="keyword">const</span> RenderContext = <span class="comment">/*                */</span> <span class="number">0b010000</span>;</span><br><span class="line"><span class="keyword">const</span> CommitContext = <span class="comment">/*                */</span> <span class="number">0b100000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> executionContext = NoContext;</span><br><span class="line">executionContext &amp;= ~BatchedContext;</span><br><span class="line">executionContext |= LegacyUnbatchedContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((executionContext &amp; (RenderContext | CommitContext)) !== NoContext) &#123;</span><br><span class="line">    <span class="comment">// We're inside React, so it's fine to read the actual time.</span></span><br><span class="line">    <span class="keyword">return</span> msToExpirationTime(now());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>~</code>、<code>|</code> 和 <code>&amp;</code> 都是「位运算操作符」，平常写代码很少会用到，导致完全不理解这些运算符有什么用，<code>react</code> 源码中这些代码到底是什么意思呢？<br><a id="more"></a></p><h2 id="运算符"><a href="#运算符" class="headerlink" title="~ 运算符"></a>~ 运算符</h2><p>首先来看第一个运算符 <code>~</code>，它是所谓的「否定号」或者说「逻辑否」。</p><blockquote><p>与之相对的就是「逻辑与」<code>&amp;</code> 和「逻辑或」 <code>|</code>。</p></blockquote><p>它的计算过程很简单，就是「二进制取反」，即写出数字的二进制表示，每位都和之前相反，1 变成 0，0 变成 1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~<span class="number">1</span> <span class="comment">// ~000001 === 111110</span></span><br></pre></td></tr></table></figure><p>它实质上是对数字求负，然后减1。<br>所以 <code>~1 === -2</code>、<code>~0 === -1</code> 这个很好理解，并且我们能得出 -2 的二进制表示正是 111110</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> num = <span class="number">-2</span>;</span><br><span class="line"><span class="comment">// 1、先写出 2 的二进制表示</span></span><br><span class="line"><span class="comment">// 000010</span></span><br><span class="line"><span class="comment">// 2、取反</span></span><br><span class="line"><span class="comment">// 111101</span></span><br><span class="line"><span class="comment">// 3、加1</span></span><br><span class="line"><span class="comment">// 111110</span></span><br></pre></td></tr></table></figure><h2 id="amp-运算符"><a href="#amp-运算符" class="headerlink" title="&amp; 运算符"></a>&amp; 运算符</h2><p>这个相比 <code>~</code> 运算符在计算过程上很好理解，但没有 <code>~</code> 运算符好计算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">25</span> &amp; <span class="number">6</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="number">25</span> &amp; <span class="number">7</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="number">25</span> &amp; <span class="number">8</span>; <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><p>上面代码的计算过程是这样的，把数字写成二进制，上下比较，如果都是 1 那么结果的相同位也是 1 否则就是 0。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0110</span>  <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span>  <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span>  <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span>  <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span>  <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span>  <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h2 id="运算符-1"><a href="#运算符-1" class="headerlink" title="| 运算符"></a><code>|</code> 运算符</h2><p>与 <code>&amp;</code> 刚好相反，二进制表示时，上下其中任意一个是 1 那么结果的相同位上也是 1。所以之前的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0110</span>  <span class="comment">// 6</span></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1111</span>  <span class="comment">// 31</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0111</span>  <span class="comment">// 7</span></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1111</span>  <span class="comment">// 31</span></span><br><span class="line"></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1000</span>  <span class="comment">// 8</span></span><br><span class="line"><span class="comment">// ---------------------------------------</span></span><br><span class="line"><span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0001</span> <span class="number">1001</span>  <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p>和 <code>&amp;</code> 一样无法直观地看出结果。</p><h2 id="react-中的位运算"><a href="#react-中的位运算" class="headerlink" title="react 中的位运算"></a>react 中的位运算</h2><p>在了解三个运算符后，我们回过头看看 <code>react</code> 源码，它有多种用法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> executionContext = NoContext;</span><br><span class="line"></span><br><span class="line">executionContext &amp;= ~BatchedContext;</span><br><span class="line">executionContext &amp;= BatchedContext;</span><br><span class="line">executionContext |= BatchedContext;</span><br><span class="line">(executionContext &amp; (RenderContext | CommitContext) === NoContext;</span><br></pre></td></tr></table></figure><p>这里每个常量的值都是有目的的，分别为 0、1、2、4、8、16、32，而不是像枚举那样 0、1、2、3，就是为了配合位运算。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> NoContext = <span class="comment">/*                    */</span> <span class="number">0b000000</span>; <span class="comment">// 0</span></span><br><span class="line"><span class="keyword">const</span> BatchedContext = <span class="comment">/*               */</span> <span class="number">0b000001</span>; <span class="comment">// 1</span></span><br><span class="line"><span class="keyword">const</span> EventContext = <span class="comment">/*                 */</span> <span class="number">0b000010</span>; <span class="comment">// 2</span></span><br><span class="line"><span class="keyword">const</span> DiscreteEventContext = <span class="comment">/*         */</span> <span class="number">0b000100</span>; <span class="comment">// 4</span></span><br><span class="line"><span class="keyword">const</span> LegacyUnbatchedContext = <span class="comment">/*       */</span> <span class="number">0b001000</span>; <span class="comment">// 8</span></span><br><span class="line"><span class="keyword">const</span> RenderContext = <span class="comment">/*                */</span> <span class="number">0b010000</span>; <span class="comment">// 16</span></span><br><span class="line"><span class="keyword">const</span> CommitContext = <span class="comment">/*                */</span> <span class="number">0b100000</span>; <span class="comment">// 32</span></span><br></pre></td></tr></table></figure><p>那么这些特定的数字是怎么配合位运算做到「有含义」的呢？<br><strong>其实就是 <code>executionContext</code> 所对应二进制中 1 的位置，记录了它所「包含」的 <code>xxxContext</code></strong>，举例来说 <code>000011</code> 表示 <code>BatchedContext</code> 和 <code>EventContext</code>；<code>110001</code> 表示 <code>CommitContext</code> 和 <code>RenderContext</code> 和 <code>BatchedContext</code>；</p><h3 id="表示状态累加的"><a href="#表示状态累加的" class="headerlink" title="表示状态累加的 |"></a>表示状态累加的 <code>|</code></h3><p>首先来看看 <code>|</code> 运算符，由于每个常量二进制的 1 都在不同位置，两个任意常量经过 <code>|</code> 运算符后，其实就是增加了 1 的位置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NoContext | BatchedContext;<span class="comment">// 000001</span></span><br><span class="line">BatchedContext | RenderContext; <span class="comment">// 010001;</span></span><br></pre></td></tr></table></figure><p>所以可以理解 <code>|</code> 运算符就是「记录新增 Context」或者说「状态的累加」。如果用传统的写法，可能是这样的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BatchedContext = <span class="string">'BatchedContext'</span>;</span><br><span class="line"><span class="keyword">const</span> EventContext = <span class="string">'EventContext'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> executionContext = [];</span><br><span class="line">executionContext.push(EventContext); <span class="comment">// 等同 react 源码中 executionContext |= EventContext;</span></span><br></pre></td></tr></table></figure><h3 id="判断状态是否存在的-amp"><a href="#判断状态是否存在的-amp" class="headerlink" title="判断状态是否存在的 &amp;"></a>判断状态是否存在的 <code>&amp;</code></h3><p>然后是 <code>&amp;</code> 运算符，同样在特定数字下它能表达特殊的含义。首先由于每个常量的 1 都在不同位置，所以两个常量直接 <code>&amp;</code> 操作后结果肯定是 000000，但如果是经过 <code>|</code> 运算后的 <code>executionContext</code> 和常量进行 <code>&amp;</code> 运算，结果就有意思了</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> executionContext = NoContext;</span><br><span class="line">executionContext |= BatchedContext;</span><br><span class="line"></span><br><span class="line">executionContext &amp;= BatchedContext; <span class="comment">// 000001 &amp; 000001 === 000001</span></span><br><span class="line"></span><br><span class="line">executionContext |= EventContext; <span class="comment">// 000001 | 000010 === 000011</span></span><br><span class="line">executionContext &amp;= BatchedContext; <span class="comment">// 000011 &amp; 000001 === 000001</span></span><br><span class="line">executionContext &amp;= EventContext; <span class="comment">// 000001 &amp; 000010 === 000000</span></span><br></pre></td></tr></table></figure><p>可以发现它有「判断是否存在」的含义，但由于使用了 <code>&amp;=</code> 所以更确切的含义是「如果存在就覆盖」。</p><h3 id="移除状态的"><a href="#移除状态的" class="headerlink" title="移除状态的 ~"></a>移除状态的 <code>~</code></h3><p>这个符号目前看到的场景是和 <code>&amp;</code> 一起使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> executionContext = NoContext;</span><br><span class="line">executionContext &amp;= ~BatchedContext;</span><br></pre></td></tr></table></figure><p>前面说过 <code>&amp;=</code> 是判断存在就覆盖的含义，但是 <code>BatchedContext</code> 多了个 <code>~</code> 符号，含义肯定有所改变，那这段代码究竟是什么含义呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">executionContext = <span class="number">000000</span> &amp; ~<span class="number">000001</span>;</span><br><span class="line">executionContext = <span class="number">000000</span> &amp; <span class="number">111110</span>;</span><br><span class="line"></span><br><span class="line">executionContext = <span class="number">000000</span>;</span><br></pre></td></tr></table></figure><p>换个用例</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">executionContext = NoContext;</span><br><span class="line">executionContext |= BatchedContext;</span><br><span class="line">executionContext |= EventContext;</span><br><span class="line"></span><br><span class="line">executionContext &amp;= ~BatchedContext;</span><br></pre></td></tr></table></figure><p>等同于</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">executionContext = <span class="number">000011</span> &amp; ~<span class="number">000001</span>;</span><br><span class="line">executionContext = <span class="number">000011</span> &amp; <span class="number">111110</span>;</span><br><span class="line">executionContext = <span class="number">000010</span>; <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>它表达的是「移除指定状态」，如果用传统的写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> BatchedContext = <span class="string">'BatchedContext'</span>;</span><br><span class="line"><span class="keyword">const</span> EventContext = <span class="string">'EventContext'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> executionContext = [];</span><br><span class="line">executionContext.push(EventContext); <span class="comment">// 等同 react 源码中 executionContext |= EventContext;</span></span><br><span class="line"></span><br><span class="line">executionContext.filter(<span class="function">(<span class="params">context</span>) =&gt;</span> context !== BatchedContext); <span class="comment">// 等同 executionContext &amp;= ~BatchedContext</span></span><br></pre></td></tr></table></figure><h3 id="位运算的优点"><a href="#位运算的优点" class="headerlink" title="位运算的优点"></a>位运算的优点</h3><p>为什么 <code>react</code> 使用这么难理解的方式去实现这些逻辑呢，大概是因为位运算的性能好很多吧，如果使用数组来保存状态，无论是要占用堆内存，还是在判断时还需要在内存中查询，任何方面，相比位运算都没有一点优势，那么采用位运算看来是必然的选择了。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.w3school.com.cn/js/pro_js_operators_bitwise.asp" target="_blank" rel="noopener">ECMAScript 位运算符</a></li><li><a href="https://segmentfault.com/a/1190000020532672?utm_source=tag-newest" target="_blank" rel="noopener">React的第一次渲染过程浅析<br>javascriptreact.js</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看 &lt;code&gt;react&lt;/code&gt; 源码过程中，发现这样的代码&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; NoContext = &lt;span class=&quot;comment&quot;&gt;/*                    */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b000000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; BatchedContext = &lt;span class=&quot;comment&quot;&gt;/*               */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b000001&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; EventContext = &lt;span class=&quot;comment&quot;&gt;/*                 */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b000010&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DiscreteEventContext = &lt;span class=&quot;comment&quot;&gt;/*         */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b000100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; LegacyUnbatchedContext = &lt;span class=&quot;comment&quot;&gt;/*       */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b001000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; RenderContext = &lt;span class=&quot;comment&quot;&gt;/*                */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b010000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; CommitContext = &lt;span class=&quot;comment&quot;&gt;/*                */&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0b100000&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; executionContext = NoContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;executionContext &amp;amp;= ~BatchedContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;executionContext |= LegacyUnbatchedContext;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; ((executionContext &amp;amp; (RenderContext | CommitContext)) !== NoContext) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// We&#39;re inside React, so it&#39;s fine to read the actual time.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; msToExpirationTime(now());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;~&lt;/code&gt;、&lt;code&gt;|&lt;/code&gt; 和 &lt;code&gt;&amp;amp;&lt;/code&gt; 都是「位运算操作符」，平常写代码很少会用到，导致完全不理解这些运算符有什么用，&lt;code&gt;react&lt;/code&gt; 源码中这些代码到底是什么意思呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>nodejs 中的 Cache-Control</title>
    <link href="http://yoursite.com/2020/01/05/cache-control-in-nodejs/"/>
    <id>http://yoursite.com/2020/01/05/cache-control-in-nodejs/</id>
    <published>2020-01-05T00:00:00.000Z</published>
    <updated>2020-01-05T15:32:54.105Z</updated>
    
    <content type="html"><![CDATA[<p>我一直对前端需要「熟悉」浏览器缓存是持疑问态度的，因为前端无法控制缓存，即无法通过代码或者某种方式来指定某些资源是否需要缓存。<br>举个例子，我们的 <code>index.html</code> 文件中引入了 <code>bundle.js</code> 这个文件，我们希望在每次刷新页面时，都不要使用缓存，每次都去服务器获取最新的 <code>bundle.js</code> 文件。<br>要实现这个需求，只从前端的角度来思考，怎么做？<br>或许有人会说 <code>meta</code> 标签支持指定 <code>Cache-Control</code>，但这是针对全站资源，如果只是针对特定的资源如 <code>bundle.js</code> 获取最新的，其他资源照样使用缓存。<br>似乎是无法实现的。那什么角色应该了解这些内容呢？<br><a id="more"></a></p><p>应该是后端，或者说写 <code>node</code> 应用的开发，因为是否缓存是服务端来决定的。<br>前端只需要知道这么一个东西，能在需要时查询到解决方案就行了，并不需要特意去学习这些知识，原因前面也说了，前端的实际业务场景中根本用不上。</p><h2 id="服务端处理请求响应资源"><a href="#服务端处理请求响应资源" class="headerlink" title="服务端处理请求响应资源"></a>服务端处理请求响应资源</h2><p>浏览器，或者说客户端吧，所有的请求都是到达服务端，服务端再返回资源，再返回资源时，可以额外再返回一些信息用来告诉浏览器这个资源要不要缓存、缓存多久。</p><h3 id="nodejs-实现服务器"><a href="#nodejs-实现服务器" class="headerlink" title="nodejs 实现服务器"></a>nodejs 实现服务器</h3><p><a href="https://codesandbox.io/s/wizardly-mahavira-og20m" target="_blank" rel="noopener">https://codesandbox.io/s/wizardly-mahavira-og20m</a><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; method, url &#125; = req;</span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (url === <span class="string">'/'</span>) &#123;</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'text/html'</span></span><br><span class="line">            &#125;);</span><br><span class="line">            res.write(<span class="string">`</span></span><br><span class="line"><span class="string">&lt;img src="/example.png" /&gt;</span></span><br><span class="line"><span class="string">            `</span>);</span><br><span class="line">            res.end();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (url === <span class="string">'/example.png'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> filepath = path.resolve(__dirname, url.slice(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> imgContent = fs.readFileSync(filepath);</span><br><span class="line">                res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'image/png'</span></span><br><span class="line">                &#125;);</span><br><span class="line">                res.write(imgContent);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                res.writeHead(<span class="number">404</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            res.end();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res.writeHead(<span class="number">404</span>);</span><br><span class="line">    res.end();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> PORT = <span class="number">8080</span>;</span><br><span class="line">server.listen(PORT, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Server is listening at port <span class="subst">$&#123;PORT&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>打开浏览器访问 <a href="https://og20m.sse.codesandbox.io/" target="_blank" rel="noopener">https://og20m.sse.codesandbox.io/</a> 并打开控制台，会看到加载了一张 <code>example.png</code> 图片，并且无论怎么刷新，每次请求都会从服务端请求最新的图片，而不会出现 <code>200(from memory cache)</code> 或者 <code>304</code>。</p><blockquote><p>这里不能直接在浏览器里访问图片，即不能直接访问 <a href="https://og20m.sse.codesandbox.io/example.png" target="_blank" rel="noopener">https://og20m.sse.codesandbox.io/example.png</a> 来测试是否使用缓存，因为每次都是新请求，具体为什么可能要看浏览器怎么处理这种直接访问图片的情况了。</p></blockquote><h3 id="使用-cache-control-或-expires-实现强缓存"><a href="#使用-cache-control-或-expires-实现强缓存" class="headerlink" title="使用 cache-control 或 expires 实现强缓存"></a>使用 cache-control 或 expires 实现强缓存</h3><p>强缓存就是客户端在发出请求前，自己就能判断这次请求是否使用缓存，而不会向服务器发出实际请求。<br>实现强缓存可以用 <code>cache-control</code> 或者 <code>expires</code>，但大部分情况都是两者一起使用，因为 <code>cache-control</code> 是 <code>http1.1</code> 规范内的，如果浏览器无法识别 <code>cache-control</code> 头，还可以用 <code>expires</code>。<br>要使用 <code>cache-control</code> 也很简单，在响应头内增加该字段即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略重复内容</span></span><br><span class="line">                res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'image/png'</span>,</span><br><span class="line">                    <span class="string">'Cache-Control'</span>: <span class="string">'max-age=30'</span>,</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>这样写表示缓存时间为 30 秒，30 秒内的重复请求都不会处理，让浏览器用缓存。再来看看增加该字段后请求有什么变化。</p><p><img src="/blog/2020/01/05/cache-control-in-nodejs/增加 cache-control 后的请求.png" alt="增加 cache-control 后的请求"></p><p>可以看到 <code>Size</code> 显示 <code>memory cache</code>，<code>Time</code> 更是变成了 0。超过 30 秒后刷新，会重新请求服务器，再看看这次的请求</p><p><img src="/blog/2020/01/05/cache-control-in-nodejs/正常请求.png" alt="正常请求"></p><p><code>expires</code> 也是类似，把 <code>cahce-control</code> 删除，增加 <code>Expires</code> 字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 省略重复内容</span></span><br><span class="line">                res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'image/png'</span>,</span><br><span class="line">                    <span class="string">'Expires'</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="built_in">Date</span>.now() + <span class="number">30000</span>).toGMTString(),</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><p>结果和上面一样，只是 <code>response headers</code> 有点不同</p><p><img src="/blog/2020/01/05/cache-control-in-nodejs/expires-request.png" alt="使用 Expires 后的响应头"></p><h3 id="协商缓存"><a href="#协商缓存" class="headerlink" title="协商缓存"></a>协商缓存</h3><p>与强缓存相对的就是所谓的协商缓存了，从名字也能看出来，「协商」，表示要和服务器通信后才能决定是否使用缓存。最容易理解的协商缓存实现方式是增加 <code>ETag</code> 字段，该字段简单来说是一个（文件路径 + 最后修改时间）再经过处理后得到的字符串。</p><p>这样生成的 <code>ETag</code> 就能表达唯一性了</p><ul><li>2020-01-05 22:00:00 修改的 bundle.js</li><li>2020-01-05 23:00:00 修改的 bundle.js</li></ul><p>这两个文件的 <code>ETag</code> 是不同的，浏览器第一次请求 <code>bundle.js</code> 时假设返回的 <code>ETag</code> 是 <code>bundle220000</code>，在 22:00:00 至 22:59:59 这段时间内每次浏览器请求，都会重新计算 <code>bundle.js</code> 的 <code>ETag</code> 一直等于 <code>bundle220000</code>，并和请求时传过来的 <code>ETag</code> 判断是否一致，如果一致就只返回响应头，不返回响应体。<br>用代码来简单说明</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在响应时增加 ETag 字段</span></span><br><span class="line">                res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'image/png'</span>,</span><br><span class="line">                    <span class="string">'ETag'</span>: computeETag(filepath),</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在请求时获取 If-None-Match 字段和要请求的资源计算 ETag 比对并处理</span></span><br><span class="line"><span class="keyword">const</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; method, url, headers &#125; = req;</span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">'GET'</span>) &#123;</span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">         <span class="keyword">if</span> (url === <span class="string">'/example.png'</span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> filepath = path.resolve(__dirname, url.slice(<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (computeETag(filepath) === headers[<span class="string">'if-none-match'</span>]) &#123;</span><br><span class="line">                res.writeHead(<span class="number">304</span>, <span class="string">'Not Modified'</span>, &#123;</span><br><span class="line">                    <span class="string">'Content-Type'</span>: <span class="string">'image/png'</span>,</span><br><span class="line">                &#125;);</span><br><span class="line">                res.end();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 省略</span></span><br><span class="line">         &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeETag</span>(<span class="params">filepath</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> filepath;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>省去了读取文件，速度会稍微快一些吧。除了 <code>ETag</code>，<code>last-Modified</code> 也是用作协商缓存的，原理类似，只是不用拿到资源路径和最后修改时间再做处理，直接用最后修改时间就行。</p><ul><li>1、如果 headers[‘if-modified-since’] === getLastModifiedTime(url) 跳 2 否则跳 3</li><li>2、返回 304 状态码和响应头</li><li>3、读取文件内容并返回 200 状态码和响应头</li></ul><h2 id="cahce-control"><a href="#cahce-control" class="headerlink" title="cahce-control"></a>cahce-control</h2><p>前面只提到了 <code>cache-control</code> 设置 <code>max-age</code> 的场景，但除了 <code>max-age</code>，响应头还可以设置其他值，如 <code>no-cache</code> 和 <code>no-store</code>。</p><p>如果想浏览器每次请求都请求最新的内容，那么 <code>cache-control</code> 需要设置成 <code>no-store</code>；<code>no-cache</code> 和 <code>max-age=0</code> 意义是相同的，即浏览器会向服务器发送请求，服务器如果认为可以使用缓存，那么浏览器就会「跳过获取响应体」，不知道服务器要如何处理这种情况。</p><h2 id="api-请求的缓存"><a href="#api-请求的缓存" class="headerlink" title="api 请求的缓存"></a>api 请求的缓存</h2><p><code>api</code> 请求和响应，本质上和静态资源的请求响应是没有区别的，所以是否可以缓存 <code>api</code> 请求呢？之前有考虑过这类场景，将 <code>api</code> 请求人为地分类</p><ul><li>1、永远不会变化的</li><li>2、变化频率小，可能一天内不会发生变化的</li><li>3、变化频率大，每次请求都可能不同</li></ul><p>第一类就和静态资源比如图片一样，一张图片永远都不会发生变化，所以 <code>ETag</code> 是永远不会变的，即使 <code>cache-control</code> 设置的时间超过了，也只是走协商缓存，当然大部分情况都是设置一个超长的 <code>max-age</code>。<br>第二类变化频率小，比如搜索组织内成员，如果是公司组织，变化频率是非常小的，也能够容忍不会立即更新，所以可以设置一定时间内走缓存。<br>第三类就不用说了，完全不能走缓存。</p><p><code>api</code> 请求还适用于缓存的场景是数据量非常大的情况，这时即使响应内容会频繁变化，但可以应用协商缓存，即对响应内容计算唯一值，一样走 <code>ETag</code> 的逻辑，是可以省去传输大量数据的时间的，虽然服务器一样要从数据库读这个数据，还要做额外的计算，但流量应该是能减少。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control" target="_blank" rel="noopener">Cache-Control</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我一直对前端需要「熟悉」浏览器缓存是持疑问态度的，因为前端无法控制缓存，即无法通过代码或者某种方式来指定某些资源是否需要缓存。&lt;br&gt;举个例子，我们的 &lt;code&gt;index.html&lt;/code&gt; 文件中引入了 &lt;code&gt;bundle.js&lt;/code&gt; 这个文件，我们希望在每次刷新页面时，都不要使用缓存，每次都去服务器获取最新的 &lt;code&gt;bundle.js&lt;/code&gt; 文件。&lt;br&gt;要实现这个需求，只从前端的角度来思考，怎么做？&lt;br&gt;或许有人会说 &lt;code&gt;meta&lt;/code&gt; 标签支持指定 &lt;code&gt;Cache-Control&lt;/code&gt;，但这是针对全站资源，如果只是针对特定的资源如 &lt;code&gt;bundle.js&lt;/code&gt; 获取最新的，其他资源照样使用缓存。&lt;br&gt;似乎是无法实现的。那什么角色应该了解这些内容呢？&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="node" scheme="http://yoursite.com/categories/node/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="cache-control" scheme="http://yoursite.com/tags/cache-control/"/>
    
  </entry>
  
  <entry>
    <title>Three.js 渲染自定义模型</title>
    <link href="http://yoursite.com/2020/01/02/three.js%20%E6%B8%B2%E6%9F%93%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2020/01/02/three.js 渲染自定义模型/</id>
    <published>2020-01-02T00:00:00.000Z</published>
    <updated>2020-01-04T12:40:52.272Z</updated>
    
    <content type="html"><![CDATA[<p><code>Three.js</code> 虽然内置了一些模型，但在实际业务中往往需要导入外部模型，导入的模型可以视为自定义模型。</p><p>首先要知道的是模型本质上来说是「三维坐标的集合」，最简单的一个模型可以用三个坐标和连接这三个坐标的「面」来表示。<br><a id="more"></a></p><h2 id="模型就是数字"><a href="#模型就是数字" class="headerlink" title="模型就是数字"></a>模型就是数字</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vertices = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>],</span><br><span class="line">    [<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> faces = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这段代码表示有三个坐标分别为 <code>0, 0,0</code>、<code>0, 100, 0</code> 和 <code>100, 0, 0</code>，并且这三个点在 <code>vertices</code> 数组中的下标依次为 <code>0</code>、<code>1</code>、<code>2</code>，依次连接我们就可以得到一个三角形「面」，所以 <code>[0, 1, 2]</code> 表示的就是这个三角形的面。</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102162447524.png" alt="image-20200102162447524"></p><p>当然现在只有三个点所以很简单，但如果再多一个点，哪几个点连接才能变成我们期望的那个形状呢，所以 <code>faces</code> 的意义就在这里，模型有几个面，这个面是由哪三个点连接而成的。</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102162959641.png" alt="image-20200102162959641"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vertices = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],    <span class="comment">// 0</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>],  <span class="comment">// 1</span></span><br><span class="line">    [<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>],  <span class="comment">// 2</span></span><br><span class="line">    [<span class="number">100</span>, <span class="number">100</span>, <span class="number">0</span>],<span class="comment">// 3</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> faces = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>所以看到的三角形是</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102163622488.png" alt="image-20200102163622488"></p><p>并且，直角在右上角的面可以用 <code>[1, 3, 2]</code> 表示；直角在左上角的可以用 <code>[0, 1, 3]</code> 表示；直角在右下角的可以用 <code>[0, 2, 3]</code> 表示；</p><p>可能在这里有疑问，这不是一个平面吗，不是模型呀，模型应该是立体的。</p><p>其实模型就是多个面组合在一起，又因为面其实就是点，所以开始才说「模型就是三维坐标的集合」。如果想生成一个普遍意义上的模型，可以再增加 1 个三维坐标，和已有的三个坐标组成四个面。</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102150210912.png" alt="image-20200102150210912"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> vertices = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>],    <span class="comment">// 0</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>],  <span class="comment">// 1</span></span><br><span class="line">    [<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>],  <span class="comment">// 2</span></span><br><span class="line">    [<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>],  <span class="comment">// 3</span></span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> faces = [</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// three.js 代码</span></span><br><span class="line"><span class="keyword">const</span> geometry = <span class="keyword">new</span> THREE.Geometry();</span><br><span class="line">geometry.vertices = [</span><br><span class="line">    <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">100</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> THREE.Vector3(<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>),</span><br><span class="line">    <span class="keyword">new</span> THREE.Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">100</span>),</span><br><span class="line">];</span><br><span class="line">geometry.faces = [</span><br><span class="line">    <span class="keyword">new</span> THREE.Face3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>),</span><br><span class="line">    <span class="keyword">new</span> THREE.Face3(<span class="number">0</span>, <span class="number">1</span>, <span class="number">3</span>),</span><br><span class="line">    <span class="keyword">new</span> THREE.Face3(<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">    <span class="keyword">new</span> THREE.Face3(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>),</span><br><span class="line">];</span><br><span class="line"><span class="keyword">const</span> material = <span class="keyword">new</span> THREE.MeshBasicMaterial(&#123;</span><br><span class="line">    side: THREE.DoubleSide,</span><br><span class="line">    color: <span class="string">'red'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> mesh = <span class="keyword">new</span> THREE.Mesh(geometry, material);</span><br></pre></td></tr></table></figure><p>这是我理解的模型的本质。</p><h2 id="手写-obj-文件渲染模型"><a href="#手写-obj-文件渲染模型" class="headerlink" title="手写 obj 文件渲染模型"></a>手写 obj 文件渲染模型</h2><p>再以 <code>obj</code> 格式的模型文件来说明，我们可以手写一个 <code>obj</code> 文件导入到任意支持 <code>obj</code> 格式的软件中，也能渲染出我们预期的模型，仍然拿上面的例子说明。</p><p>使用记事本创建一个文本，写入下面内容后将后缀保存为 <code>example.obj</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">o Mesh</span><br><span class="line">v 0 0 0</span><br><span class="line">v 0 100 0</span><br><span class="line">v 100 0 0</span><br><span class="line">v 0 0 100</span><br><span class="line"></span><br><span class="line">f 1 2 3</span><br><span class="line">f 1 2 4</span><br><span class="line">f 1 3 4</span><br><span class="line">f 2 3 4</span><br></pre></td></tr></table></figure><p>第一行 <code>o Mesh</code> 表示开始一个模型，名字为 <code>Mesh</code>；第二至第五行 <code>v</code> 开头表示四个三维坐标；第七至十行 <code>f</code> 开头表示四个面，这里需要注意的是<strong>下标不是从 0 开始，而是从 1 开始</strong>。</p><p>使用 <code>blender</code> 导入该文件，能正确渲染我们预期的模型。</p><h2 id="给自定义模型贴图"><a href="#给自定义模型贴图" class="headerlink" title="给自定义模型贴图"></a>给自定义模型贴图</h2><p>贴图的本质就是把面上的点对应到贴图上，现在有这样一张贴图</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102152933444.png" alt="image-20200102152933444"></p><p>需要把这三个三角形贴到之前的模型的三个等边直角三角形上，只要修改 <code>geometry.faceVertexUvs[0]</code> 即可，对应的值是<strong>每个面顶点在贴图上的相对位置</strong>。有点难描述，<code>geometry</code> 第一个面是 <code>0, 1, 2</code> ，我们想给这个面贴上绿色的这个三角形，其实就是把 <code>0, 1, 2</code> 这三个点「放到」贴图上</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102154500201.png" alt="image-20200102154500201"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">geometry.faceVertexUvs[<span class="number">0</span>] = [</span><br><span class="line">  <span class="comment">// 第一个面上三个点对应贴图上的相对位置  </span></span><br><span class="line">  [</span><br><span class="line">      <span class="comment">// 0 这个点，即 0, 0, 0 对应贴图上 0, 0.5 这个点</span></span><br><span class="line">      [<span class="number">0</span>, <span class="number">0.5</span>],</span><br><span class="line">      <span class="comment">// 1 这个点，即 0, 100, 0 对应贴图上 0, 1 这个点</span></span><br><span class="line">      [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">      <span class="comment">// 2 这个点，即 100, 0, 0 对应贴图上 0.5, 0.5 这个点</span></span><br><span class="line">      [<span class="number">0.5</span>, <span class="number">0.5</span>],</span><br><span class="line">  ],</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>这里还是用 <code>blender</code> 来展示效果，当 <code>blender</code> 加载 <code>example.obj</code> 文件时，会加载相同目录下的同名 <code>mtl</code> 文件，所以再创建一个 <code>example.mtl</code> 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">newmtl material</span><br><span class="line">Ns 323.999994</span><br><span class="line">Ka 1.000000 1.000000 1.000000</span><br><span class="line">Kd 0.800000 0.800000 0.800000</span><br><span class="line">Ks 0.500000 0.500000 0.500000</span><br><span class="line">Ke 0.0 0.0 0.0</span><br><span class="line">Ni 1.450000</span><br><span class="line">d 1.000000</span><br><span class="line">illum 2</span><br><span class="line">map_Kd texture.png</span><br></pre></td></tr></table></figure><p>最后一行 <code>map_Kd texture.png</code> 指定了贴图文件路径，可以使用网络地址和绝对路径；以及修改 <code>example.obj</code> 文件，指定「相对位置」和面上的点和相对位置的对应关系。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 这行必须，指定贴图文件</span><br><span class="line">mtllib example.mtl</span><br><span class="line">o Mesh</span><br><span class="line">v 0 0 0</span><br><span class="line">v 0 100 0</span><br><span class="line">v 100 0 0</span><br><span class="line">v 0 0 100</span><br><span class="line"># 新增的「相对位置」</span><br><span class="line">vt 0 0.5</span><br><span class="line">vt 0 1</span><br><span class="line">vt 0.5 0.5</span><br><span class="line"># 使用贴图，这行也是必须的</span><br><span class="line">usemtl material</span><br><span class="line"># 指定 v 和 vt 的对应关系</span><br><span class="line">f 1/1 2/2 3/3</span><br><span class="line">f 1 2 4</span><br><span class="line">f 1 3 4</span><br><span class="line">f 2 3 4</span><br></pre></td></tr></table></figure><p>将 <code>example.obj</code>、<code>example.mtl</code> 和 <code>texture.png</code> 放在同一目录下，使用 <code>blender</code> 重新导入 <code>example.obj</code>，点击上方 <code>Shading</code> 菜单，即可看到贴图后的效果。</p><p><img src="/blog/2020/01/02/three.js 渲染自定义模型/image-20200102160336959.png" alt="image-20200102160336959"></p><blockquote><p>这是后下方的视角。</p></blockquote><p>要给其他面贴图同理。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然上面的例子很简单，但理解了这个例子，再复杂的模型也是一样的原理。并且知道了模型的本质，也能帮助理解模型的变换，甚至可以实现 <code>three.js</code> 不提供的更复杂的功能。</p><p>刚开始使用 <code>three.js</code> 时，three.js<code>就像一个黑盒一样，输入一个</code>obj` 文件，输出一个渲染好的模型，这中间发生了什么一直不清楚，遇到问题也不知道怎么解决，甚至于定位问题都做不到，不过后来慢慢摸索，总算是理解了一部分，材质那部分到现在还不是很理解，需要再花些时间去探索。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Three.js&lt;/code&gt; 虽然内置了一些模型，但在实际业务中往往需要导入外部模型，导入的模型可以视为自定义模型。&lt;/p&gt;
&lt;p&gt;首先要知道的是模型本质上来说是「三维坐标的集合」，最简单的一个模型可以用三个坐标和连接这三个坐标的「面」来表示。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="THREE" scheme="http://yoursite.com/categories/THREE/"/>
    
    
      <category term="three.js" scheme="http://yoursite.com/tags/three-js/"/>
    
      <category term="obj" scheme="http://yoursite.com/tags/obj/"/>
    
      <category term="mtl" scheme="http://yoursite.com/tags/mtl/"/>
    
  </entry>
  
  <entry>
    <title>怎么简单地在 canvas 中完成旋转</title>
    <link href="http://yoursite.com/2019/12/04/easy-rotate-in-canvas/"/>
    <id>http://yoursite.com/2019/12/04/easy-rotate-in-canvas/</id>
    <published>2019-12-04T00:00:00.000Z</published>
    <updated>2019-12-04T15:47:19.762Z</updated>
    
    <content type="html"><![CDATA[<p>手上接到一个需求，将多种图片经过放大、旋转后绘制在一张 <code>canvas</code> 上，放大都还好理解，但旋转真的是废头发。</p><a id="more"></a><p>举个最简单的例子吧，现在有 8x4 的图片，需要将图片旋转 90° 后放在左上角</p><p><img src="/blog/2019/12/04/easy-rotate-in-canvas/image-20191203222637361.png" alt="image-20191203222637361"></p><p>怎么实现呢？这样吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将画布旋转 90°</span></span><br><span class="line">ctx.rotate(<span class="number">90</span>);</span><br><span class="line"><span class="comment">// 在 0, 0 绘制图片</span></span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p><code>canvas</code> 没有提供「旋转图片」的方法，只能旋转画布，结果实际上变成了这样</p><p><img src="/blog/2019/12/04/easy-rotate-in-canvas/image-20191203223228300.png" alt="image-20191203223228300"></p><p><code>ctx</code> 与 <code>canvas</code> 可以看作两个东西，一个是画布(ctx)，另一个是桌子(canvas)。我们是在画布上绘制图形，但是画布最终要放到桌子上，平展开来才能看清楚。</p><p><img src="/blog/2019/12/04/easy-rotate-in-canvas/image-20191203222213334.png" alt="image-20191203222213334"></p><p>这就导致了我们如果想实现旋转，需要通过计算才能得出「实际的」x 和 y 值。<br>比如上面旋转 90° 的例子，在画布旋转 90° 后，默认位于 0, 0，然后 x 轴不变，往「上」移动 4px，</p><p><img src="/blog/2019/12/04/easy-rotate-in-canvas/image-2019-12-04_23-46-02.png" alt="image-20191203222213339"></p><p>所以最终代码是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ctx.rotate(<span class="number">90</span>);</span><br><span class="line"><span class="comment">// 4 是图片的高度</span></span><br><span class="line">ctx.drawImage(img, <span class="number">0</span>, <span class="number">-4</span>);</span><br></pre></td></tr></table></figure><p>90° 可以通过「直接看」计算出位置，但是其他角度呢？</p><p>为什么没有一个简单的旋转方法呢？</p><h2 id="easy-rotate-in-canvas"><a href="#easy-rotate-in-canvas" class="headerlink" title="easy-rotate-in-canvas"></a>easy-rotate-in-canvas</h2><p>为了解决这个头疼的问题，我们可以把计算封装好，暴露友好的操作接口。还是上面旋转 90° 的例子，可以写成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx.drawImage(img, &#123;</span><br><span class="line">    x: <span class="number">4</span>,</span><br><span class="line">    y: <span class="number">0</span>,</span><br><span class="line">    rotate: <span class="number">90</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者更语义化的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.drawImage(img).move(<span class="number">4</span>, <span class="number">0</span>).rotate(<span class="number">90</span>);</span><br></pre></td></tr></table></figure><p>或者更多，都是可以实现的，尽量将操作简化。不过目前只实现了第一种方式。</p><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add easy-rotate-in-canvas</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> enhance <span class="keyword">from</span> <span class="string">'easy-rotate-in-canvas'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = enhance(canvas.getContext(<span class="string">'2d'</span>));</span><br><span class="line"></span><br><span class="line">ctx.drawImage(img, &#123;</span><br><span class="line">    <span class="comment">// options</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>或者直接引用 <code>&lt;script src=&quot;https://unpkg.com/easy-rotate-in-canvas@1.0.2&quot;&gt;&lt;/script&gt;</code>，<code>enhance</code> 方法会挂载到全局，直接使用即可。</p><p>更多内容可以访问</p><ul><li><a href="https://github.com/ltaoo/easy-rotate-in-canvas" target="_blank" rel="noopener">easy-rotate-in-canvas</a></li><li><a href="https://ltaoo.github.io/easy-rotate-in-canvas/" target="_blank" rel="noopener">online example</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;手上接到一个需求，将多种图片经过放大、旋转后绘制在一张 &lt;code&gt;canvas&lt;/code&gt; 上，放大都还好理解，但旋转真的是废头发。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="canvas" scheme="http://yoursite.com/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>babel-preset-es2015 详解</title>
    <link href="http://yoursite.com/2019/07/11/babel-preset-es2015/"/>
    <id>http://yoursite.com/2019/07/11/babel-preset-es2015/</id>
    <published>2019-07-11T00:00:00.000Z</published>
    <updated>2020-02-08T13:00:38.532Z</updated>
    
    <content type="html"><![CDATA[<p><code>babel-preset-es2015</code> 是能将 <code>es2015</code> 新特性转换成 <code>es3</code> 的  <code>babel plugin</code> 的集合，这些集合到底包含了哪些插件呢，这篇博客会一一列出。</p><a id="more"></a><p>通过源码，可以直接看到引入了哪些插件，共计 24 个</p><ol><li>babel-plugin-transform-es2015-template-literals</li><li>babel-plugin-transform-es2015-literals</li><li>babel-plugin-transform-es2015-function-name</li><li>babel-plugin-transform-es2015-arrow-functions</li><li>babel-plugin-transform-es2015-block-scoped-functions</li><li>babel-plugin-transform-es2015-classes</li><li>babel-plugin-transform-es2015-object-super</li><li>babel-plugin-transform-es2015-shorthand-properties</li><li>babel-plugin-transform-es2015-duplicate-keys</li><li>babel-plugin-transform-es2015-computed-properties</li><li>babel-plugin-transform-es2015-for-of</li><li>babel-plugin-transform-es2015-sticky-regex</li><li>babel-plugin-transform-es2015-unicode-regex</li><li>babel-plugin-check-es2015-constants</li><li>babel-plugin-transform-es2015-spread</li><li>babel-plugin-transform-es2015-parameters</li><li>babel-plugin-transform-es2015-destructuring</li><li>babel-plugin-transform-es2015-block-scoping</li><li>babel-plugin-transform-es2015-typeof-symbol</li><li>babel-plugin-transform-es2015-modules-commonjs</li><li>babel-plugin-transform-es2015-modules-systemjs</li><li>babel-plugin-transform-es2015-modules-amd</li><li>babel-plugin-transform-es2015-modules-umd</li><li>babel-plugin-transform-regenerator</li></ol><p>这是 <code>babel-preset-es2015@6.24.1</code> 版本所引入的源码，如果使用 <code>babel@7.x</code>，这些插件也还是存在，但名字去掉了 <code>es2015</code>。下面以我认为的重要程度一一了解</p><h2 id="babel-plugin-transform-arrow-functions"><a href="#babel-plugin-transform-arrow-functions" class="headerlink" title="babel-plugin-transform-arrow-functions"></a>babel-plugin-transform-arrow-functions</h2><p>箭头函数转换，不是单纯将箭头语法做了转换，还会处理 <code>this</code> 值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">    name: <span class="string">'ltaoo'</span>,</span><br><span class="line">    say: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">    hello() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _this = <span class="keyword">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">  name: <span class="string">'ltaoo'</span>,</span><br><span class="line">  say: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(_this.name);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  hello() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'hello'</span> + <span class="keyword">this</span>.name);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>箭头函数内部的 <code>this</code> 值会被替换，保证了 <code>this</code> 指向不改变。</p><p>如果有人问，箭头函数使用 <code>.call</code> 会改变 <code>this</code> 指向吗？答案是不会。</p><h2 id="babel-plugin-transform-block-scoping"><a href="#babel-plugin-transform-block-scoping" class="headerlink" title="babel-plugin-transform-block-scoping"></a>babel-plugin-transform-block-scoping</h2><p>使用 <code>{}</code> 可以形成块级作用域，块级作用域的目的是为了不影响外部作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">'foo'</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="string">'scope foo'</span>;</span><br><span class="line">    <span class="keyword">const</span> bar = <span class="string">'bar'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>块级作用域外部 <code>foo</code> 仍然是 <code>foo</code>，内部 <code>foo</code> 变成了 <code>_foo</code> ，保证了不发生覆盖。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'foo'</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> _foo = <span class="string">'scope foo'</span>;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">'bar'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后的代码似乎有问题，<code>bar</code> 仍然可以在外部访问到。这是因为外部作用域没有使用到 <code>bar</code>，如果代码是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = <span class="string">'foo'</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> foo = <span class="string">'scope foo'</span>;</span><br><span class="line">    <span class="keyword">const</span> bar = <span class="string">'bar'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br></pre></td></tr></table></figure><p>结果就和预期一致了，块级作用域内部的 <code>bar</code> 变量也被转换为 <code>_bar</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">'foo'</span>;</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> _foo = <span class="string">'scope foo'</span>;</span><br><span class="line">  <span class="keyword">var</span> _bar = <span class="string">'bar'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(bar);</span><br></pre></td></tr></table></figure><p>并且该插件还用于 <code>const</code>、<code>let</code> 关键字转化为 <code>var</code>，但在 <code>babel@6.x</code> 时，需要配合 <code>check-es2015-constants</code> 插件才能正确处理 <code>const</code> 关键字重新声明。而在 <code>babel@7.x</code> 就不需要 <code>check-es2015-constants</code> 插件了。</p><p>但两者还是有一些区别，<code>babel@6.x</code> 会<strong>在编译时报错</strong>，而 <code>babel@7.x</code> 并不会报错，而是编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_readOnlyError</span>(<span class="params">name</span>) </span>&#123; <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"\""</span> + name + <span class="string">"\" is read-only"</span>); &#125;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'a'</span>;</span><br><span class="line">foo = (_readOnlyError(<span class="string">"foo"</span>), <span class="string">'b'</span>)</span><br></pre></td></tr></table></figure><p>运行时才会报错。</p><h2 id="babel-plugin-transform-spread"><a href="#babel-plugin-transform-spread" class="headerlink" title="babel-plugin-transform-spread"></a>babel-plugin-transform-spread</h2><p>展开运算符，但在 <code>es2015</code> 规范中，只能用于展开数组，对象的展开还处于草案阶段，需要使用 <code>babel-plugin-transform-object-rest-spread</code> 插件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组展开</span></span><br><span class="line"><span class="keyword">const</span> foo = [...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="comment">// 数组收集</span></span><br><span class="line"><span class="keyword">const</span> [a, ...rest] = foo;</span><br><span class="line"><span class="comment">// 对象展开</span></span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">    ...&#123;</span><br><span class="line">        a: <span class="string">'a'</span>,</span><br><span class="line">        b: <span class="string">'b'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象收集</span></span><br><span class="line"><span class="keyword">const</span> &#123; b, ...restProps &#125; = bar;</span><br></pre></td></tr></table></figure><p>这里有四个语法，但只有数组展开能被该插件处理，编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数组展开</span></span><br><span class="line"><span class="keyword">const</span> foo = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].concat();</span><br><span class="line"><span class="comment">// 数组收集</span></span><br><span class="line"><span class="keyword">const</span> [a, ...rest] = foo;</span><br><span class="line"><span class="comment">// 对象展开</span></span><br><span class="line"><span class="keyword">const</span> bar = &#123; ...&#123;</span><br><span class="line">    a: <span class="string">'a'</span>,</span><br><span class="line">    b: <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象收集</span></span><br><span class="line"><span class="keyword">const</span> &#123;</span><br><span class="line">  b,</span><br><span class="line">  ...restProps</span><br><span class="line">&#125; = bar;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-destructuring"><a href="#babel-plugin-transform-destructuring" class="headerlink" title="babel-plugin-transform-destructuring"></a>babel-plugin-transform-destructuring</h2><p>解构语法支持，日常开发中最常用的语法，同样是上面的例子，能够正确处理数组收集和对象收集。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_objectWithoutProperties</span>(<span class="params">source, excluded</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> target = _objectWithoutPropertiesLoose(source, excluded);</span><br><span class="line">    <span class="keyword">var</span> key, i;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">Object</span>.getOwnPropertySymbols) &#123;</span><br><span class="line">        <span class="keyword">var</span> sourceSymbolKeys = <span class="built_in">Object</span>.getOwnPropertySymbols(source);</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sourceSymbolKeys.length; i++) &#123;</span><br><span class="line">            key = sourceSymbolKeys[i];</span><br><span class="line">            <span class="keyword">if</span> (excluded.indexOf(key) &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">Object</span>.prototype.propertyIsEnumerable.call(source, key)) <span class="keyword">continue</span>;</span><br><span class="line">            target[key] = source[key];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_objectWithoutPropertiesLoose</span>(<span class="params">source, excluded</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (source == <span class="literal">null</span>) <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> sourceKeys = <span class="built_in">Object</span>.keys(source);</span><br><span class="line">    <span class="keyword">var</span> key, i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; sourceKeys.length; i++) &#123;</span><br><span class="line">        key = sourceKeys[i];</span><br><span class="line">        <span class="keyword">if</span> (excluded.indexOf(key) &gt;= <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        target[key] = source[key];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组展开</span></span><br><span class="line"><span class="keyword">const</span> foo = [...[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]];</span><br><span class="line"><span class="comment">// 数组收集(解构)</span></span><br><span class="line"><span class="keyword">const</span> a = foo[<span class="number">0</span>], rest = foo.slice(<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 对象展开</span></span><br><span class="line"><span class="keyword">const</span> bar = &#123; ...&#123;</span><br><span class="line">    a: <span class="string">'a'</span>,</span><br><span class="line">    b: <span class="string">'b'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 对象收集(解构)</span></span><br><span class="line"><span class="keyword">const</span> b = bar.b, restProps = _objectWithoutProperties(bar, [<span class="string">"b"</span>]);</span><br></pre></td></tr></table></figure><p>但是对象展开语法需要 <code>@babel/plugin-proposal-object-rest-spread</code> 支持。</p><blockquote><p>还有个 @babel/plugin-syntax-object-rest-spread 插件，名字看起来差不多，但该插件无法处理对象展开。查看源码发现 proposal-object-rest-spread 引用了 syntax-object-rest-spread。</p></blockquote><h2 id="babel-plugin-transform-computed-properties"><a href="#babel-plugin-transform-computed-properties" class="headerlink" title="babel-plugin-transform-computed-properties"></a>babel-plugin-transform-computed-properties</h2><p>对象属性支持变量</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">const</span> bar = &#123;</span><br><span class="line">    [foo]: <span class="string">'b'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_defineProperty</span>(<span class="params">obj, key, value</span>) </span>&#123; <span class="keyword">if</span> (key <span class="keyword">in</span> obj) &#123; <span class="built_in">Object</span>.defineProperty(obj, key, &#123; <span class="attr">value</span>: value, <span class="attr">enumerable</span>: <span class="literal">true</span>, <span class="attr">configurable</span>: <span class="literal">true</span>, <span class="attr">writable</span>: <span class="literal">true</span> &#125;); &#125; <span class="keyword">else</span> &#123; obj[key] = value; &#125; <span class="keyword">return</span> obj; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bar = _defineProperty(&#123;&#125;, foo, <span class="string">'b'</span>);</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-shorthand-properties"><a href="#babel-plugin-transform-shorthand-properties" class="headerlink" title="babel-plugin-transform-shorthand-properties"></a>babel-plugin-transform-shorthand-properties</h2><p>对象属性简写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">name,</span><br><span class="line">foo() &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'Hello'</span>;</span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">name: name,</span><br><span class="line">foo: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-classes"><a href="#babel-plugin-transform-classes" class="headerlink" title="babel-plugin-transform-classes"></a>babel-plugin-transform-classes</h2><p>类语法，更简单的方式写继承</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"><span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line"><span class="keyword">this</span>.name = <span class="string">'Hello World'</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_possibleConstructorReturn</span>(<span class="params">self, call</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!self) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">ReferenceError</span>(<span class="string">"this hasn't been initialised - super() hasn't been called"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> call &amp;&amp; (<span class="keyword">typeof</span> call === <span class="string">"object"</span> || <span class="keyword">typeof</span> call === <span class="string">"function"</span>) ? call : self;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_inherits</span>(<span class="params">subClass, superClass</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> superClass !== <span class="string">"function"</span> &amp;&amp; superClass !== <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Super expression must either be null or a function, not "</span> + <span class="keyword">typeof</span> superClass);</span><br><span class="line">&#125;</span><br><span class="line">subClass.prototype = <span class="built_in">Object</span>.create(superClass &amp;&amp; superClass.prototype, &#123;</span><br><span class="line"><span class="keyword">constructor</span>: &#123;</span><br><span class="line">value: subClass,</span><br><span class="line">enumerable: <span class="literal">false</span>,</span><br><span class="line">writable: <span class="literal">true</span>,</span><br><span class="line">configurable: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br><span class="line">&#125;); </span><br><span class="line"><span class="keyword">if</span> (superClass) &#123;</span><br><span class="line"><span class="built_in">Object</span>.setPrototypeOf ? <span class="built_in">Object</span>.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_classCallCheck</span>(<span class="params">instance, Constructor</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!(instance <span class="keyword">instanceof</span> Constructor)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Cannot call a class as a function"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Animal = <span class="function"><span class="keyword">function</span> <span class="title">Animal</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">_classCallCheck(<span class="keyword">this</span>, Animal);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> Cat = <span class="function"><span class="keyword">function</span> (<span class="params">_Animal</span>) </span>&#123;</span><br><span class="line">_inherits(Cat, _Animal);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Cat</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">_classCallCheck(<span class="keyword">this</span>, Cat);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _this = _possibleConstructorReturn(<span class="keyword">this</span>, (Cat.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(Cat)).call(<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line">_this.name = <span class="string">'Hello World'</span>;</span><br><span class="line"><span class="keyword">return</span> _this;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> Cat;</span><br><span class="line">&#125;(Animal);</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-parameters"><a href="#babel-plugin-transform-parameters" class="headerlink" title="babel-plugin-transform-parameters"></a>babel-plugin-transform-parameters</h2><p>函数参数支持默认值、收集运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a, b = <span class="string">'b'</span>, &#123; c &#125;, ...rest</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c, rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="string">'b'</span>;</span><br><span class="line">  <span class="keyword">let</span> &#123; <span class="comment">// 这里还是解构语法</span></span><br><span class="line">    c</span><br><span class="line">  &#125; = <span class="built_in">arguments</span>.length &gt; <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">2</span>] : <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, rest = <span class="keyword">new</span> <span class="built_in">Array</span>(_len &gt; <span class="number">3</span> ? _len - <span class="number">3</span> : <span class="number">0</span>), _key = <span class="number">3</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    rest[_key - <span class="number">3</span>] = <span class="built_in">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c, rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现，只有结构语法不被转换，加上 <code>@babel/plugin-transform-destructuring</code> 插件后，编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> b = <span class="built_in">arguments</span>.length &gt; <span class="number">1</span> &amp;&amp; <span class="built_in">arguments</span>[<span class="number">1</span>] !== <span class="literal">undefined</span> ? <span class="built_in">arguments</span>[<span class="number">1</span>] : <span class="string">'b'</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> _ref = <span class="built_in">arguments</span>.length &gt; <span class="number">2</span> ? <span class="built_in">arguments</span>[<span class="number">2</span>] : <span class="literal">undefined</span>,</span><br><span class="line">      c = _ref.c; <span class="comment">// 能够处理解构</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> _len = <span class="built_in">arguments</span>.length, rest = <span class="keyword">new</span> <span class="built_in">Array</span>(_len &gt; <span class="number">3</span> ? _len - <span class="number">3</span> : <span class="number">0</span>), _key = <span class="number">3</span>; _key &lt; _len; _key++) &#123;</span><br><span class="line">    rest[_key - <span class="number">3</span>] = <span class="built_in">arguments</span>[_key];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(a, b, c, rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-template-literals"><a href="#babel-plugin-transform-template-literals" class="headerlink" title="babel-plugin-transform-template-literals"></a>babel-plugin-transform-template-literals</h2><p>模板字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">`Hello <span class="subst">$&#123;foo&#125;</span>`</span>;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">`</span></span><br><span class="line"><span class="string">Hello World;</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">'world'</span>;</span><br><span class="line"><span class="keyword">const</span> bar = <span class="string">'Hello '</span> + foo;</span><br><span class="line"><span class="keyword">const</span> str = <span class="string">'\n\tHello World;\n'</span></span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-modules-xxx"><a href="#babel-plugin-transform-modules-xxx" class="headerlink" title="babel-plugin-transform-modules-xxx"></a>babel-plugin-transform-modules-xxx</h2><p>将 <code>export default</code> 这种语法(怎么称呼？标准模块机制？)转换为其他模块化代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> foo <span class="keyword">from</span> <span class="string">'./foo'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h3 id="amd"><a href="#amd" class="headerlink" title="amd"></a>amd</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">define([<span class="string">'exports'</span>, <span class="string">'./foo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">exports, _foo</span>) </span>&#123;</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> _foo2 = _interopRequireDefault(_foo);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123;</span><br><span class="line"><span class="keyword">default</span>: obj</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    exports.default = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="umd"><a href="#umd" class="headerlink" title="umd"></a>umd</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">global, factory</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> define === <span class="string">"function"</span> &amp;&amp; define.amd) &#123;</span><br><span class="line">define([<span class="string">'exports'</span>, <span class="string">'./foo'</span>], factory);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> exports !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">factory(exports, <span class="built_in">require</span>(<span class="string">'./foo'</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> mod = &#123;</span><br><span class="line">exports: &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line">factory(mod.exports, global.foo);</span><br><span class="line">global.test = mod.exports;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">exports, _foo</span>) </span>&#123;</span><br><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _foo2 = _interopRequireDefault(_foo);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123;</span><br><span class="line"><span class="keyword">default</span>: obj</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">    exports.default = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="commonjs"><a href="#commonjs" class="headerlink" title="commonjs"></a>commonjs</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(exports, <span class="string">"__esModule"</span>, &#123;</span><br><span class="line">value: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _foo = <span class="built_in">require</span>(<span class="string">'./foo'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _foo2 = _interopRequireDefault(_foo);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_interopRequireDefault</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> obj &amp;&amp; obj.__esModule ? obj : &#123; <span class="attr">default</span>: obj &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">exports.default = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="systemjs"><a href="#systemjs" class="headerlink" title="systemjs"></a>systemjs</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">System.register([<span class="string">'./foo'</span>], <span class="function"><span class="keyword">function</span> (<span class="params">_export, _context</span>) </span>&#123;</span><br><span class="line"><span class="meta">"use strict"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">setters: [<span class="function"><span class="keyword">function</span> (<span class="params">_foo</span>) </span>&#123;</span><br><span class="line">foo = _foo.default;</span><br><span class="line">&#125;],</span><br><span class="line">        execute: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            _export(<span class="string">'default'</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-regenerator"><a href="#babel-plugin-transform-regenerator" class="headerlink" title="babel-plugin-transform-regenerator"></a>babel-plugin-transform-regenerator</h2><p>支持 <code>generator</code> 语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _marked = <span class="comment">/*#__PURE__*/</span>regeneratorRuntime.mark(foo);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> regeneratorRuntime.wrap(<span class="function"><span class="keyword">function</span> <span class="title">foo$</span>(<span class="params">_context</span>) </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) <span class="keyword">switch</span> (_context.prev = _context.next) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">_context.next = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">case</span> <span class="string">'end'</span>:</span><br><span class="line"><span class="keyword">return</span> _context.stop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;, _marked, <span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-for-of"><a href="#babel-plugin-transform-for-of" class="headerlink" title="babel-plugin-transform-for-of"></a>babel-plugin-transform-for-of</h2><p>这里开始是一些比较少用的语法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">a: <span class="string">'a'</span>,</span><br><span class="line">b: <span class="string">'b'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> obj) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">a: <span class="string">'a'</span>,</span><br><span class="line">b: <span class="string">'b'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> _iteratorNormalCompletion = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> _didIteratorError = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">var</span> _iteratorError = <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> _iterator = obj[<span class="built_in">Symbol</span>.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> key = _step.value;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">_didIteratorError = <span class="literal">true</span>;</span><br><span class="line">_iteratorError = err;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!_iteratorNormalCompletion &amp;&amp; _iterator.return) &#123;</span><br><span class="line">_iterator.return();</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (_didIteratorError) &#123;</span><br><span class="line"><span class="keyword">throw</span> _iteratorError;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-object-super"><a href="#babel-plugin-transform-object-super" class="headerlink" title="babel-plugin-transform-object-super"></a>babel-plugin-transform-object-super</h2><p>支持调用超类</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">say() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.say() + <span class="string">'World'</span>;</span><br><span class="line">&#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _get = <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">object, property, receiver</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (object === <span class="literal">null</span>) &#123;</span><br><span class="line">object = <span class="built_in">Function</span>.prototype;</span><br><span class="line"><span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(object, property);</span><br><span class="line"><span class="keyword">if</span> (desc === <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> parent = <span class="built_in">Object</span>.getPrototypeOf(object);</span><br><span class="line"><span class="keyword">if</span> (parent === <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> get(parent, property, receiver);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"value"</span> <span class="keyword">in</span> desc) &#123;</span><br><span class="line"><span class="keyword">return</span> desc.value;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">var</span> getter = desc.get;</span><br><span class="line"><span class="keyword">if</span> (getter === <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getter.call(receiver); </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> foo = _obj = &#123;</span><br><span class="line">  say() &#123;</span><br><span class="line">    <span class="keyword">return</span> _get(_obj.__proto__ || <span class="built_in">Object</span>.getPrototypeOf(_obj), <span class="string">'say'</span>, <span class="keyword">this</span>).call(<span class="keyword">this</span>) + <span class="string">'World'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-duplicate-keys"><a href="#babel-plugin-transform-duplicate-keys" class="headerlink" title="babel-plugin-transform-duplicate-keys"></a>babel-plugin-transform-duplicate-keys</h2><p>支持写重复的键，忘记了在旧版本中如果对象有重复的键会怎么样了，但使用 <code>eslint</code> 的情况下，有重复键会报错的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">a: <span class="string">'a'</span>,</span><br><span class="line">a: <span class="string">'b'</span>,</span><br><span class="line">a: <span class="string">'c'</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">a: <span class="string">'a'</span>,</span><br><span class="line">[<span class="string">'a'</span>]: <span class="string">'b'</span>,</span><br><span class="line">[<span class="string">'a'</span>]: <span class="string">'c'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p> <code>obj.a === &#39;c&#39;</code> ，支持重复的 <code>key</code> 有什么意义呢？</p><h2 id="babel-plugin-transform-sticky-regex"><a href="#babel-plugin-transform-sticky-regex" class="headerlink" title="babel-plugin-transform-sticky-regex"></a>babel-plugin-transform-sticky-regex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = <span class="regexp">/foo/y</span>;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regexp = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"foo"</span>, <span class="string">"y"</span>);</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-unicode-regex"><a href="#babel-plugin-transform-unicode-regex" class="headerlink" title="babel-plugin-transform-unicode-regex"></a>babel-plugin-transform-unicode-regex</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">"foo💩bar"</span>;</span><br><span class="line"><span class="keyword">const</span> match = string.match(<span class="regexp">/foo(.)bar/u</span>);</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> string = <span class="string">"foo💩bar"</span>;</span><br><span class="line"><span class="keyword">const</span> match = string.match(<span class="regexp">/foo((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]))bar/</span>);</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-typeof-symbol"><a href="#babel-plugin-transform-typeof-symbol" class="headerlink" title="babel-plugin-transform-typeof-symbol"></a>babel-plugin-transform-typeof-symbol</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>() === <span class="string">'symbol'</span>;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _typeof = <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span></span><br><span class="line">&amp;&amp; (</span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Symbol</span>.iterator === <span class="string">"symbol"</span></span><br><span class="line">? <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">typeof</span> obj; &#125;</span><br><span class="line">: <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> obj</span><br><span class="line">&amp;&amp; <span class="keyword">typeof</span> <span class="built_in">Symbol</span> === <span class="string">"function"</span></span><br><span class="line">&amp;&amp; obj.constructor === <span class="built_in">Symbol</span></span><br><span class="line">&amp;&amp; (</span><br><span class="line">obj !== <span class="built_in">Symbol</span>.prototype</span><br><span class="line">? <span class="string">"symbol"</span></span><br><span class="line">: <span class="keyword">typeof</span> obj</span><br><span class="line">);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line">_typeof(<span class="built_in">Symbol</span>()) === <span class="string">'symbol'</span>;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-literals"><a href="#babel-plugin-transform-literals" class="headerlink" title="babel-plugin-transform-literals"></a>babel-plugin-transform-literals</h2><p>编码转换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> u = <span class="string">'Hello\u&#123;000A&#125;\u&#123;0009&#125;!'</span>;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> u = <span class="string">'Hello\n\t!'</span>;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-block-scoped-functions"><a href="#babel-plugin-transform-block-scoped-functions" class="headerlink" title="babel-plugin-transform-block-scoped-functions"></a>babel-plugin-transform-block-scoped-functions</h2><p>从名字来看，是块级作用域函数，是指什么呢？</p><p>是让块级作用域内声明的函数只作用域块级作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">name</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">name(<span class="string">"Steve"</span>);</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> name = <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">name(<span class="string">"Steve"</span>);</span><br></pre></td></tr></table></figure><p>感觉和 <code>block-scoping</code> 有点类似，块级作用域内的变量不被外部使用？如果不用 <code>block-scoped-functions</code> 而仅用 <code>block-scoping</code> 会怎么样呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_name</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">name(<span class="string">"Steve"</span>);</span><br></pre></td></tr></table></figure><p><code>_name</code> 函数对外部作用域还是可知的，有一些区别。</p><h2 id="babel-plugin-transform-function-name"><a href="#babel-plugin-transform-function-name" class="headerlink" title="babel-plugin-transform-function-name"></a>babel-plugin-transform-function-name</h2><p>再是一些不算新特性的插件吧，比如这个给匿名函数增加函数名</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>编译成</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可以发现，真正有用的插件大概有 10 个，但每次都会安装全部的，即使使用 <code>@babel/preset-env</code>，它也仅仅是根据浏览器可以去掉一些插件，但如果我们能根据项目中实际使用的语法，只配置 <code>plugin</code>，才是最精简的方式。</p><p>但首先要求对项目中所使用的语法，以及新特性对应的插件非常了解，才能做到有的放矢。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;babel-preset-es2015&lt;/code&gt; 是能将 &lt;code&gt;es2015&lt;/code&gt; 新特性转换成 &lt;code&gt;es3&lt;/code&gt; 的  &lt;code&gt;babel plugin&lt;/code&gt; 的集合，这些集合到底包含了哪些插件呢，这篇博客会一一列出。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="babel" scheme="http://yoursite.com/tags/babel/"/>
    
  </entry>
  
  <entry>
    <title>antd 自定义表单的问题 - 2</title>
    <link href="http://yoursite.com/2018/10/23/antd%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E7%9A%84%E9%97%AE%E9%A2%98-2/"/>
    <id>http://yoursite.com/2018/10/23/antd自定义表单的问题-2/</id>
    <published>2018-10-23T00:00:00.000Z</published>
    <updated>2018-10-23T10:45:56.650Z</updated>
    
    <content type="html"><![CDATA[<a href="/blog/2018/10/22/antd自定义表单的问题-1/" title="antd 自定义表单的问题 - 1">antd 自定义表单的问题 - 1</a><hr><p>前面提到，「基本信息」包含姓名、出生年月、性别、城市以及邮箱共 5 个输入项。而其中性别、省市与邮箱封装为了单独的组件，因为这类组件<strong>包含特有的数据或者逻辑</strong>。</p><ul><li>性别选择，因为有性别对应的 value。当然也可以将性别数据作为常量引入。</li><li>省市选择，包含了省市信息。</li><li>邮箱，有补全邮箱后缀等逻辑。</li></ul><p><code>antd</code>官网中「自定义表单组件」就是一个有「特有逻辑」的组件，它同时包含两个字段。</p><a id="more"></a><h2 id="一、自定义表单标准代码分析"><a href="#一、自定义表单标准代码分析" class="headerlink" title="一、自定义表单标准代码分析"></a>一、自定义表单标准代码分析</h2><p>以省市选择为例来说明如何封装一个自定义表单组件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file 中国省市选择，代码来源 https://gist.github.com/afc163/7582f35654fd03d5be7009444345ea17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Cascader &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"><span class="keyword">import</span> provinces <span class="keyword">from</span> <span class="string">'china-division/dist/provinces.json'</span>;</span><br><span class="line"><span class="keyword">import</span> cities <span class="keyword">from</span> <span class="string">'china-division/dist/cities.json'</span>;</span><br><span class="line"><span class="keyword">import</span> areas <span class="keyword">from</span> <span class="string">'china-division/dist/areas.json'</span>;</span><br><span class="line"></span><br><span class="line">areas.forEach(<span class="function"><span class="params">area</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> matchCity = cities.filter(<span class="function"><span class="params">city</span> =&gt;</span> city.code === area.cityCode)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (matchCity) &#123;</span><br><span class="line">    matchCity.children = matchCity.children || [];</span><br><span class="line">    matchCity.children.push(&#123;</span><br><span class="line">      label: area.name,</span><br><span class="line">      value: area.code</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cities.forEach(<span class="function"><span class="params">city</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> matchProvince = provinces.filter(</span><br><span class="line">    province =&gt; province.code === city.provinceCode</span><br><span class="line">  )[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (matchProvince) &#123;</span><br><span class="line">    matchProvince.children = matchProvince.children || [];</span><br><span class="line">    matchProvince.children.push(&#123;</span><br><span class="line">      label: city.name,</span><br><span class="line">      value: city.code,</span><br><span class="line">      children: city.children</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = provinces.map(<span class="function"><span class="params">province</span> =&gt;</span> (&#123;</span><br><span class="line">  label: province.name,</span><br><span class="line">  value: province.code,</span><br><span class="line">  children: province.children</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">CitySelect</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">'value'</span> <span class="keyword">in</span> nextProps) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(nextProps.value);</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        value: nextProps.value,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  handleChange = <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onChange &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      value,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">if</span> (onChange) &#123;</span><br><span class="line">      onChange(value);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;Cascader</span><br><span class="line">        value=&#123;value&#125;</span><br><span class="line">        options=&#123;options&#125;</span><br><span class="line">        showSearch</span><br><span class="line">        placeholder=<span class="string">"请选择地址"</span></span><br><span class="line">        onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">      /&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1、代码说明"><a href="#1、代码说明" class="headerlink" title="1、代码说明"></a>1、代码说明</h3><p>这段代码属于标准的「antd 自定义表单」，既可作为普通表单使用，也可配合<code>antd</code>中的<code>Form</code>组件使用。<br>可以看到有<code>constructor</code>、<code>componentWillReceiveProps</code>和<code>handleChange</code>，这三个方法都有各自的作用。<br>首先，<code>handleChange</code>方法响应表单值的改变，并调用<code>props.onChange</code>方法，实现了向父组件通信，将数据传递给父组件。</p><p><code>constructor</code>是为了配合<code>initialValue</code>，当配置了<code>initialValue</code>时，在<code>constructor</code>中可以从<code>props.value</code>上获取到对应值。</p><p>而<code>componentWillReceiveProps</code>是为了配合<code>resetFields</code>以及<code>setFields</code>方法，能够从父组件直接控制表单的值，以及<code>initialValue</code>如果会发生改变，比如从接口中获取值，也是通过这里实现赋值的。</p><h3 id="2、通过组合得到的自定义表单组件"><a href="#2、通过组合得到的自定义表单组件" class="headerlink" title="2、通过组合得到的自定义表单组件"></a>2、通过组合得到的自定义表单组件</h3><p>性别选择和邮箱输入组件同理，所以我们的<code>BasicInfoForm</code>代码应该如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @file 基本信息表单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Form,</span><br><span class="line">  Input,</span><br><span class="line">  DatePicker,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> SexSelect <span class="keyword">from</span> <span class="string">'../SexSelect'</span>;</span><br><span class="line"><span class="keyword">import</span> CitySelect <span class="keyword">from</span> <span class="string">'../CitySelect'</span>;</span><br><span class="line"><span class="keyword">import</span> EmailInput <span class="keyword">from</span> <span class="string">'../EmailInput'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfoForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"basic__content"</span>&gt;</span><br><span class="line">        &lt;Form.Item label=<span class="string">"姓名"</span>&gt;</span><br><span class="line">          &lt;Input placeholder=<span class="string">"请输入姓名"</span> /&gt;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Form.Item label="出生年月"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;DatePicker placeholder="请选择出生年月" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Form.Item label="性别"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;SexSelect style=&#123;&#123; width: '100%' &#125;&#125; placeholder="请选择性别" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Form.Item label="所在城市"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;CitySelect /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">        &lt;Form.Item label="邮箱"&gt;</span></span><br><span class="line"><span class="regexp">          &lt;EmailInput placeholder="请输入邮箱" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然实现了 UI，但这并不是一个「表单组件」，如果希望该组件是一个「自定义表单组件」，应该和上面的省市选择一样，实现<code>constructor</code>、<code>componentWillReceiveProps</code>和<code>handleChange</code>方法，前两个好说，问题就在于<code>handleChange</code>方法，由于存在 5 个表单，所以需要每个表单发生改变时，都调用<code>props.onChange</code>，那就需要有</p><ul><li>handleNameChange</li><li>handleBirthdayChange</li><li>handleSexChange</li><li>handleCityChange</li><li>handleEmailChange</li></ul><h3 id="3、onValueChange-简化获取多个表单值"><a href="#3、onValueChange-简化获取多个表单值" class="headerlink" title="3、onValueChange 简化获取多个表单值"></a>3、onValueChange 简化获取多个表单值</h3><p>幸好借助<code>antd</code>的<code>Form</code>组件可以简化这部分代码，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">@Form.create(&#123;</span><br><span class="line">  <span class="comment">// 当表单值发生改变时都会调用该方法</span></span><br><span class="line">  onValuesChange(props, changed, values) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; onChange &#125; = props;</span><br><span class="line">    <span class="keyword">if</span> (onChange) &#123;</span><br><span class="line">      onChange(&#123;</span><br><span class="line">        ...values,</span><br><span class="line">        ...changed,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfoForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"basic__content"</span>&gt;</span><br><span class="line">        &lt;Form.Item label=<span class="string">"姓名"</span>&gt;</span><br><span class="line">          &#123;getFieldDecorator(<span class="string">'name'</span>)(<span class="xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line">        &lt;Form.Item label="出生年月"&gt;</span><br><span class="line">          &#123;getFieldDecorator('birthday')(</span><br><span class="line">            &lt;DatePicker placeholder="请选择出生年月" /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="性别"&gt;</span><br><span class="line">          &#123;getFieldDecorator('sex')(</span><br><span class="line">            &lt;SexSelect style=&#123;&#123; width: '100%' &#125;&#125; placeholder="请选择性别" /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="所在城市"&gt;</span><br><span class="line">          &#123;getFieldDecorator('city')(</span><br><span class="line">            &lt;CitySelect /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="邮箱"&gt;</span><br><span class="line">          &#123;getFieldDecorator('email')(</span><br><span class="line">            &lt;EmailInput placeholder="请输入邮箱" /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将组件替换掉我们页面组件中「基本信息」相关的代码，这是线上示例「 <a href="https://codesandbox.io/s/m9o5lznjlp" target="_blank" rel="noopener">封装基本信息表单</a>」。</p><p>这里是我们实际输入后能够获取到的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"basic"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"ltaoo"</span>,</span><br><span class="line">    <span class="string">"birthday"</span>: <span class="string">"2018-10-01T03:33:44.541Z"</span>,</span><br><span class="line">    <span class="string">"sex"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"city"</span>: [</span><br><span class="line">      <span class="string">"33"</span>,</span><br><span class="line">      <span class="string">"3301"</span>,</span><br><span class="line">      <span class="string">"330105"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"litaowork@aliyun.com"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"work"</span>: [</span><br><span class="line">    <span class="string">"深圳联友科技"</span>,</span><br><span class="line">    <span class="string">"杭州群核科技"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"projects"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"title"</span>: <span class="string">"BD System"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"company"</span>: <span class="string">"杭州群核科技"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、组合组件后带来的问题"><a href="#4、组合组件后带来的问题" class="headerlink" title="4、组合组件后带来的问题"></a>4、组合组件后带来的问题</h3><p>OK，能满足我们<strong>获取值</strong>的需求，但存在两个问题</p><ul><li>1、丢失了校验规则</li><li>2、获取到的是<code>basic</code>字段，我们需要的是<code>basic</code>字段的<strong>值</strong>。</li></ul><h2 id="二、恢复丢失的校验规则"><a href="#二、恢复丢失的校验规则" class="headerlink" title="二、恢复丢失的校验规则"></a>二、恢复丢失的校验规则</h2><p>如果有实际试用过该代码的人可能会有疑问，输入邮箱时会对输入内容进行校验啊，为什么说「丢失了校验规则」呢？<br>实际上<strong>即使邮箱格式不正确并且有错误提示</strong>，但点击「保存」后还是可以<strong>获取表单值</strong>，而开始的例子是不能的，并且会将页面滚动到邮箱输入处。</p><p>最直观的感受是什么都不填，直接点击「保存」按钮，<a href="https://codesandbox.io/s/xl8v6olw0o" target="_blank" rel="noopener">最开始的实现</a> 是可以正确校验的，而 <a href="https://codesandbox.io/s/m9o5lznjlp" target="_blank" rel="noopener">拆分为自定义表单组件</a> 后，点击按钮会通过校验，直接打印出当前的表单值。</p><h3 id="1、自定义校验规则"><a href="#1、自定义校验规则" class="headerlink" title="1、自定义校验规则"></a>1、自定义校验规则</h3><p>参考<code>antd</code>中的自定义表单，如果需要对自定义表单进行校验，需要通过自定义<code>validator</code>实现，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Icon, Form, Card, Button, Select, Input &#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> BasicInfoForm <span class="keyword">from</span> <span class="string">'../components/BasicInfoForm'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkBasicInfo</span>(<span class="params">rule, values, callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(rule, values);</span><br><span class="line">  <span class="keyword">if</span> (!values) &#123;</span><br><span class="line">    callback(<span class="string">'请输入基本信息'</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> emailRegexp = <span class="regexp">/[\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+(?:\.[\w!#$%&amp;'*+/=?^_`&#123;|&#125;~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/</span>;</span><br><span class="line">  <span class="keyword">if</span> (emailRegexp.exec(values.email)) &#123;</span><br><span class="line">    callback();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  callback(<span class="string">'请检查邮箱格式'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Form.create()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator, getFieldValue &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="comment">// 省略部分代码</span></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">        &lt;Card</span><br><span class="line">          title=<span class="string">"基本信息"</span></span><br><span class="line">          style=&#123;&#123; <span class="attr">marginBottom</span>: <span class="number">10</span> &#125;&#125;</span><br><span class="line">          className=<span class="string">"resume__basic"</span></span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className=<span class="string">"basic__content"</span>&gt;</span><br><span class="line">            &#123;getFieldDecorator(<span class="string">'basic'</span>, &#123;</span><br><span class="line">              rules: [</span><br><span class="line">                &#123;</span><br><span class="line">                  validator: checkBasicInfo</span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">BasicInfoForm</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">        &lt;<span class="regexp">/Card&gt;</span></span><br><span class="line"><span class="regexp">        &#123;/</span>* 省略部分代码 *<span class="regexp">/&#125;</span></span><br><span class="line"><span class="regexp">        &lt;Button type="primary" onClick=&#123;this.save&#125;&gt;</span></span><br><span class="line"><span class="regexp">          保存</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>直接点击「保存」按钮后，发现虽然没有直接打印表单值，但页面上也没有显示错误信息，只有控制台显示<code>async-validator: [&quot;请输入基本信息&quot;]</code>，这说明校验规则的确生效了。<br>这是因为<strong>错误提示是由<code>Form.Item</code>显示的</strong>，必须将<code>BasicInfoForm</code>放在<code>Form.Item</code>组件内才会显示我们在<code>callback</code>传入的错误信息。</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15379691339723.jpg" alt="Form.Item 组件"></p><p>但是给<code>BasicInfoForm</code>包裹<code>Form.Item</code>后，虽然错误信息显示，但只会出现在最下方，无法实现在实际错误的表单下方显示，并且明显校验规则还需要我们再实现一次。<a href="https://codesandbox.io/s/88vvl45r92" target="_blank" rel="noopener">线上实例</a></p><blockquote><p>这也是一个<code>Form.Item</code>组件内无法同时存在两个及以上<code>getFieldDecorator</code>的原因。</p></blockquote><h3 id="2、更友好的错误展示"><a href="#2、更友好的错误展示" class="headerlink" title="2、更友好的错误展示"></a>2、更友好的错误展示</h3><p>这两个缺点都是非常不友好的，如果希望使用<code>Form.Item</code>提供的错误展示机制，正确地在表单下方展示，要怎么做呢？</p><p>想到最开始的实现代码，虽然不怎么优雅，但校验却实实在在有用，能否直接复用呢？所以问题就是，为什么这样封装一层，原先的校验规则就失效了呢？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">@Form.create(&#123;</span><br><span class="line">    <span class="comment">// 省略...</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfoForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"basic__content"</span>&gt;</span><br><span class="line">        &lt;Form.Item label=<span class="string">"姓名"</span>&gt;</span><br><span class="line">          &#123;getFieldDecorator(<span class="string">'name'</span>, &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: <span class="literal">true</span>,</span><br><span class="line">                message: <span class="string">'请输入姓名'</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line">        &lt;Form.Item label="出生年月"&gt;</span><br><span class="line">          &#123;getFieldDecorator('birthday', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请选择出生年月',</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;DatePicker placeholder="请选择出生年月" /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="性别"&gt;</span><br><span class="line">          &#123;getFieldDecorator('sex', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请选择性别',</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;SexSelect style=&#123;&#123; width: '100%' &#125;&#125; placeholder="请选择性别" /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="所在城市"&gt;</span><br><span class="line">          &#123;getFieldDecorator('city', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请选择所在城市',</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;CitySelect /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="邮箱"&gt;</span><br><span class="line">          &#123;getFieldDecorator('email', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请输入邮箱',</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                type: 'email',</span><br><span class="line">                message: '邮箱格式不正确',</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;EmailInput placeholder="请输入邮箱" /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、props-form-存储表单值"><a href="#3、props-form-存储表单值" class="headerlink" title="3、props.form 存储表单值"></a>3、props.form 存储表单值</h3><p>这是因为<code>props.form</code>的问题。<br><code>props.form</code>简单来说就是一个<code>store</code>，存储着所有经过<code>props.form.getFieldDecorator</code>包装后的表单组件的值与校验规则。通过调用<code>props.form.validateFieldsAndScroll</code>就可以对值进行校验了。</p><p>而我们的代码中，实际上存在多个<code>props.form</code>，<code>App</code>组件有一个，<code>BasicInfoForm</code>组件也有一个，各自为政，互不干扰。</p><p>所有如果想校验<code>BasicInfoForm</code>组件的表单，就必须用该组件内的<code>form.validateFieldsAndScroll</code>。</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15379701681393.jpg" alt="props.form"></p><p>第一反应是使用<code>ref</code>，但由于<code>BasicInfoForm</code>是被<code>getFieldDecorator</code>装饰后的组件，<code>props</code>上并没有我们期望的<code>form</code>属性。这时应该使用官方提供的<code>wrappedComponentRef</code>替代。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">this.basicInfoForm.props.form.validateFieldsAndScroll((err, values) =&gt; &#123;</span><br><span class="line">    if (err) &#123;</span><br><span class="line">        return;</span><br><span class="line">    &#125;</span><br><span class="line">    // ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>又因为还有<code>workExpForm</code>和<code>projectExpForm</code>，所以就要再获取这两个表单的值，再组合起来。</p><h3 id="4、自定义表单组件带来更多问题？"><a href="#4、自定义表单组件带来更多问题？" class="headerlink" title="4、自定义表单组件带来更多问题？"></a>4、自定义表单组件带来更多问题？</h3><p>看到这，就会有疑问了，拆分后带来了一大堆的问题。难道不应该对组件进行拆分吗？<br>如果只将一些简单的组件作为自定义表单组件，比如<code>CitySelect</code>，其他的保持原样是不是更简单些？。<br>这也不失为一种方法，所以是否应该拆分，就是仁者见仁智者见智了。</p><p>但是就上面的问题而言，有一种解决办法，就是<strong>只有一个<code>props.form</code></strong>，即只在<code>App</code>组件使用<code>Form.create</code>包装，其他组件都通过<code>props</code>传递<code>form</code>。所以代码会变成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; getFieldDecorator &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">      &lt;ResumeForm form=&#123;<span class="keyword">this</span>.props.form&#125; /&gt;</span><br><span class="line">      &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.save&#125;&gt;保存&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;Button onClick=&#123;this.reset&#125;&gt;重置&lt;/</span>Button&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  );</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>这样做，就仅仅是「将代码拆分」，而不是「封装自定义表单组件」了。但这种做法带来的好处也是明显的，上面提到的第二个问题也同时解决了。</p><h2 id="三、多余的字段"><a href="#三、多余的字段" class="headerlink" title="三、多余的字段"></a>三、多余的字段</h2><p>再来详细谈谈第二个问题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"basic"</span>: &#123;</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"ltaoo"</span>,</span><br><span class="line">    <span class="string">"birthday"</span>: <span class="string">"2018-10-01T03:33:44.541Z"</span>,</span><br><span class="line">    <span class="string">"sex"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">"city"</span>: [</span><br><span class="line">      <span class="string">"33"</span>,</span><br><span class="line">      <span class="string">"3301"</span>,</span><br><span class="line">      <span class="string">"330105"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"email"</span>: <span class="string">"litaowork@aliyun.com"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"work"</span>: [</span><br><span class="line">    <span class="string">"深圳联友科技"</span>,</span><br><span class="line">    <span class="string">"杭州群核科技"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"projects"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"title"</span>: <span class="string">"BD System"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"company"</span>: <span class="string">"杭州群核科技"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装组件后，获取到的是这样的数据，而我们实际需要的是</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"ltaoo"</span>,</span><br><span class="line">  <span class="string">"birthday"</span>: <span class="string">"2018-10-01T03:33:44.541Z"</span>,</span><br><span class="line">  <span class="string">"sex"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="string">"city"</span>: [</span><br><span class="line">    <span class="string">"33"</span>,</span><br><span class="line">    <span class="string">"3301"</span>,</span><br><span class="line">    <span class="string">"330105"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"email"</span>: <span class="string">"litaowork@aliyun.com"</span></span><br><span class="line">  <span class="string">"work"</span>: [</span><br><span class="line">    <span class="string">"深圳联友科技"</span>,</span><br><span class="line">    <span class="string">"杭州群核科技"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"projects"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"title"</span>: <span class="string">"BD System"</span>,</span><br><span class="line">      <span class="string">"type"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="string">"company"</span>: <span class="string">"杭州群核科技"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后提交前处理一下就好了嘛，就这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.basicInfoForm.props);</span><br><span class="line">  <span class="keyword">this</span>.basicInfoForm.props.form.validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(&#123;</span><br><span class="line">      ...body.basic,</span><br><span class="line">      work: body.work,</span><br><span class="line">      projects: body.projects</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然解决了这个问题，但我们需要<strong>在所有用到<code>ResumeForm</code>组件的地方处理数据</strong>，这很明显不够优雅。能否做到获取到的<code>values</code>就是我们期望的<strong>最终数据</strong>呢？</p><p>从我们的使用经验来说，获取到的数据是和<code>getFieldDecorator</code>强相关的，<code>key</code>是参数，<code>value</code>是表单的值。所以应该从<code>getFieldDecorator</code>入手。</p><h3 id="1、表单值转换"><a href="#1、表单值转换" class="headerlink" title="1、表单值转换"></a>1、表单值转换</h3><p>还有一个类似的问题，当组件使用到「日期输入」时，往往需要将表单的值转换为时间戳，这也是重复工作，能否表单暴露的值就是时间戳呢？</p><p>如果上面的<code>city</code>数据，我们只需要最后一位，这个问题似乎是一样的。但这个问题可以使用<code>normalize</code>解决，该方法是用来「转换默认的 value」给控件。</p><p>就是可以将表单的值做处理，但要求处理后的值也是控件能够接受的。默认我们选择城市后得到<code>[&quot;33&quot;, &quot;3301&quot;, &quot;330105&quot;]</code>，可以将其转换为<code>[&quot;330105]</code>，但不能变成<code>&quot;330105&quot;</code>，所以无法处理<code>moment</code>变成时间戳。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;Form.Item label=<span class="string">"所在城市"</span>&gt;</span><br><span class="line">  &#123;getFieldDecorator(<span class="string">'city'</span>, &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        required: <span class="literal">true</span>,</span><br><span class="line">        message: <span class="string">'请选择所在城市'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    normalize: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(value);</span><br><span class="line">      <span class="keyword">return</span> value ? [value[value.length - <span class="number">1</span>]] : value;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">CitySelect</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="四、默认值"><a href="#四、默认值" class="headerlink" title="四、默认值"></a>四、默认值</h2><p>默认值也是表单组件一个非常重要的功能，无论是初始化默认值，减少用户填写成本；还是进入编辑状态时赋值，都要用到该功能。</p><h3 id="1、默认值通过接口得到不会生效"><a href="#1、默认值通过接口得到不会生效" class="headerlink" title="1、默认值通过接口得到不会生效"></a>1、默认值通过接口得到不会生效</h3><p><code>antd</code>的表单组件，都提供了<code>defaultValue</code>属性，用以配置默认值：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123; <span class="attr">name</span>: <span class="literal">undefined</span> &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name: e.target.value,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; value &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Input</span><br><span class="line">                defaultValue=<span class="string">"wuya"</span></span><br><span class="line">                value=&#123;value&#125;</span><br><span class="line">                onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>渲染后可以看到内表单有<code>wuya</code>默认值。但如果默认值是从接口请求得到的，就无法达到我们的预期效果。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123; </span><br><span class="line">        defaultValue: </span><br><span class="line">        name: <span class="literal">undefined</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        <span class="comment">// 模拟请求接口</span></span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">                defaultValue: <span class="string">'wuya'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            name: e.target.value,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; defaultValue, value &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Input</span><br><span class="line">                defaultValue=&#123;defaultVlaue&#125;</span><br><span class="line">                value=&#123;value&#125;</span><br><span class="line">                onChange=&#123;<span class="keyword">this</span>.handleChange&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而如果改成<code>initialValue</code>就能够生效。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Form.create()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    defaultValue: <span class="literal">undefined</span></span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        defaultValue: <span class="string">'ltaoo'</span></span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator, getFieldValue &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="keyword">const</span> &#123; defaultValue &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">        &#123;getFieldDecorator(<span class="string">'name'</span>, &#123;</span><br><span class="line">          initialValue: defaultValue</span><br><span class="line">        &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">Input</span> /&gt;</span>)&#125;</span></span><br><span class="line">        &lt;Button type="primary" onClick=&#123;this.save&#125;&gt;</span><br><span class="line">          保存</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、自定义表单实现-initialValue-默认值"><a href="#2、自定义表单实现-initialValue-默认值" class="headerlink" title="2、自定义表单实现 initialValue 默认值"></a>2、自定义表单实现 initialValue 默认值</h3><p>前面我们自己实现了<code>CitySelect</code>，它支持默认值吗？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">@Form.create()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    defaultValue: <span class="literal">undefined</span></span><br><span class="line">  &#125;;</span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">        defaultValue: [<span class="string">'33'</span>, <span class="string">'3301'</span>, <span class="string">'330105'</span>]</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">3000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator, getFieldValue &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="keyword">const</span> &#123; defaultValue &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">        &#123;getFieldDecorator(<span class="string">'city'</span>, &#123;</span><br><span class="line">          initialValue: defaultValue</span><br><span class="line">        &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">CitySelect</span> /&gt;</span>)&#125;</span></span><br><span class="line">        &lt;Button type="primary" onClick=&#123;this.save&#125;&gt;</span><br><span class="line">          保存</span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>幸运的是支持。因为当<code>initialValue</code>发生改变时，会调用<code>CitySelect</code>的<code>componentWillReceiveProps</code>，并将<code>initialValue</code>作为<code>props.value</code>传入，实现了默认值的效果。</p><h3 id="3、支持-defaultValue-默认值"><a href="#3、支持-defaultValue-默认值" class="headerlink" title="3、支持 defaultValue 默认值"></a>3、支持 defaultValue 默认值</h3><p>那<code>CitySelect</code>支持<code>defaultValue</code>默认值吗？很明显不支持对吧，因为回头看我们的<code>CitySelect</code>组件代码，完全没有出现过<code>defaultValue</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">@Form.create()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    defaultValue: [<span class="string">'33'</span>, <span class="string">'3301'</span>, <span class="string">'330105'</span>]</span><br><span class="line">  &#125;;</span><br><span class="line">  save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator, getFieldValue &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="keyword">const</span> &#123; defaultValue &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">        &lt;CitySelect defaultValue=&#123;defaultValue&#125; /&gt;</span><br><span class="line">        &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.save&#125;&gt;</span><br><span class="line">          保存</span><br><span class="line">        &lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">      &lt;/</span>div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即使是直接给初始值也不行，更别说通过接口获取默认值了。那么接下来在不影响原有功能的基础上，添加<code>defaultValue</code>的支持。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// CitySelect.js</span></span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; defaultValue, value = defaultValue &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      value</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;a href=&quot;/blog/2018/10/22/antd自定义表单的问题-1/&quot; title=&quot;antd 自定义表单的问题 - 1&quot;&gt;antd 自定义表单的问题 - 1&lt;/a&gt;
&lt;hr&gt;

&lt;p&gt;前面提到，「基本信息」包含姓名、出生年月、性别、城市以及邮箱共 5 个输入项。而其中性别、省市与邮箱封装为了单独的组件，因为这类组件&lt;strong&gt;包含特有的数据或者逻辑&lt;/strong&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性别选择，因为有性别对应的 value。当然也可以将性别数据作为常量引入。&lt;/li&gt;
&lt;li&gt;省市选择，包含了省市信息。&lt;/li&gt;
&lt;li&gt;邮箱，有补全邮箱后缀等逻辑。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;antd&lt;/code&gt;官网中「自定义表单组件」就是一个有「特有逻辑」的组件，它同时包含两个字段。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="antd" scheme="http://yoursite.com/tags/antd/"/>
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>python 按顺序合并 ts 文件</title>
    <link href="http://yoursite.com/2018/10/22/python%20%E6%8C%89%E9%A1%BA%E5%BA%8F%E5%90%88%E5%B9%B6%20ts%20%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/22/python 按顺序合并 ts 文件/</id>
    <published>2018-10-22T00:00:00.000Z</published>
    <updated>2018-10-22T07:55:47.352Z</updated>
    
    <content type="html"><![CDATA[<p>cctalk 缓存视频后，实际缓存的是视频切片并加密的 ts 文件，将视频片段解密后，需要解决的问题就是如何合并视频片段。</p><a id="more"></a><p>每个 ts 文件都会包含时间信息，通过<code>ffmpeg</code>可以查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i 0a7599cc995bdc2b4d0ff70b443f76f2.ts</span><br></pre></td></tr></table></figure><p>对应的输出：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg version 4.0.2 Copyright (c) 2000-2018 the FFmpeg developers</span><br><span class="line">  built with Apple LLVM version 9.1.0 (clang-902.0.39.2)</span><br><span class="line">  configuration: --prefix=/usr/<span class="built_in">local</span>/Cellar/ffmpeg/4.0.2 --<span class="built_in">enable</span>-shared --<span class="built_in">enable</span>-pthreads --<span class="built_in">enable</span>-version3 --<span class="built_in">enable</span>-hardcoded-tables --<span class="built_in">enable</span>-avresample --cc=clang --host-cflags= --host-ldflags= --<span class="built_in">enable</span>-gpl --<span class="built_in">enable</span>-libmp3lame --<span class="built_in">enable</span>-libx264 --<span class="built_in">enable</span>-libxvid --<span class="built_in">enable</span>-opencl --<span class="built_in">enable</span>-videotoolbox --<span class="built_in">disable</span>-lzma</span><br><span class="line">  libavutil      56. 14.100 / 56. 14.100</span><br><span class="line">  libavcodec     58. 18.100 / 58. 18.100</span><br><span class="line">  libavformat    58. 12.100 / 58. 12.100</span><br><span class="line">  libavdevice    58.  3.100 / 58.  3.100</span><br><span class="line">  libavfilter     7. 16.100 /  7. 16.100</span><br><span class="line">  libavresample   4.  0.  0 /  4.  0.  0</span><br><span class="line">  libswscale      5.  1.100 /  5.  1.100</span><br><span class="line">  libswresample   3.  1.100 /  3.  1.100</span><br><span class="line">  libpostproc    55.  1.100 / 55.  1.100</span><br><span class="line">Input <span class="comment">#0, mpegts, from '0a7599cc995bdc2b4d0ff70b443f76f2.ts':</span></span><br><span class="line">  Duration: 00:00:09.67, start: 7583.773333, bitrate: 562 kb/s</span><br><span class="line">  Program 1</span><br><span class="line">    Stream <span class="comment">#0:0[0x100]: Video: h264 (High) ([27][0][0][0] / 0x001B), yuv420p(progressive), 1920x1080 [SAR 1:1 DAR 16:9], 25 fps, 25 tbr, 90k tbn, 50 tbc</span></span><br><span class="line">    Stream <span class="comment">#0:1[0x101](eng): Audio: aac (LC) ([15][0][0][0] / 0x000F), 48000 Hz, stereo, fltp, 145 kb/s</span></span><br></pre></td></tr></table></figure><p>内容非常多，我们只需要关心倒数第四行，<code>Duration: 00:00:09.67, start: 7583.773333, bitrate: 562 kb/s</code>，其中的<code>start</code>就是该视频的开始时间了。</p><blockquote><p>只有视频能正确输出这个时间的才能排序。</p></blockquote><p>所以我们的问题就变成了从终端获取信息，并且给视频设置有顺序的文件名。</p><h2 id="读取终端输出"><a href="#读取终端输出" class="headerlink" title="读取终端输出"></a>读取终端输出</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_timestamp</span><span class="params">(video_path)</span>:</span></span><br><span class="line">    command = <span class="string">'ffmpeg -i '</span> + video_path</span><br><span class="line">    result = subprocess.Popen(command, shell=<span class="keyword">True</span>, stdin=subprocess.PIPE, stderr=subprocess.STDOUT, stdout=subprocess.PIPE, close_fds=<span class="keyword">True</span>)</span><br><span class="line">    <span class="comment"># out 就是终端的输出</span></span><br><span class="line">    out, err = result.communicate()</span><br><span class="line"></span><br><span class="line">    re_result = re.search(<span class="string">'start: ([0-9]+)'</span>, out)</span><br><span class="line">    print(<span class="string">'regexp result is '</span>, re_result)</span><br><span class="line">    timestamp = re_result.group(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timestamp</span><br></pre></td></tr></table></figure><h2 id="获取正确顺序的文件名"><a href="#获取正确顺序的文件名" class="headerlink" title="获取正确顺序的文件名"></a>获取正确顺序的文件名</h2><p>我们最终是使用<code>cat *.ts &gt; index.ts</code>来完成合并的，该命令会单纯按照文件的排序来合并，所以需要有正确的顺序。</p><p>这里的做法是根据视频的开始时间，直接将时间作为文件名。如有一个视频片段开始时间是 58:00，那么这个文件文件名就应该是 005800。从这里也能看出视频长度最好不超过 60 小时，因为超过 60 小时后文件名长度不一样，排序就会出现问题。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seconds_to_str</span><span class="params">(seconds)</span>:</span></span><br><span class="line">    time = str(datetime.timedelta(seconds=seconds))</span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> time.split(<span class="string">':'</span>):</span><br><span class="line">        res.append(prefix(i, num = <span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="string">''</span>.join(res)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prefix</span><span class="params">(value, num = <span class="number">6</span>)</span>:</span></span><br><span class="line">  index_list = list(str(value))</span><br><span class="line">  <span class="keyword">if</span> num &gt; len(index_list):</span><br><span class="line">    res = (num - len(index_list)) * <span class="string">'0'</span> + str(value)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  <span class="keyword">return</span> value</span><br></pre></td></tr></table></figure><h2 id="更新文件名并合并"><a href="#更新文件名并合并" class="headerlink" title="更新文件名并合并"></a>更新文件名并合并</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_videos</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="comment"># 原始视频文件夹</span></span><br><span class="line">    videos_path = <span class="string">'output'</span></span><br><span class="line">    <span class="comment"># 排序后视频文件夹</span></span><br><span class="line">    output_path = <span class="string">'sorted'</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(os.path.join(path, videos_path)):</span><br><span class="line">        <span class="keyword">if</span> file == <span class="string">'.DS_Store'</span>:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># output dir</span></span><br><span class="line">        sorted_dir = os.path.join(path, output_path)</span><br><span class="line">        <span class="comment"># 确保文件夹必然存在</span></span><br><span class="line">        prepare_dir([sorted_dir])</span><br><span class="line">        file_path = os.path.join(path, videos_path, file)</span><br><span class="line">        print(<span class="string">'prepare process file is '</span> + file_path)</span><br><span class="line">        timestamp = extract_timestamp(file_path)</span><br><span class="line">        file_name = seconds_to_str(int(timestamp)) + <span class="string">'.ts'</span></span><br><span class="line">        new_file_path = os.path.join(sorted_dir, file_name)</span><br><span class="line">        print(<span class="string">'new file is '</span> + new_file_path)</span><br><span class="line">        <span class="comment"># 从视频原始文件夹「拷贝并重命名」到排序后视频文件夹中</span></span><br><span class="line">        shutil.copyfile(file_path, new_file_path)</span><br><span class="line"></span><br><span class="line">    print(<span class="string">'sort videos finish'</span>)</span><br><span class="line">    concat_command = <span class="string">'cat '</span> + os.path.join(sorted_dir, <span class="string">'*.ts'</span>) + <span class="string">' &gt; '</span> + os.path.join(path, <span class="string">'index.ts'</span>)</span><br><span class="line">    print(concat_command)</span><br><span class="line">    os.popen(concat_command)</span><br><span class="line">    <span class="comment"># 删除排序后视频文件夹</span></span><br><span class="line">    shutil.rmtree(sorted_dir)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prepare_dir</span><span class="params">(dirs)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> dir <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(dir):</span><br><span class="line">            os.mkdir(dir)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;cctalk 缓存视频后，实际缓存的是视频切片并加密的 ts 文件，将视频片段解密后，需要解决的问题就是如何合并视频片段。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="ts video" scheme="http://yoursite.com/tags/ts-video/"/>
    
  </entry>
  
  <entry>
    <title>更新 macOS Mojave 后 vim 打不开</title>
    <link href="http://yoursite.com/2018/10/22/%E6%9B%B4%E6%96%B0%20macOS%20Mojave%20%E5%90%8E%20vim%20%E6%89%93%E4%B8%8D%E5%BC%80/"/>
    <id>http://yoursite.com/2018/10/22/更新 macOS Mojave 后 vim 打不开/</id>
    <published>2018-10-22T00:00:00.000Z</published>
    <updated>2018-10-22T07:55:25.011Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vim: Caught deadly signal SEGV</span><br><span class="line">Error detected <span class="keyword">while</span> processing <span class="keyword">function</span> youcompleteme<span class="comment">#Enable[5]..&lt;SNR&gt;31_SetUpPython:Vim: Finished.</span></span><br><span class="line"></span><br><span class="line">line   39:</span><br><span class="line">Exception MemoryError: MemoryError() <span class="keyword">in</span> &lt;module <span class="string">'threading'</span> from <span class="string">'/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.pyc'</span>&gt; ignored</span><br></pre></td></tr></table></figure><p>使用<code>vim</code>时报错，从报错信息中可以看出是<code>youcompleteme</code>相关的东西有问题，其实就是<code>Valloric/YouCompleteMe</code>这个插件有问题。<br>幸运的是这个问题也有人遇到，并且有人给出了各自的解决方案。</p><a id="more"></a><h2 id="0、禁用插件"><a href="#0、禁用插件" class="headerlink" title="0、禁用插件"></a>0、禁用插件</h2><p>将<code>~/.vimrc</code>中取消该插件即可。<br>但如果还是想要使用该插件，要怎么解决呢？</p><h2 id="1、重新安装"><a href="#1、重新安装" class="headerlink" title="1、重新安装"></a>1、重新安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall vim &amp;&amp; brew install vim</span><br></pre></td></tr></table></figure><p>不幸运的是这种方式对我无效。</p><h2 id="2、指定正确的-python-路径"><a href="#2、指定正确的-python-路径" class="headerlink" title="2、指定正确的 python 路径"></a>2、指定正确的 python 路径</h2><p>有人提出这个问题的核心在于 vim 使用了一个错误的 python 路径，所以只需要告诉 vim 正确的 python 路径就可以了。</p><p>通过<code>where python</code>可以得到正确的<code>python</code>路径，然后修改<code>~/.vimrc</code>，在最后面加上</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:ycm_path_to_python_interpreter</span>=<span class="string">"/usr/bin/python"</span></span><br></pre></td></tr></table></figure><p><code>/usr/bin/python</code>是我的<code>python</code>路径。</p><p>但还是无效。</p><blockquote><p>最后面有人提到<code>ycm_path_to_python_interpreter</code>已经废弃，使用<code>ycm_server_python_interpreter</code>替代，但可惜还是不行。</p></blockquote><h2 id="3、更新-YouCompleteMe-插件"><a href="#3、更新-YouCompleteMe-插件" class="headerlink" title="3、更新 YouCompleteMe 插件"></a>3、更新 YouCompleteMe 插件</h2><p>由于插件是很久前安装的，所以想通过更新插件来尝试能否修复该问题。进入<code>~/.vim/bundle/YouCompleteMe</code>路径，通过<code>git pull</code>拉取最新代码即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br><span class="line">git submodule update --init --recursive</span><br></pre></td></tr></table></figure><p>如果没有第二行命令启动后会显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YouCompleteMe unavailable: cannot import name urljoin</span><br></pre></td></tr></table></figure><p>重新尝试启动<code>vim</code>，但打开后的一瞬间又关闭了，并且显示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vim: Caught deadly signal SEGV</span><br><span class="line">Error detected <span class="keyword">while</span> processing <span class="keyword">function</span> &lt;SNR&gt;45_PollServerReady[7]..&lt;SNR&gt;45_Pyeval:Vim: Finished.</span><br><span class="line"></span><br><span class="line">line    4:</span><br><span class="line">Exception MemoryError: MemoryError() <span class="keyword">in</span> &lt;module <span class="string">'threading'</span> from <span class="string">'/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.pyc'</span>&gt; ignored</span><br><span class="line">[1]    32074 segmentation fault  vi</span><br></pre></td></tr></table></figure><p>还好有人遇到同样的问题，通过如下命令重新安装<code>vim</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew uninstall vim</span><br><span class="line">brew install vim --with-lua --with-override-system-vi</span><br></pre></td></tr></table></figure><p><strong>完成后重新启动<code>shell</code></strong>，再次尝试启动<code>vim</code>，又有了不同的提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The ycmd server SHUT DOWN (restart with <span class="string">':YcmRestartServer'</span>). YCM core library too old; PLEASE RECOMPILE by running the install.py script. See the documentation <span class="keyword">for</span> more details.</span><br></pre></td></tr></table></figure><p>提示非常明确，通过运行<code>install.py</code>脚本来重新编译<code>YCM core library</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ~/.vim/bundle/YouCompleteMe</span></span><br><span class="line">python install.py</span><br></pre></td></tr></table></figure><p>这次是真的正常了。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>直接在命令行使用 vi 调用正常，但在通过其他软件调用时（如 git ci 会调用 vim）还是会出现和<br>开始完全相同的问题。</p><p><strong>在将 .vimrc 中 YouCompleteMe 注释、取消注释 后，神奇地正常了</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Valloric/YouCompleteMe/issues/1652" target="_blank" rel="noopener">Error on start: Error detected while processing function youcompleteme</a></li><li><a href="https://github.com/Valloric/YouCompleteMe/issues/2583" target="_blank" rel="noopener">YouCompleteMe fails because of an ImportError: cannot import name ‘urljoin’ </a></li><li><a href="https://github.com/Valloric/YouCompleteMe/issues/3165" target="_blank" rel="noopener">vim segment fault when i upgrade to macos mojave</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Vim: Caught deadly signal SEGV&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Error detected &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; processing &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; youcompleteme&lt;span class=&quot;comment&quot;&gt;#Enable[5]..&amp;lt;SNR&amp;gt;31_SetUpPython:Vim: Finished.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;line   39:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Exception MemoryError: MemoryError() &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &amp;lt;module &lt;span class=&quot;string&quot;&gt;&#39;threading&#39;&lt;/span&gt; from &lt;span class=&quot;string&quot;&gt;&#39;/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/threading.pyc&#39;&lt;/span&gt;&amp;gt; ignored&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用&lt;code&gt;vim&lt;/code&gt;时报错，从报错信息中可以看出是&lt;code&gt;youcompleteme&lt;/code&gt;相关的东西有问题，其实就是&lt;code&gt;Valloric/YouCompleteMe&lt;/code&gt;这个插件有问题。&lt;br&gt;幸运的是这个问题也有人遇到，并且有人给出了各自的解决方案。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="vim" scheme="http://yoursite.com/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>antd 自定义表单的问题 - 1</title>
    <link href="http://yoursite.com/2018/10/22/antd%E8%87%AA%E5%AE%9A%E4%B9%89%E8%A1%A8%E5%8D%95%E7%9A%84%E9%97%AE%E9%A2%98-1/"/>
    <id>http://yoursite.com/2018/10/22/antd自定义表单的问题-1/</id>
    <published>2018-10-22T00:00:00.000Z</published>
    <updated>2018-10-23T10:45:59.226Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 antd 的表单过程中，发现存在许多的问题。该博客会对我曾经遇到过的问题做一个总结，由于内容太多，所以预计会分成 3 篇。</p><p>这是该主题的第一篇，主要介绍「什么是自定义表单」。全文会以「简历表单」作为示例来进行说明。</p><a id="more"></a><h2 id="一、示例说明"><a href="#一、示例说明" class="headerlink" title="一、示例说明"></a>一、示例说明</h2><p>现在需要一个「简历」表单，支持填写个人信息、工作经历和项目经历。</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/xl8v6olw0o.codesandbox.io_.png" alt="简历表单截图"></p><h3 id="1、字段"><a href="#1、字段" class="headerlink" title="1、字段"></a>1、字段</h3><p>基本信息包含 7 个字段，需要提交的数据格式如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"ltaoo"</span>,</span><br><span class="line">  <span class="attr">"birthday"</span>: <span class="number">1538323200000</span>,</span><br><span class="line">  <span class="attr">"sex"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"city"</span>: [</span><br><span class="line">    <span class="string">"33"</span>,</span><br><span class="line">    <span class="string">"3301"</span>,</span><br><span class="line">    <span class="string">"330105"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"email"</span>: <span class="string">"litaowork@aliyun.com"</span>,</span><br><span class="line">  <span class="attr">"works"</span>: [</span><br><span class="line">    <span class="string">"深圳联友科技"</span>,</span><br><span class="line">    <span class="string">"杭州群核科技"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"projects"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"BD System"</span>,</span><br><span class="line">      <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">      <span class="attr">"company"</span>: <span class="string">"杭州群核科技"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、校验规则"><a href="#2、校验规则" class="headerlink" title="2、校验规则"></a>2、校验规则</h3><p>对于字段会有一些校验要求</p><ul><li>姓名必填</li><li>性别必填</li><li>城市必填</li><li>邮箱必填，并且符合邮箱格式</li><li>工作经历选填</li><li>项目经历选填，但如果增加了项目经历，项目名、项目类型必填</li></ul><h2 id="二、最简单的实现代码"><a href="#二、最简单的实现代码" class="headerlink" title="二、最简单的实现代码"></a>二、最简单的实现代码</h2><p>完成这么一个表单是非常简单的,300 行左右代码即可完成，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  Icon,</span><br><span class="line">  Form,</span><br><span class="line">  Card,</span><br><span class="line">  Button,</span><br><span class="line">  Cascader,</span><br><span class="line">  Select,</span><br><span class="line">  Input,</span><br><span class="line">  DatePicker</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'antd'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> provinces <span class="keyword">from</span> <span class="string">'china-division/dist/provinces.json'</span>;</span><br><span class="line"><span class="keyword">import</span> cities <span class="keyword">from</span> <span class="string">'china-division/dist/cities.json'</span>;</span><br><span class="line"><span class="keyword">import</span> areas <span class="keyword">from</span> <span class="string">'china-division/dist/areas.json'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Option &#125; = Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> formItemLayout = &#123;</span><br><span class="line">  labelCol: &#123;</span><br><span class="line">    xs: &#123; <span class="attr">span</span>: <span class="number">24</span> &#125;,</span><br><span class="line">    sm: &#123; <span class="attr">span</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  wrapperCol: &#123;</span><br><span class="line">    xs: &#123; <span class="attr">span</span>: <span class="number">24</span> &#125;,</span><br><span class="line">    sm: &#123; <span class="attr">span</span>: <span class="number">20</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> formItemLayoutWithOutLabel = &#123;</span><br><span class="line">  wrapperCol: &#123;</span><br><span class="line">    xs: &#123; <span class="attr">span</span>: <span class="number">24</span>, <span class="attr">offset</span>: <span class="number">0</span> &#125;,</span><br><span class="line">    sm: &#123; <span class="attr">span</span>: <span class="number">20</span>, <span class="attr">offset</span>: <span class="number">4</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 格式化城市数据</span></span><br><span class="line">areas.forEach(<span class="function"><span class="params">area</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> matchCity = cities.filter(<span class="function"><span class="params">city</span> =&gt;</span> city.code === area.cityCode)[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (matchCity) &#123;</span><br><span class="line">    matchCity.children = matchCity.children || [];</span><br><span class="line">    matchCity.children.push(&#123;</span><br><span class="line">      label: area.name,</span><br><span class="line">      value: area.code</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">cities.forEach(<span class="function"><span class="params">city</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> matchProvince = provinces.filter(</span><br><span class="line">    province =&gt; province.code === city.provinceCode</span><br><span class="line">  )[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">if</span> (matchProvince) &#123;</span><br><span class="line">    matchProvince.children = matchProvince.children || [];</span><br><span class="line">    matchProvince.children.push(&#123;</span><br><span class="line">      label: city.name,</span><br><span class="line">      value: city.code,</span><br><span class="line">      children: city.children</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> options = provinces.map(<span class="function"><span class="params">province</span> =&gt;</span> (&#123;</span><br><span class="line">  label: province.name,</span><br><span class="line">  value: province.code,</span><br><span class="line">  children: province.children</span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作经历与项目经历</span></span><br><span class="line"><span class="keyword">let</span> workUid = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> projectUid = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">@Form.create()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">const</span> body = <span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(body);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  reset = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; resetFields &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    resetFields();</span><br><span class="line">  &#125;;</span><br><span class="line">  removeWorkExp = <span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; form &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> keys = form.getFieldValue(<span class="string">'workKeys'</span>);</span><br><span class="line">    form.setFieldsValue(&#123;</span><br><span class="line">      workKeys: keys.filter(<span class="function"><span class="params">key</span> =&gt;</span> key !== k)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  addWorkExp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; form &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> keys = form.getFieldValue(<span class="string">'workKeys'</span>);</span><br><span class="line">    <span class="keyword">const</span> nextKeys = keys.concat(workUid);</span><br><span class="line">    workUid++;</span><br><span class="line">    form.setFieldsValue(&#123;</span><br><span class="line">      workKeys: nextKeys</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  removeProjectExp = <span class="function"><span class="params">k</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; form &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> keys = form.getFieldValue(<span class="string">'projectKeys'</span>);</span><br><span class="line">    form.setFieldsValue(&#123;</span><br><span class="line">      projectKeys: keys.filter(<span class="function"><span class="params">key</span> =&gt;</span> key !== k)</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  addProjectExp = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; form &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">const</span> keys = form.getFieldValue(<span class="string">'projectKeys'</span>);</span><br><span class="line">    <span class="keyword">const</span> nextKeys = keys.concat(projectUid);</span><br><span class="line">    projectUid++;</span><br><span class="line">    form.setFieldsValue(&#123;</span><br><span class="line">      projectKeys: nextKeys</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator, getFieldValue &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    getFieldDecorator(<span class="string">'workKeys'</span>, &#123; <span class="attr">initialValue</span>: [] &#125;);</span><br><span class="line">    getFieldDecorator(<span class="string">'projectKeys'</span>, &#123; <span class="attr">initialValue</span>: [] &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> workKeys = getFieldValue(<span class="string">'workKeys'</span>);</span><br><span class="line">    <span class="keyword">const</span> projectKeys = getFieldValue(<span class="string">'projectKeys'</span>);</span><br><span class="line">    <span class="keyword">const</span> workItems = workKeys.map(<span class="function">(<span class="params">k, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> (</span><br><span class="line">        &lt;Form.Item</span><br><span class="line">          &#123;...(index === <span class="number">0</span> ? formItemLayout : formItemLayoutWithOutLabel)&#125;</span><br><span class="line">          label=&#123;index === <span class="number">0</span> ? <span class="string">'公司名'</span> : <span class="string">''</span>&#125;</span><br><span class="line">          required=&#123;<span class="literal">false</span>&#125;</span><br><span class="line">          key=&#123;k&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;getFieldDecorator(<span class="string">`work[<span class="subst">$&#123;k&#125;</span>]`</span>, &#123;</span><br><span class="line">            validateTrigger: [<span class="string">'onChange'</span>, <span class="string">'onBlur'</span>],</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: <span class="literal">true</span>,</span><br><span class="line">                whitespace: <span class="literal">true</span>,</span><br><span class="line">                message: <span class="string">'请输入公司名'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(</span><br><span class="line">            &lt;Input</span><br><span class="line">              placeholder=<span class="string">"公司名"</span></span><br><span class="line">              style=&#123;&#123; <span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">marginRight</span>: <span class="number">8</span> &#125;&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          )&#125;</span><br><span class="line">          &#123;workKeys.length &gt; <span class="number">1</span> ? (</span><br><span class="line">            &lt;Icon</span><br><span class="line">              className=<span class="string">"dynamic-delete-button"</span></span><br><span class="line">              type=<span class="string">"minus-circle-o"</span></span><br><span class="line">              disabled=&#123;workKeys.length === <span class="number">1</span>&#125;</span><br><span class="line">              onClick=&#123;() =&gt; <span class="keyword">this</span>.removeWorkExp(k)&#125;</span><br><span class="line">            /&gt;</span><br><span class="line">          ) : <span class="literal">null</span>&#125;</span><br><span class="line">        &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">      );</span></span><br><span class="line"><span class="regexp">    &#125;);</span></span><br><span class="line"><span class="regexp">    const projectItems = projectKeys.map((k, index) =&gt; &#123;</span></span><br><span class="line"><span class="regexp">      return (</span></span><br><span class="line"><span class="regexp">        &lt;Card</span></span><br><span class="line"><span class="regexp">          key=&#123;k&#125;</span></span><br><span class="line"><span class="regexp">          extra=&#123;&lt;a onClick=&#123;() =&gt; this.removeProjectExp(k)&#125;&gt;删除&lt;/</span>a&gt;&#125;</span><br><span class="line">        &gt;</span><br><span class="line">          &lt;Form.Item &#123;...formItemLayout&#125; label=<span class="string">"项目名称"</span>&gt;</span><br><span class="line">            &#123;getFieldDecorator(<span class="string">`projects[<span class="subst">$&#123;k&#125;</span>].title`</span>, &#123;</span><br><span class="line">              validateTrigger: [<span class="string">'onChange'</span>, <span class="string">'onBlur'</span>],</span><br><span class="line">              rules: [</span><br><span class="line">                &#123;</span><br><span class="line">                  required: <span class="literal">true</span>,</span><br><span class="line">                  whitespace: <span class="literal">true</span>,</span><br><span class="line">                  message: <span class="string">'请输入项目名称'</span></span><br><span class="line">                &#125;</span><br><span class="line">              ]</span><br><span class="line">            &#125;)(</span><br><span class="line">              &lt;Input</span><br><span class="line">                placeholder=<span class="string">"项目名称"</span></span><br><span class="line">                style=&#123;&#123; <span class="attr">width</span>: <span class="string">'60%'</span>, <span class="attr">marginRight</span>: <span class="number">8</span> &#125;&#125;</span><br><span class="line">              /&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">          &lt;<span class="regexp">/Form.Item&gt;</span></span><br><span class="line"><span class="regexp">          &lt;Form.Item &#123;...formItemLayout&#125; label="项目类型"&gt;</span></span><br><span class="line"><span class="regexp">            &#123;getFieldDecorator(`projects[$&#123;k&#125;].type`, &#123;</span></span><br><span class="line"><span class="regexp">              validateTrigger: ['onChange', 'onBlur'],</span></span><br><span class="line"><span class="regexp">              rules: [</span></span><br><span class="line"><span class="regexp">                &#123;</span></span><br><span class="line"><span class="regexp">                  required: true,</span></span><br><span class="line"><span class="regexp">                  message: '请输入项目类型'</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">              ]</span></span><br><span class="line"><span class="regexp">            &#125;)(</span></span><br><span class="line"><span class="regexp">              &lt;Select</span></span><br><span class="line"><span class="regexp">                style=&#123;&#123; width: '100%' &#125;&#125;</span></span><br><span class="line"><span class="regexp">                placeholder="请选择项目类型（公司项目需要填写公司）"</span></span><br><span class="line"><span class="regexp">              &gt;</span></span><br><span class="line"><span class="regexp">                &lt;Option value=&#123;0&#125;&gt;个人项目&lt;/</span>Option&gt;</span><br><span class="line">                &lt;Option value=&#123;<span class="number">1</span>&#125;&gt;公司项目&lt;<span class="regexp">/Option&gt;</span></span><br><span class="line"><span class="regexp">              &lt;/</span>Select&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">            &#123;getFieldValue(<span class="string">`projects[<span class="subst">$&#123;k&#125;</span>].type`</span>) === <span class="number">1</span> &amp;&amp;</span><br><span class="line">              getFieldDecorator(<span class="string">`projects[<span class="subst">$&#123;k&#125;</span>].company`</span>, &#123;</span><br><span class="line">                validateTrigger: [<span class="string">'onChange'</span>, <span class="string">'onBlur'</span>],</span><br><span class="line">                rules: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    required: <span class="literal">true</span>,</span><br><span class="line">                    message: <span class="string">'请输入公司名称'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"请输入公司名称"</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">        &lt;Card</span><br><span class="line">          title=<span class="string">"基本信息"</span></span><br><span class="line">          style=&#123;&#123; <span class="attr">marginBottom</span>: <span class="number">10</span> &#125;&#125;</span><br><span class="line">          className=<span class="string">"resume__basic"</span></span><br><span class="line">        &gt;</span><br><span class="line">          &lt;div className=<span class="string">"basic__content"</span>&gt;</span><br><span class="line">            &lt;Form.Item label=<span class="string">"姓名"</span>&gt;</span><br><span class="line">              &#123;getFieldDecorator(<span class="string">'name'</span>, &#123;</span><br><span class="line">                rules: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    required: <span class="literal">true</span>,</span><br><span class="line">                    message: <span class="string">'请输入姓名'</span></span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    max: <span class="number">10</span>,</span><br><span class="line">                    message: <span class="string">'长度不能超过 10 个字符'</span></span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line">            &lt;Form.Item label="出生年月"&gt;</span><br><span class="line">              &#123;getFieldDecorator('birthday', &#123;</span><br><span class="line">                rules: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    message: '请选择出生年月'</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;)(&lt;DatePicker placeholder="请选择出生年月" /&gt;)&#125;</span><br><span class="line">            &lt;/Form.Item&gt;</span><br><span class="line">            &lt;Form.Item label="性别"&gt;</span><br><span class="line">              &#123;getFieldDecorator('sex', &#123;</span><br><span class="line">                rules: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    message: '请选择性别'</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;)(</span><br><span class="line">                &lt;Select style=&#123;&#123; width: '100%' &#125;&#125; placeholder="请选择性别"&gt;</span><br><span class="line">                  &lt;Option value=&#123;0&#125;&gt;男&lt;/Option&gt;</span><br><span class="line">                  &lt;Option value=&#123;1&#125;&gt;女&lt;/Option&gt;</span><br><span class="line">                &lt;/Select&gt;</span><br><span class="line">              )&#125;</span><br><span class="line">            &lt;/Form.Item&gt;</span><br><span class="line">            &lt;Form.Item label="所在城市"&gt;</span><br><span class="line">              &#123;getFieldDecorator('city', &#123;</span><br><span class="line">                rules: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    message: '请选择所在城市'</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;)(</span><br><span class="line">                &lt;Cascader</span><br><span class="line">                  options=&#123;options&#125;</span><br><span class="line">                  showSearch</span><br><span class="line">                  placeholder="请选择地址（支持搜索）"</span><br><span class="line">                  style=&#123;&#123; width: 400 &#125;&#125;</span><br><span class="line">                /&gt;</span><br><span class="line">              )&#125;</span><br><span class="line">            &lt;/Form.Item&gt;</span><br><span class="line">            &lt;Form.Item label="邮箱"&gt;</span><br><span class="line">              &#123;getFieldDecorator('email', &#123;</span><br><span class="line">                rules: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    required: true,</span><br><span class="line">                    message: '请输入邮箱'</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    type: 'email',</span><br><span class="line">                    message: '邮箱格式不正确'</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;)(&lt;Input placeholder="请输入邮箱" /&gt;)&#125;</span><br><span class="line">            &lt;/Form.Item&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line">        &lt;/Card&gt;</span><br><span class="line">        &lt;Card</span><br><span class="line">          title="工作经历"</span><br><span class="line">          style=&#123;&#123; marginBottom: 10 &#125;&#125;</span><br><span class="line">          className="resume__work"</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;workItems&#125;</span><br><span class="line">          &lt;Form.Item &#123;...formItemLayoutWithOutLabel&#125;&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">              type="dashed"</span><br><span class="line">              onClick=&#123;this.addWorkExp&#125;</span><br><span class="line">              style=&#123;&#123; width: '60%' &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;Icon type="plus" /&gt; 添加</span><br><span class="line">            &lt;/Button&gt;</span><br><span class="line">          &lt;/Form.Item&gt;</span><br><span class="line">        &lt;/Card&gt;</span><br><span class="line">        &lt;Card</span><br><span class="line">          title="项目经历"</span><br><span class="line">          style=&#123;&#123; marginBottom: 10 &#125;&#125;</span><br><span class="line">          className="resume__education"</span><br><span class="line">        &gt;</span><br><span class="line">          &#123;projectItems&#125;</span><br><span class="line">          &lt;Form.Item &#123;...formItemLayoutWithOutLabel&#125;&gt;</span><br><span class="line">            &lt;Button</span><br><span class="line">              type="dashed"</span><br><span class="line">              onClick=&#123;this.addProjectExp&#125;</span><br><span class="line">              style=&#123;&#123; width: '60%' &#125;&#125;</span><br><span class="line">            &gt;</span><br><span class="line">              &lt;Icon type="plus" /&gt; 添加</span><br><span class="line">            &lt;/Button&gt;</span><br><span class="line">          &lt;/Form.Item&gt;</span><br><span class="line">        &lt;/Card&gt;</span><br><span class="line">        &lt;Button type="primary" onClick=&#123;this.save&#125;&gt;</span><br><span class="line">          保存</span><br><span class="line">        &lt;/Button&gt;</span><br><span class="line">        &lt;Button onClick=&#123;this.reset&#125;&gt;重置&lt;/Button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可访问线上示例「<a href="https://codesandbox.io/s/xl8v6olw0o" target="_blank" rel="noopener">示例基础实现代码</a>」。虽然代码行数不多，但仍有许多优化空间，这也是本文的主题，拆分为多个自定义表单。</p><h2 id="三、预期的简历表单组件"><a href="#三、预期的简历表单组件" class="headerlink" title="三、预期的简历表单组件"></a>三、预期的简历表单组件</h2><p>既然是封装为表单组件，那么在使用上应该和现有的表单组件相同，支持直接使用，也支持配合<code>Form</code>组件使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">@Form.create()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HomePage</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    save = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; validateFieldsAndScroll &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">        validateFieldsAndScroll(<span class="function">(<span class="params">err, values</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 拿到需要的数据</span></span><br><span class="line">          alert(<span class="built_in">JSON</span>.stringify(values, <span class="literal">null</span>, <span class="number">2</span>));</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">            &#123;getFieldDecorator(<span class="string">'data'</span>)(</span><br><span class="line">                &lt;ResumeForm /&gt;</span><br><span class="line">            )&#125;</span><br><span class="line">            &lt;Button type=<span class="string">"primary"</span> onClick=&#123;<span class="keyword">this</span>.save&#125;&gt;保存&lt;<span class="regexp">/Button&gt;</span></span><br><span class="line"><span class="regexp">          &lt;/</span>div&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而<code>ResumeForm</code>也不是简单地将原先代码拷贝过来，而是同样做一些拆分，代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">ResumeForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">          &lt;div className=<span class="string">"resume"</span>&gt;</span><br><span class="line">            &lt;Card title=<span class="string">"基本信息"</span> className=<span class="string">"resume__basic"</span>&gt;</span><br><span class="line">                &#123;getFieldDecorator(<span class="string">'basic'</span>)(<span class="xml"><span class="tag">&lt;<span class="name">BasicInfoForm</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">            &lt;Card title=<span class="string">"工作经历"</span> className=<span class="string">"resume__work"</span>&gt;</span><br><span class="line">                &#123;getFieldDecorator(<span class="string">'works'</span>)(<span class="xml"><span class="tag">&lt;<span class="name">WorkExpForm</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">            &lt;Card title=<span class="string">"项目经历"</span> className=<span class="string">"resume__education"</span>&gt;</span><br><span class="line">                &#123;getFieldDecorator(<span class="string">'projects'</span>)(<span class="xml"><span class="tag">&lt;<span class="name">ProjectExpForm</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">Card</span>&gt;</span></span></span><br><span class="line">          &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="1、拆分组件为细粒度的表单有什么好处"><a href="#1、拆分组件为细粒度的表单有什么好处" class="headerlink" title="1、拆分组件为细粒度的表单有什么好处"></a>1、拆分组件为细粒度的表单有什么好处</h3><ul><li>1、<code>ResumeForm</code>组件可复用，只需引入即可，而不是复制粘贴代码。</li><li>2、代码整洁，原先的 300 余行代码现在变成了 20 行。</li><li>3、<strong>语义、职责更加清晰</strong>，首页由一个「表单」和一个「按钮」组成，表单负责提供数据，页面组件不再像之前一样掺杂了许多无关的代码。</li></ul><p>第二、三点从<code>ResumeForm</code>代码可以很直观看到，从原先的一个大整体，变成了三个子组件，每个子组件只负责一部分数据。</p><p>而再深入到<code>BasicInfoForm</code>组件中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicInfoForm</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">PureComponent</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; getFieldDecorator &#125; = <span class="keyword">this</span>.props.form;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">"basic__content"</span>&gt;</span><br><span class="line">        &lt;Form.Item label=<span class="string">"姓名"</span>&gt;</span><br><span class="line">          &#123;getFieldDecorator(<span class="string">'name'</span>, &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: <span class="literal">true</span>,</span><br><span class="line">                message: <span class="string">'请输入姓名'</span></span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(<span class="xml"><span class="tag">&lt;<span class="name">Input</span> <span class="attr">placeholder</span>=<span class="string">"请输入姓名"</span> /&gt;</span>)&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">Form.Item</span>&gt;</span></span></span><br><span class="line">        &lt;Form.Item label="出生年月"&gt;</span><br><span class="line">          &#123;getFieldDecorator('birthday', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请选择出生年月'</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(&lt;DatePicker placeholder="请选择出生年月" /&gt;)&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="性别"&gt;</span><br><span class="line">          &#123;getFieldDecorator('sex', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请选择性别'</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(&lt;SexSelect style=&#123;&#123; width: '100%' &#125;&#125; placeholder="请选择性别" /&gt;)&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="所在城市"&gt;</span><br><span class="line">          &#123;getFieldDecorator('city', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请选择所在城市'</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(&lt;CitySelect /&gt;)&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">        &lt;Form.Item label="邮箱"&gt;</span><br><span class="line">          &#123;getFieldDecorator('email', &#123;</span><br><span class="line">            rules: [</span><br><span class="line">              &#123;</span><br><span class="line">                required: true,</span><br><span class="line">                message: '请输入邮箱'</span><br><span class="line">              &#125;,</span><br><span class="line">              &#123;</span><br><span class="line">                type: 'email',</span><br><span class="line">                message: '邮箱格式不正确'</span><br><span class="line">              &#125;</span><br><span class="line">            ]</span><br><span class="line">          &#125;)(&lt;EmailInput placeholder="请输入邮箱" /&gt;)&#125;</span><br><span class="line">        &lt;/Form.Item&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>除了使用<code>antd</code>提供的基础表单组件外，还自己声明了<code>SexSelect</code>、<code>CitySelect</code>和<code>EmailInput</code>组件，这类组件只是简单对原有基础表单组件做了一层封装，但还是可以配合<code>getFieldDecorator</code>使用。</p><h3 id="2、自定义表单组件的说明"><a href="#2、自定义表单组件的说明" class="headerlink" title="2、自定义表单组件的说明"></a>2、自定义表单组件的说明</h3><p>上面提到的<code>ResumeForm</code>、<code>BasicInfoForm</code>以及这里的<code>SexSelect</code>，都是对原有组件进行「组合」或「封装」得到的，能够直接使用，也可以配合<code>Form</code>组件使用的组件，就是我想要描述的「自定义表单组件」。</p><h2 id="四、下期预告"><a href="#四、下期预告" class="headerlink" title="四、下期预告"></a>四、下期预告</h2><p>接下来会先对「基本信息表单」做详细的讲解，主要会涉及到</p><ul><li>怎么衡量是否要作为自定义表单组件</li><li>自定义表单的写法</li><li>取值的问题</li><li>校验的问题</li></ul><hr><a href="/blog/2018/10/23/antd自定义表单的问题-2/" title="antd 自定义表单的问题 - 2">antd 自定义表单的问题 - 2</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用 antd 的表单过程中，发现存在许多的问题。该博客会对我曾经遇到过的问题做一个总结，由于内容太多，所以预计会分成 3 篇。&lt;/p&gt;
&lt;p&gt;这是该主题的第一篇，主要介绍「什么是自定义表单」。全文会以「简历表单」作为示例来进行说明。&lt;/p&gt;
    
    </summary>
    
      <category term="React" scheme="http://yoursite.com/categories/React/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
      <category term="antd" scheme="http://yoursite.com/tags/antd/"/>
    
      <category term="form" scheme="http://yoursite.com/tags/form/"/>
    
  </entry>
  
  <entry>
    <title>前端路由与菜单</title>
    <link href="http://yoursite.com/2018/08/26/%E8%B7%AF%E7%94%B1%E4%B8%8E%E8%8F%9C%E5%8D%95/"/>
    <id>http://yoursite.com/2018/08/26/路由与菜单/</id>
    <published>2018-08-26T00:00:00.000Z</published>
    <updated>2018-08-28T12:58:33.210Z</updated>
    
    <content type="html"><![CDATA[<p>目前绝大部分单页应用都由前端控制路由，如<code>react</code>可以使用<code>react-router</code>、<code>vue</code>可以使用<code>vue-router</code>。路由库的使用已经有非常多的文章来介绍，所以本文的重点在于「基于路由配置自动生成导航菜单」，所用技术栈为<code>react</code> + <code>react-router-dom</code> + <code>antd</code>。</p><p>为什么是菜单呢？<br>它绝大部分内容和路由是相同的，但又有部分不同，如果维护两份带来的是巨大的维护成本，只需要修改一处即可同步路由与菜单的变化。</p><p>本文目标读者为了解基本的<code>react-router</code>使用，想要在项目中通过路由配置自动生成导航菜单，并正确处理菜单的高亮。</p><a id="more"></a><h2 id="贯穿全文的需求"><a href="#贯穿全文的需求" class="headerlink" title="贯穿全文的需求"></a>贯穿全文的需求</h2><p>本文会以如下页面作为示例，逐步优化，实现我们预期的效果。</p><p><img src="/blog/2018/08/26/路由与菜单/15352809220087.jpg" alt="商品列表"></p><p>应用有四个页面，分别为「商品列表」、「商品详情」、「购物车」和「个人中心」；当访问<code>/goods</code>时，菜单「商品列表」高亮，同时右侧展示商品列表；</p><p><img src="/blog/2018/08/26/路由与菜单/15352810699468.jpg" alt="商品详情"></p><p>点击商品列表中任意一条「查看详情」，则跳转至<code>/goods/0</code>，同时「商品列表」仍保持高亮状态，右侧展示商品详情。</p><h2 id="配置方式的转变"><a href="#配置方式的转变" class="headerlink" title="配置方式的转变"></a>配置方式的转变</h2><h3 id="最简单的配置"><a href="#最简单的配置" class="headerlink" title="最简单的配置"></a>最简单的配置</h3><p>在了解需求后，我们可以很快得到如下配置（<a href="https://codesandbox.io/s/8k21xvq232" target="_blank" rel="noopener">线上实例</a>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">RouterConfig</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Router&gt;</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &lt;Link to=<span class="string">"/"</span>&gt;首页&lt;<span class="regexp">/Link&gt;|</span></span><br><span class="line"><span class="regexp">                &lt;Link to="/g</span>oods<span class="string">"&gt;商品列表&lt;/Link&gt;|</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/cart<span class="string">"&gt;购物车&lt;/Link&gt;|</span></span><br><span class="line"><span class="string">                &lt;Link to="</span>/info<span class="string">"&gt;个人中心&lt;/Link&gt;</span></span><br><span class="line"><span class="string">                &lt;Switch&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/<span class="string">" exact component=&#123;Home&#125; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/goods<span class="string">" exact component=&#123;Goods&#125; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/goods/:id<span class="string">" component=&#123;GoodsDetail&#125; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/cart<span class="string">" component=&#123;Cart&#125; /&gt;</span></span><br><span class="line"><span class="string">                    &lt;Route path="</span>/info<span class="string">" component=&#123;Info&#125; /&gt;</span></span><br><span class="line"><span class="string">                &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">const rootElement = document.getElementById('root');</span></span><br><span class="line"><span class="string">ReactDOM.render(&lt;RouterConfig /&gt;, rootElement);</span></span><br></pre></td></tr></table></figure><p>相比之前，<code>react-router</code>更加灵活，也更易于理解了，但如果出现嵌套路由，则路由配置将分散在多处，不利于管理，以及无法自动生成菜单。</p><h3 id="集中维护路由配置"><a href="#集中维护路由配置" class="headerlink" title="集中维护路由配置"></a>集中维护路由配置</h3><p>所以还是需要以集中管理的形式来对路由进行配置，对应上面的例子，我们可以得出如下的配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'首页'</span>,</span><br><span class="line">        component: Home,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/goods'</span>,</span><br><span class="line">        name: <span class="string">'商品列表'</span>,</span><br><span class="line">        component: Goods,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/goods/:id'</span>,</span><br><span class="line">        name: <span class="string">'商品详情'</span>,</span><br><span class="line">        component: GoodsDetail,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/cart'</span>,</span><br><span class="line">        name: <span class="string">'购物车'</span>,</span><br><span class="line">        component: Cart,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/info'</span>,</span><br><span class="line">        name: <span class="string">'个人中心'</span>,</span><br><span class="line">        component: Info,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>那么与之对应的路由组件为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Router&gt;</span><br><span class="line">    &lt;Route</span><br><span class="line">      path=<span class="string">"/"</span></span><br><span class="line">      render=&#123;props =&gt; &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">BasicLayout</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">      &#125;&#125;</span></span><br><span class="line"><span class="xml">    /&gt;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="新增的布局概念"><a href="#新增的布局概念" class="headerlink" title="新增的布局概念"></a>新增的布局概念</h3><p>这里出现了<code>BasicLayout</code>，就是前面提到的嵌套路由，引入的目的是为了解决部分页面布局不同的问题，如登录页不会显示菜单，而开始的配置方式，无论如何都会显示出<code>&lt;Link to=&quot;/&quot;&gt;首页&lt;/Link&gt;|</code>这部分组件。<br>将<code>routes</code>传入，并在<code>BasicLayout</code>组件内再做路由配置。<code>BasicLayout</code>大概长这样（<a href="https://codesandbox.io/s/y7z220jvj" target="_blank" rel="noopener">线上示例</a>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BasicLayout</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;Layout&gt;</span><br><span class="line">                &lt;Sider&gt;</span><br><span class="line">                    &lt;Menu /&gt;</span><br><span class="line">                &lt;<span class="regexp">/Sider&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Header /</span>&gt;</span><br><span class="line">                &lt;Content&gt;</span><br><span class="line">                    &lt;Switch&gt;</span><br><span class="line">                    &#123;routes.map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">return</span> (</span><br><span class="line">                            &lt;Route</span><br><span class="line">                                key=&#123;route.path&#125;</span><br><span class="line">                                path=&#123;route.path&#125;</span><br><span class="line">                                exact</span><br><span class="line">                                component=&#123;route.component&#125;</span><br><span class="line">                            /&gt;</span><br><span class="line">                        );</span><br><span class="line">                    &#125;)&#125; </span><br><span class="line">                    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Content&gt;</span><br><span class="line">            &lt;<span class="regexp">/Layout&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/blog/2018/08/26/路由与菜单/15352829629298.jpg" alt="BasicLayout"></p><p>虽然有一些理解成本，但之后只需要关心<code>BasicLayout</code>组件内的<code>&lt;Switch&gt;</code>即可。布局与面包屑导航会在另一篇博客中介绍。</p><h2 id="生成菜单"><a href="#生成菜单" class="headerlink" title="生成菜单"></a>生成菜单</h2><p><code>Menu</code>组件位于<code>BasicLayout</code>组件内，所以也可以拿到<code>routes</code>，并生成对应组件即可（<a href="https://codesandbox.io/s/y7z220jvj" target="_blank" rel="noopener">示例同上</a>）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">NavMenu</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    renderMenus = <span class="function">(<span class="params">routes = [], parentPath = <span class="string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> routes.map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// replace 用来去除多余的 / 符号</span></span><br><span class="line">            <span class="keyword">const</span> path = <span class="string">`<span class="subst">$&#123;parentPath&#125;</span>/<span class="subst">$&#123;route.path&#125;</span>`</span>.replace(<span class="regexp">/\/+/g</span>, <span class="string">'/'</span>);</span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;Menu.Item key=&#123;route.path&#125;&gt;</span><br><span class="line">                    &lt;Link to=&#123;path&#125;&gt;</span><br><span class="line">                        &lt;span&gt;&#123;route.name&#125;&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>Link&gt;</span><br><span class="line">                &lt;<span class="regexp">/Menu.Item&gt;</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">        &#125;);</span></span><br><span class="line"><span class="regexp">    &#125;;</span></span><br><span class="line"><span class="regexp">    render() &#123;</span></span><br><span class="line"><span class="regexp">        const &#123; routes &#125; = this.props;</span></span><br><span class="line"><span class="regexp">        return (</span></span><br><span class="line"><span class="regexp">            &lt;Menu theme="dark" mode="inline"&gt;</span></span><br><span class="line"><span class="regexp">                &#123;this.renderMenus(routes)&#125;</span></span><br><span class="line"><span class="regexp">            &lt;/</span>Menu&gt;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以得到这样的菜单：</p><p><img src="/blog/2018/08/26/路由与菜单/15352839804328.jpg" alt="初始状态的菜单"></p><p>可以发现，虽然按照我们预期，生成了菜单，但存在一些问题</p><ul><li>商品详情不应该展示</li><li>没有高亮</li></ul><h3 id="商品详情不应该展示"><a href="#商品详情不应该展示" class="headerlink" title="商品详情不应该展示"></a>商品详情不应该展示</h3><p>自动生成的「商品详情」菜单，点击后跳转到<code>/goods/:id</code>这个地址，对我们来说没有任何作用，所以需要隐藏掉。<br>解决方法也非常简单，不渲染这条配置即可，可以判断<code>route.path</code>是否包含<code>:</code>符号，如果包含，就返回<code>null</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (route.path.indexOf(<span class="string">':'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以在<code>routes</code>配置中，添加<code>hide</code>属性，然后在渲染时判断<code>hide === true</code>，并决定是否渲染。如果我们不希望在菜单中展示「首页」，就可以通过这种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'首页'</span>,</span><br><span class="line">        component: Home,</span><br><span class="line">        hide: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h3 id="菜单高亮"><a href="#菜单高亮" class="headerlink" title="菜单高亮"></a>菜单高亮</h3><p>高亮的原理很简单，获取当前<code>url</code>，判断和哪个菜单项匹配。由于使用<code>HashRouter</code>，<code>location.pathname</code>不能正确返回我们预期的值。当然这个问题<code>react-router</code>帮我们解决了，可以通过两种方式，第一种是<code>props</code>；第二种是<code>withRouter</code>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route</span><br><span class="line">  path=<span class="string">"/"</span></span><br><span class="line">  render=&#123;props =&gt; &#123;</span><br><span class="line">    <span class="comment">// props 上有 match 和 location 属性，传给 BasicLayout 后 BasicLayout 也有了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">BasicLayout</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">routes</span>=<span class="string">&#123;routes&#125;</span> /&gt;</span>;</span></span><br><span class="line"><span class="xml">  &#125;&#125;</span></span><br><span class="line"><span class="xml">/&gt;</span></span><br></pre></td></tr></table></figure><p>那么先在<code>BasicLayout</code>组件内打印看看这两个属性到底是什么吧</p><p><img src="/blog/2018/08/26/路由与菜单/15352849728129.jpg" alt="BasicLayout this.props"></p><p><code>match</code>表示的是当前匹配到的<code>Route</code>的属性，<code>location</code>是当前<code>url</code>的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">computeSelectedMenuItem = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 由于使用了 hashRouter，所以必须借助 this.props.match 属性</span></span><br><span class="line">    <span class="keyword">const</span> &#123; match &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但无论怎么切换页面，<code>match.path</code>都是<code>/</code>，而不是我们预期的<code>/goods</code>或者<code>/goods/:id</code>。</p><p>答案也很简单，因为<code>BasicLayout</code>对应的<code>Route</code>的<code>path</code>就是<code>/</code>。<br>实际上，<code>react-router</code>的原理就是，<code>Route</code>组件获取当前<code>url</code>，与自身<code>path</code>对比，如果匹配，就显示自身，否则就不显示。</p><p>对应到我们的应用中，就是<code>&lt;Route path=&quot;/&quot;</code>这个组件，计算当前<code>/goods</code>匹配自身成功，所以显示出<code>BasicLayout</code>组件。而组件内的<code>&lt;Route path=&quot;/goods&quot;</code>组件，也认为当前<code>url</code>匹配自身，所以展示<code>Goods</code>组件。</p><p>所以我们暂时先通过<code>props.location.pathname</code>实现高亮。将<code>location</code>传给<code>NavMenu</code>组件，并在组件内维护<code>selectedKeys</code>变量，保存当前选中的菜单项的<code>key</code>，传给<code>Menu</code>就 OK 啦（<a href="https://codesandbox.io/s/r5yylm66rq" target="_blank" rel="noopener">示例</a>）！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">const</span> &#123; location &#125; = props;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">        selectedKeys: <span class="keyword">this</span>.computeSelectedMenuItem(location)</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">location</span>: nextLocation &#125; = nextProps;</span><br><span class="line">    <span class="keyword">const</span> &#123; location &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="keyword">if</span> (nextLocation.pathname !== location.pathname) &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">            selectedKeys: <span class="keyword">this</span>.computeSelectedMenuItem(nextLocation)</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">computeSelectedMenuItem = <span class="function"><span class="params">location</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> [location.pathname];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>至此，高亮完成了第一步，我们能发现访问「商品详情」时无法正确高亮「商品列表」，所以接下来解决这个问题。</p><h3 id="高亮父菜单"><a href="#高亮父菜单" class="headerlink" title="高亮父菜单"></a>高亮父菜单</h3><p>当访问<code>/goods/0</code>时，<code>selectedKeys</code>中保存的是<code>&#39;/goods/0</code>，没有任何菜单的<code>path</code>能正确匹配到，所以没有任何菜单高亮。</p><p>所以，我们将该路径分割，得到<code>/goods</code>和<code>/0</code>两部分，返回第一部分就能正确高亮了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">computeSelectedMenuItem = <span class="function"><span class="params">location</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = location;</span><br><span class="line">    <span class="keyword">const</span> paths = pathname</span><br><span class="line">        .split(<span class="string">'/'</span>)</span><br><span class="line">        .filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="string">''</span>)</span><br><span class="line">        .map(<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(paths);</span><br><span class="line">    <span class="keyword">return</span> [paths[<span class="number">0</span>]];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>虽然满足了我们当前的用例，访问「商品详情」时高亮「商品列表」，但如果出现「子菜单」的情况呢？<br>将「个人中心」与「购物车」页面，放到一起作为「我的」子菜单，访问「购物车」的路径变成了<code>/my/cart</code>，这种情况必然无法高亮。</p><p>修改<code>routes</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/'</span>,</span><br><span class="line">        name: <span class="string">'首页'</span>,</span><br><span class="line">        component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/goods'</span>,</span><br><span class="line">        name: <span class="string">'商品列表'</span>,</span><br><span class="line">        component: Goods</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/goods/:id'</span>,</span><br><span class="line">        name: <span class="string">'商品详情'</span>,</span><br><span class="line">        component: GoodsDetail</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/my'</span>,</span><br><span class="line">        name: <span class="string">'我的'</span>,</span><br><span class="line">        children: [</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'/cart'</span>,</span><br><span class="line">                name: <span class="string">'购物车'</span>,</span><br><span class="line">                component: Cart</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                path: <span class="string">'/info'</span>,</span><br><span class="line">                name: <span class="string">'个人中心'</span>,</span><br><span class="line">                component: Info</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>但修改完成后，菜单只展示「我的」，而没有子菜单，因为还没有在<code>NavMenu</code>组件中没有对子菜单进行渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">renderMenus = <span class="function">(<span class="params">routes = [], parentPath = <span class="string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> routes.map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (route.path.indexOf(<span class="string">':'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理子菜单</span></span><br><span class="line">        <span class="keyword">const</span> hasChildMenu = route.children;</span><br><span class="line">        <span class="keyword">if</span> (hasChildMenu) &#123;</span><br><span class="line">            <span class="comment">// 如果存在子菜单，就递归渲染</span></span><br><span class="line">            <span class="keyword">return</span> (</span><br><span class="line">                &lt;SubMenu title=&#123;route.name&#125; key=&#123;route.path&#125;&gt;</span><br><span class="line">                    &#123;<span class="keyword">this</span>.renderMenus(route.children, route.path)&#125;</span><br><span class="line">                &lt;<span class="regexp">/SubMenu&gt;</span></span><br><span class="line"><span class="regexp">            );</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        let path = `$&#123;parentPath&#125;/</span>$&#123;route.path&#125;<span class="string">`.replace(/\/+/g, '/');</span></span><br><span class="line"><span class="string">        return (</span></span><br><span class="line"><span class="string">            &lt;Menu.Item key=&#123;route.path&#125;&gt;</span></span><br><span class="line"><span class="string">                &lt;Link to=&#123;path&#125;&gt;</span></span><br><span class="line"><span class="string">                    &lt;span&gt;&#123;route.name&#125;&lt;/span&gt;</span></span><br><span class="line"><span class="string">                &lt;/Link&gt;</span></span><br><span class="line"><span class="string">            &lt;/Menu.Item&gt;</span></span><br><span class="line"><span class="string">        );</span></span><br><span class="line"><span class="string">    &#125;);</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>虽然菜单正常显示了，但当访问<code>/my/cart</code>时，并不能正确展示<code>Cart</code>组件。同样是因为在路由渲染时，没有处理「子页面」的情况。</p><blockquote><p>这里特意使用了「子页面」，而不是「子路由」。因为<code>/my</code>页面与<code>/my/cart</code>页面不是嵌套路由的关系，并且<code>/my</code>并没有实际的页面。</p></blockquote><p>所以需要修改<code>BasicLayout</code>组件内渲染路由的方式，本质上类似如下配置（<a href="https://codesandbox.io/s/13p279ny3l" target="_blank" rel="noopener">嵌套路由的配置</a>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ChildRouter = (</span><br><span class="line">    &lt;Switch&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/"</span> exact component=&#123;Home&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/goods"</span> exact component=&#123;Goods&#125; /&gt;</span><br><span class="line">        &lt;Route path=<span class="string">"/goods/:id"</span> component=&#123;GoodsDetail&#125; /&gt;</span><br><span class="line">        &lt;Route</span><br><span class="line">            path=<span class="string">"/my"</span></span><br><span class="line">            render=&#123;() =&gt; &#123;</span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    &lt;Switch&gt;</span><br><span class="line">                        &#123;<span class="comment">/* 不能用 /cart 而必须用 /my/cart */</span>&#125;</span><br><span class="line">                        &lt;Route path=<span class="string">"/my/cart"</span> component=&#123;Cart&#125; /&gt;</span><br><span class="line">                        &lt;Route path=<span class="string">"/my/login"</span> component=&#123;Login&#125; /&gt;</span><br><span class="line">                    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">                );</span></span><br><span class="line"><span class="regexp">            &#125;&#125;</span></span><br><span class="line"><span class="regexp">        /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/Switch&gt;</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default function RouterConfig() &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">        &lt;Router&gt;</span></span><br><span class="line"><span class="regexp">            &lt;Route path="/</span><span class="string">" children=&#123;ChildRouter&#125; /&gt;</span></span><br><span class="line"><span class="string">        &lt;/Router&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>所以我们最终的<code>BasicLayout</code>是这样的（<a href="https://codesandbox.io/s/kk4x78l19r" target="_blank" rel="noopener">最终的代码</a>）：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">renderRouterConfig = <span class="function">(<span class="params">routes, parentPath = <span class="string">''</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Switch&gt;</span><br><span class="line">            &#123;routes.map(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> path = <span class="string">`<span class="subst">$&#123;parentPath&#125;</span>/<span class="subst">$&#123;route.path&#125;</span>`</span>.replace(</span><br><span class="line">                    /\/+<span class="regexp">/g,</span></span><br><span class="line"><span class="regexp">                    '/</span><span class="string">'</span></span><br><span class="line"><span class="string">                );</span></span><br><span class="line"><span class="string">                if (route.children) &#123;</span></span><br><span class="line"><span class="string">                    return (</span></span><br><span class="line"><span class="string">                        &lt;Route</span></span><br><span class="line"><span class="string">                            key=&#123;path&#125;</span></span><br><span class="line"><span class="string">                            path=&#123;path&#125;</span></span><br><span class="line"><span class="string">                            render=&#123;() =&gt; &#123;</span></span><br><span class="line"><span class="string">                                return this.renderRouterConfig(</span></span><br><span class="line"><span class="string">                                    route.children,</span></span><br><span class="line"><span class="string">                                    path</span></span><br><span class="line"><span class="string">                                );</span></span><br><span class="line"><span class="string">                            &#125;&#125;</span></span><br><span class="line"><span class="string">                        /&gt;</span></span><br><span class="line"><span class="string">                    );</span></span><br><span class="line"><span class="string">                &#125;</span></span><br><span class="line"><span class="string">                return (</span></span><br><span class="line"><span class="string">                    &lt;Route</span></span><br><span class="line"><span class="string">                        key=&#123;path&#125;</span></span><br><span class="line"><span class="string">                        path=&#123;path&#125;</span></span><br><span class="line"><span class="string">                        exact</span></span><br><span class="line"><span class="string">                        component=&#123;route.component&#125;</span></span><br><span class="line"><span class="string">                    /&gt;</span></span><br><span class="line"><span class="string">                );</span></span><br><span class="line"><span class="string">            &#125;)&#125;</span></span><br><span class="line"><span class="string">        &lt;/Switch&gt;</span></span><br><span class="line"><span class="string">    );</span></span><br><span class="line"><span class="string">&#125;;</span></span><br></pre></td></tr></table></figure><p>确实发现路径<code>/my/cart</code>时，「购物车」菜单项并没有高亮，所以需要修改返回的<code>selectedKeys</code>，能够满足两种情况。</p><p>维护一个全局变量，保存所有的路由，即</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在生成菜单项时新增</span></span><br><span class="line"><span class="keyword">this</span>.paths = &#123;</span><br><span class="line">    <span class="string">'/goods'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'/goods/:id'</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'/my/cart'</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果当前<code>props.location.pathname</code>能够在<code>this.paths</code>中找到，表示不包含动态参数，返回<code>pathname</code>。如果是<code>/goods/0</code>，无法匹配到，所以返回经过处理的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">computeSelectedMenuItem = <span class="function"><span class="params">location</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; pathname &#125; = location;</span><br><span class="line">    <span class="keyword">const</span> paths = pathname</span><br><span class="line">        .split(<span class="string">'/'</span>)</span><br><span class="line">        .filter(<span class="function"><span class="params">item</span> =&gt;</span> item !== <span class="string">''</span>)</span><br><span class="line">        .map(<span class="function"><span class="params">path</span> =&gt;</span> <span class="string">`/<span class="subst">$&#123;path&#125;</span>`</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.paths[pathname] ? [pathname] : [paths[<span class="number">0</span>]];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>即使是<a href="https://codesandbox.io/s/z3436l5oom" target="_blank" rel="noopener">更复杂的例子</a>，如三层菜单也能正确处理。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前绝大部分单页应用都由前端控制路由，如&lt;code&gt;react&lt;/code&gt;可以使用&lt;code&gt;react-router&lt;/code&gt;、&lt;code&gt;vue&lt;/code&gt;可以使用&lt;code&gt;vue-router&lt;/code&gt;。路由库的使用已经有非常多的文章来介绍，所以本文的重点在于「基于路由配置自动生成导航菜单」，所用技术栈为&lt;code&gt;react&lt;/code&gt; + &lt;code&gt;react-router-dom&lt;/code&gt; + &lt;code&gt;antd&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;为什么是菜单呢？&lt;br&gt;它绝大部分内容和路由是相同的，但又有部分不同，如果维护两份带来的是巨大的维护成本，只需要修改一处即可同步路由与菜单的变化。&lt;/p&gt;
&lt;p&gt;本文目标读者为了解基本的&lt;code&gt;react-router&lt;/code&gt;使用，想要在项目中通过路由配置自动生成导航菜单，并正确处理菜单的高亮。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端如何缓存请求</title>
    <link href="http://yoursite.com/2018/07/09/%E5%89%8D%E7%AB%AF%E5%A6%82%E4%BD%95%E7%BC%93%E5%AD%98%E8%AF%B7%E6%B1%82/"/>
    <id>http://yoursite.com/2018/07/09/前端如何缓存请求/</id>
    <published>2018-07-09T00:00:00.000Z</published>
    <updated>2018-09-03T11:43:44.570Z</updated>
    
    <content type="html"><![CDATA[<p>缓存一直以来作为性能优化的一环被广泛使用，</p><ul><li>数据库缓存</li><li>代理服务器缓存</li><li>CDN 缓存</li><li>浏览器缓存</li></ul><p>等等，几乎在每一层，都有缓存存在。本篇博客讨论的不是上面这些缓存，而是由我们自己控制的缓存，具体来说是「请求」的缓存，如何优化请求的缓存让我们的应用更好。</p><a id="more"></a><h2 id="一、需要缓存吗？"><a href="#一、需要缓存吗？" class="headerlink" title="一、需要缓存吗？"></a>一、需要缓存吗？</h2><h3 id="1、减少不必要的请求"><a href="#1、减少不必要的请求" class="headerlink" title="1、减少不必要的请求"></a>1、减少不必要的请求</h3><p>在我们的应用中，会存在一些很少改动的数据，但这些数据又要从后端获取。<br>典型的如下拉框的内容，可以是行业、职业、角色等等，这类数据在很长一段时间内都是不会改变的，至少在应用的使用过程中是不会改变的，而我们却在每次打开页面或者是切换页面时，就重新向后端请求了一次，这类请求完全是没有必要的，通过对类请求的数据进行缓存，可以大大减小对服务器的压力。</p><h3 id="2、更快的访问速度"><a href="#2、更快的访问速度" class="headerlink" title="2、更快的访问速度"></a>2、更快的访问速度</h3><p>在访问一些数据时，不再重新向后端请求，而是直接使用缓存中的数据，访问速度毫无疑问会更加快，用户体验也必然会更好。</p><h2 id="二、哪些数据可以缓存？"><a href="#二、哪些数据可以缓存？" class="headerlink" title="二、哪些数据可以缓存？"></a>二、哪些数据可以缓存？</h2><p>在单页面应用中，所有数据来源都是接口请求，但并不是所有数据都需要，或者说能被缓存。</p><blockquote><p>讨论的都是<code>GET</code>请求，<code>PUT</code>、<code>POST</code>等绝对是不能被缓存的。</p></blockquote><p>判断标准是根据请求的频次，这里给出不同请求频次的定义，「高频」、「中频」、「低频」。</p><ul><li>高频：通过交互就可以请求的数据，如查询接口</li><li>中频：页面切换时才会请求的数据，如页面数据</li><li>低频：只有在应用初始化时才会请求，如获取当前登录用户信息</li></ul><p>具体的可以根据自己项目进行调整。</p><p>举个例子，有如下页面</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15307549145733.jpg" alt=""></p><p>页面展示「图书列表」，可以对该列表进行查询、切换页码、删除。根据上面的定义得出如下判断</p><ul><li>1、类别下拉框，只在访问页面时请求，用户交互不会触发重新请求，所以属于「中频」。</li><li>2、获取图书列表，可以通过切换分页请求，所以属于「高频」。</li><li>3、查询功能，同样可以通过点击请求，所以属于「高频」。</li><li>4、当前登录用户名，在单页面应用中切换页面也不会重新请求，所以属于「低频」。</li><li>5、删除功能，不缓存。</li></ul><p>在确定请求频次后，还要判断「该数据是否会被修改」，假设我们认为「获取图书列表」是高频所以缓存，确实能解决用户切换分页时频繁请求数据的问题，但如果用户<strong>删除了某条记录</strong>，在切换分页后会发现<strong>该数据还存在</strong>。</p><p>所以当数据是可以被新增、删除、修改时，就不能缓存该数据了。</p><blockquote><p>或许可以设置一种机制，当接口存在这三种请求，缓存即过期，将重新请求。</p></blockquote><h2 id="三、内存还是-localstorage"><a href="#三、内存还是-localstorage" class="headerlink" title="三、内存还是 localstorage ?"></a>三、内存还是 localstorage ?</h2><p>在确定了哪些数据需要缓存后，如何将数据缓存呢？<br>由于要使用，当然保存在一个全局变量会方便很多，也就是保存在内存中。如果说保存在<code>localStorage</code>，每次使用时还是要读取到内存中，那干脆都保存到内存，<code>localStorage</code>作为持久化方案，保存一些低频、不会变化的数据，如「用户信息」，如果有的话。</p><h2 id="四、具体代码如何写"><a href="#四、具体代码如何写" class="headerlink" title="四、具体代码如何写"></a>四、具体代码如何写</h2><p>能否实现对已有系统改造量最小，甚至做到无需修改呢？<br>在目前普通使用<code>redux</code>的情况下，从交互到展示数据的过程是这样的：</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15311046013348.jpg" alt=""></p><p>在「请求数据」这里做比较好，一开始想到，一般我们使用<code>axios</code>请求数据，当请求需要缓存的接口时，就直接返回缓存好的，通过拦截器可以轻松做到。<br>但问题来了，如何标志哪些接口是需要缓存，哪些又是不需要的呢，通过<code>method</code>判断可以解决一部分，但还是不够完善。</p><p>要解决这个问题，确实应该在请求前就处理好，如果不使用拦截器，我们可以自己做一次处理，以具体代码来说：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetch</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">'/api/books'</span>, &#123; params &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCategories</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">'/api/categories'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.delete(<span class="string">`/api/books/<span class="subst">$&#123;id&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>简单粗暴的做法，直接加一个缓存对象，一旦请求，就加入缓存，否则就请求。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> cache = &#123;&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchCategories</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> url = <span class="string">'/api/categories'</span>;</span><br><span class="line">    <span class="keyword">if</span> (cache[url]) &#123;</span><br><span class="line">        <span class="keyword">return</span> cache[url];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> res = axios.get(url);</span><br><span class="line">    cache[url] = res;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然简单粗暴，但这是核心逻辑，能够优化的就是如何优雅的写代码了。</p><h3 id="1、现成的缓存库"><a href="#1、现成的缓存库" class="headerlink" title="1、现成的缓存库"></a>1、现成的缓存库</h3><p>这种需求肯定早有人想过，先来看一个已有的缓存库 <a href="https://github.com/sindresorhus/mem" target="_blank" rel="noopener">mem</a>，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mem = <span class="built_in">require</span>(<span class="string">'mem'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> counter = <span class="keyword">async</span> () =&gt; ++i;</span><br><span class="line"><span class="keyword">const</span> memoized = mem(counter);</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> memoized());</span><br><span class="line"><span class="comment">//=&gt; 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The return value didn't increase as it's cached</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">await</span> memoized());</span><br><span class="line"><span class="comment">//=&gt; 1</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p><code>counter</code>就是要被缓存的请求，第二次调用时，会返回之前的值，而不会再次调用该请求。</p><p>换成我们的代码，就是这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mem = <span class="built_in">require</span>(<span class="string">'mem'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchCategories = mem(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">'/api/categories'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2、mem-在实际项目中的拓展"><a href="#2、mem-在实际项目中的拓展" class="headerlink" title="2、mem 在实际项目中的拓展"></a>2、mem 在实际项目中的拓展</h3><p>如果需求比较简单，目前应该就能够满足需求了。</p><p>但其实还可以更一步优化，举例来说，虽然上面提到「图书列表」会被删除修改，所以不应该缓存，但如果用户在页码之间来回切换，请求的频率还是很高的，而且这种情况下是完全可以缓存的，所以，判断两次请求的时间间隔，如果小于 5s，就返回缓存的结果，否则就不缓存。</p><p>当然这种需求<code>mem</code>的作者也考虑到了，就是过期时间，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mem = <span class="built_in">require</span>(<span class="string">'mem'</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchCategories = mem(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">'/api/categories'</span>);</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    maxAge: <span class="number">5000</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>表示设置缓存有效期是 5s，5s 内多次请求，都会返回缓存，5s 后会重新请求。</p><p>上面写法不太直观，我们可以使用修饰器来简化，但这种方式对原有代码调整很大，因为装饰器只能用于类与类的方法，所以代码变成这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mem <span class="keyword">from</span> <span class="string">'mem'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @param &#123;MemOption&#125; - mem 配置项</span></span><br><span class="line"><span class="comment"> * @return &#123;Function&#125; - 装饰器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">target, name, descriptor</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> oldValue = descriptor.value;</span><br><span class="line">    descriptor.value = mem(oldValue, options);</span><br><span class="line">    <span class="keyword">return</span> descriptor;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Api</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 使用装饰器简化写法</span></span><br><span class="line">    @m(&#123; <span class="attr">maxAge</span>: <span class="number">5000</span> &#125;)</span><br><span class="line">    fetchCategories() &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.get(<span class="string">'/api/categories'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><ul><li><a href="http://www.alloyteam.com/2016/03/discussion-on-web-caching/" target="_blank" rel="noopener">浅谈 Web 缓存</a></li><li><a href="https://tech.meituan.com/cache_about.html" target="_blank" rel="noopener">缓存那些事</a></li><li><a href="http://es6.ruanyifeng.com/#docs/decorator#%E6%96%B9%E6%B3%95%E7%9A%84%E4%BF%AE%E9%A5%B0" target="_blank" rel="noopener">装饰器</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;缓存一直以来作为性能优化的一环被广泛使用，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据库缓存&lt;/li&gt;
&lt;li&gt;代理服务器缓存&lt;/li&gt;
&lt;li&gt;CDN 缓存&lt;/li&gt;
&lt;li&gt;浏览器缓存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;等等，几乎在每一层，都有缓存存在。本篇博客讨论的不是上面这些缓存，而是由我们自己控制的缓存，具体来说是「请求」的缓存，如何优化请求的缓存让我们的应用更好。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>前端怎么做好权限控制</title>
    <link href="http://yoursite.com/2018/04/09/%E5%89%8D%E7%AB%AF%E6%9D%83%E9%99%90%E6%96%B9%E6%A1%88/"/>
    <id>http://yoursite.com/2018/04/09/前端权限方案/</id>
    <published>2018-04-09T00:00:00.000Z</published>
    <updated>2018-05-02T04:03:54.849Z</updated>
    
    <content type="html"><![CDATA[<p>现如今我们访问的每个网站，或多或少都会存在「权限控制」。</p><p>以一个博客系统为例，系统内共有三种角色</p><ul><li>1、游客</li><li>2、会员</li><li>3、管理员</li></ul><p>不同角色支持不同的操作，比如</p><ul><li>1、游客可以访问博客列表页、博客详情页</li><li>2、会员除游客权限外，还可以提交博客、提交评论、对博客进行编辑、删除操作等。</li><li>3、管理员除上述权限外，还可访问用户管理页对用户进行管理。</li></ul><p>上述说明「什么用户能够进行什么操作，不能进行什么操作」，可以理解为就是「权限」，根据这些权限，做出正确的处理，就是「权限控制」，而「角色」，是「权限」的集合，也方便我们对用户的定义。</p><a id="more"></a><h2 id="一、为什么要做权限控制"><a href="#一、为什么要做权限控制" class="headerlink" title="一、为什么要做权限控制"></a>一、为什么要做权限控制</h2><p>最主要的原因是有了「用户」的概念，需要对不同的用户提供不同的服务。</p><p>如果一个博客系统没有权限控制，游客可以任意发布、编辑、删除博客，整个系统就乱了套，无法进行有效的管理。</p><p>不过，这些都是针对后端而言的，对前端来说，做权限控制，很大程度上是为了用户体验，下面会解释这个观点。</p><h2 id="二、如何做权限控制"><a href="#二、如何做权限控制" class="headerlink" title="二、如何做权限控制"></a>二、如何做权限控制</h2><h3 id="1、后端的权限控制"><a href="#1、后端的权限控制" class="headerlink" title="1、后端的权限控制"></a>1、后端的权限控制</h3><p>既然提到了「权限控制仅针对后端有用」，那么后端是如何做权限控制呢？</p><p>以<code>Django</code>为例，初始化项目后，就会预置<code>&#39;django.contrib.auth&#39;</code>应用，该应用提供了现成的用户表、登录注册功能以及用户权限相关的功能，无需开发者自己实现。</p><p>它的权限很简单，除了是否为管理员，就是对指定「数据表」是否有<code>add</code>、<code>change</code>和<code>delete</code>的权限了。</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15231083412127.jpg" alt=""></p><p>当后端接收到请求，会做如下处理：</p><ul><li>1、获取当前请求属于哪个用户发出</li><li>2、获取该用户拥有什么权限</li><li>3、想要进行什么操作</li><li>4、是否有该操作的权限</li><li>5、成功操作或失败</li></ul><p>通过条件判断，给出用户操作的结果，就完成了后端的权限控制。</p><h3 id="2、前端的权限控制"><a href="#2、前端的权限控制" class="headerlink" title="2、前端的权限控制"></a>2、前端的权限控制</h3><p>前端的权限控制，往往通过隐藏<code>DOM</code>元素实现，比如博客页面，作者和管理员可以看到「删除博客」按钮，游客则看不到。</p><p>仅仅这样就够了吗？是的，这样就够了。</p><p>作为前端开发，我们都听过「前端不可信」，即后端无论如何都不能相信前端发送的请求数据。</p><p>无论<code>Web</code>端还是移动端，都是可以被「破解」的，通过抓包等手段，可以得到发送的实际请求，从而伪造请求并发送。</p><p>假设会员 A 写了一篇博客，博客序号为 20，通过控制台得到删除该博客的请求为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /api/blog/20/</span><br></pre></td></tr></table></figure><p>会员A 退出登录后，身份变为了游客，当他访问另一篇序号为 21 的博客时，恶意的使用控制台发送<code>DELETE /api/blog/21/</code>的请求。</p><p>如果后端完全相信前端而没有做权限判断，那博客 21 的作者就无故丢失了一篇博客。所以后端仍需要对发起请求的用户进行权限的判断，并给出正确的处理。</p><blockquote><p>问：既然后端都做好了权限控制，前端再做一次是不是没有必要？</p></blockquote><p>从「处理权限并返回处理结果」上来说，的确是没有必要。</p><p>如果前端没有对游客隐藏「删除博客」按钮，游客点击删除后，返回提示「没有权限操作」，游客将十分困惑，「为什么能让我点击却又告诉我没有权限？」。</p><p>从另一方面，尝试过一次「没有权限」的提示后，大部分都不会再去点了，但是可能会有一部分继续「疯狂操作」，就为了看看错误提示。。。</p><p>对应这种情况，前端隐藏删除按钮后，提高了「误操作」成本，可以减轻一部分服务器的压力，避免处理一些无意义的请求。</p><blockquote><p>但是对于恶意用户，总是可以找出办法「疯狂操作」，所以说前端的权限控制，很大程度上是为了更好的用户体验。</p></blockquote><h2 id="三、前端权限控制具体方案"><a href="#三、前端权限控制具体方案" class="headerlink" title="三、前端权限控制具体方案"></a>三、前端权限控制具体方案</h2><p>在之前后端渲染模板的做法，当用户请求页面时，就可以得到用户角色，并判断是否有权限，如果没有则重定向到登录页或者错误页。</p><p>模板渲染时，也可以在模板内根据用户角色决定是否渲染和权限有关的<code>DOM</code>。</p><p>而现在流行的单页面应用，路由都交给了前端控制，模板内也无法直接获取到用户从而决定是否渲染，一切都交给了<code>js</code>处理。</p><p>总体来说，分为三步，对，就和「如何将大象装进冰箱」这个问题的答案一样。</p><ul><li>1、获取用户角色</li><li>2、保存用户角色</li><li>3、判断用户角色并作出不同处理</li></ul><h3 id="1、获取用户角色"><a href="#1、获取用户角色" class="headerlink" title="1、获取用户角色"></a>1、获取用户角色</h3><p>要根据用户角色做不同的处理，首先要获取到用户角色。可以在登录时一并返回，也可以提供一个独立的接口用以请求。</p><h3 id="2、保存用户角色"><a href="#2、保存用户角色" class="headerlink" title="2、保存用户角色"></a>2、保存用户角色</h3><p>角色往往和其他用户信息一样，保存在<code>localStorage</code>，也是因为除了这里，没有其他合适的地方了。</p><blockquote><p>也许会说保存在<code>localStorage</code>会不会不安全，很容易被篡改。的确可能，所以前面也提到，前端的权限，只是为了更好的用户体验，真正的权限控制必须要由后端来做。</p></blockquote><h3 id="3、根据角色进行处理"><a href="#3、根据角色进行处理" class="headerlink" title="3、根据角色进行处理"></a>3、根据角色进行处理</h3><p>当然，最难的就是这一步了，核心原理，就是<code>if</code>条件判断（废话），假设我们有这些角色：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ROLE_MAP = &#123;</span><br><span class="line">    <span class="number">1</span>: <span class="string">'会员'</span>,</span><br><span class="line">    <span class="number">2</span>: <span class="string">'管理员'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这是已登录用户，如未登录，则用户角色为「游客」。登录后会返回如下信息：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">"wuya"</span></span><br><span class="line">    <span class="string">"role"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用户角色为 2，表示是「管理员」，所以能够看到「删除博客」按钮。</p><p>以<code>vue</code>举例，简单在指定组件上使用<code>v-if</code>指令即可。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-if</span>=<span class="string">"hasPermission"</span>&gt;</span>删除博客<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'permission_example'</span>,</span></span><br><span class="line"><span class="undefined">    data() &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> user = localStorage.getItem(<span class="string">'user'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">            user,</span></span><br><span class="line"><span class="undefined">        &#125;;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="undefined">        hasPermission() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="keyword">this</span>.user.role === <span class="number">2</span>;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果是<code>react</code>则稍微麻烦一丢丢：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        role: <span class="number">2</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            role,</span><br><span class="line">        &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> deleteBtn = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (role === <span class="number">2</span>) &#123;</span><br><span class="line">            deleteBtn = <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除博客<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;deleteBtn&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );   </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>完美解决~下班回家</p><blockquote><p>产品：等下，我觉得吧，管理员还是不能删博客，另外再加一个「专门删博客管理员」角色，只有他能删吧。</p></blockquote><p>…好的没问题，简单。增加角色，并将<code>2</code>改成了<code>3</code>（专门删博客管理员）。</p><blockquote><p>产品：为什么博客列表页管理员还是有删除按钮啊？</p></blockquote><p>啊，博客列表页还有删除按钮啊，我再补一下。。。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlogList</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    state = &#123;</span><br><span class="line">        role: <span class="number">1</span>,</span><br><span class="line">        blogs: [],</span><br><span class="line">    &#125;</span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123;</span><br><span class="line">            role,</span><br><span class="line">            blogs,</span><br><span class="line">        &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> deleteBtn = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (role === <span class="number">3</span>) &#123;</span><br><span class="line">            deleteBtn = <span class="xml"><span class="tag">&lt;<span class="name">button</span>&gt;</span>删除博客<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;div&gt;</span><br><span class="line">                &#123;blogs.map(<span class="function"><span class="params">blog</span> =&gt;</span> (</span><br><span class="line">                    &lt;div&gt;</span><br><span class="line">                        &lt;p&gt;&#123;blog.title&#125;&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">                        &#123;deleteBtn&#125;</span></span><br><span class="line"><span class="regexp">                    &lt;/</span>div&gt;</span><br><span class="line">                ))&#125;</span><br><span class="line">            &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        );   </span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>产品：我又有个新想法。。。</p></blockquote><h2 id="四、权限组件"><a href="#四、权限组件" class="headerlink" title="四、权限组件"></a>四、权限组件</h2><p>为了避免这种枯燥且易出错的的方式，我们可以参考后端，将用以与用户交互的组件定义为「资源」，同时维护一组「角色」拥有的「资源」对照表。</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">"react"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 角色对应有什么资源的权限</span></span><br><span class="line"><span class="keyword">const</span> PERMISSION_MAP = &#123;</span><br><span class="line">  <span class="comment">// 声明会员有什么权限</span></span><br><span class="line">  <span class="number">1</span>: [],</span><br><span class="line">  <span class="comment">// 管理员拥有的权限</span></span><br><span class="line">  <span class="number">2</span>: [<span class="string">'deleteBlog'</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionWrapper</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    role: <span class="number">1</span></span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; role &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">const</span> &#123; source &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="comment">// 如果当前用户有该资源权限，就展示该组件</span></span><br><span class="line">    <span class="keyword">if</span> (PERMISSION_MAP[role].includes(source)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以在页面上使用该组件了：</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;PermissionWrapper source=<span class="string">"deleteBlog"</span>&gt;</span><br><span class="line">          &lt;button&gt;删除博客&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>PermissionWrapper&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    );</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>如果出现需求反复变更的情况，只需要编辑<code>PERMISSION_MAP</code>这一个对象即可，即使删除博客按钮会出现在多个地方。</p><p>这种方式可以减轻一部分维护成本。</p><h3 id="1、核心逻辑"><a href="#1、核心逻辑" class="headerlink" title="1、核心逻辑"></a>1、核心逻辑</h3><p>核心逻辑还是之前提到的<code>if</code>判断，只是多了一个组件，将<code>if</code>条件判断移到了该组件内。</p><p>所以任何框架都适用，再以<code>vue</code>为例，要实现上述功能，该怎么做。</p><h3 id="2、vue-实现"><a href="#2、vue-实现" class="headerlink" title="2、vue 实现"></a>2、vue 实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-if=&quot;hasPermission&quot;&gt;</span><br><span class="line">      &lt;slot name=&quot;content&quot;&gt;</span><br><span class="line">      &lt;/slot&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">const PERMISSION_MAP = &#123;</span><br><span class="line">  1: [],</span><br><span class="line">  2: [&quot;deleteBlog&quot;]</span><br><span class="line">&#125;;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Permission&quot;,</span><br><span class="line">  props: [&quot;source&quot;],</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user: &#123;</span><br><span class="line">        role: 1</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    hasPermission() &#123;</span><br><span class="line">      const &#123; role &#125; = this.user;</span><br><span class="line">      const &#123; source &#125; = this;</span><br><span class="line">      return PERMISSION_MAP[role].includes(source);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &lt;Permission source=&quot;deleteBlog&quot;&gt;</span><br><span class="line">  &lt;div slot=&quot;content&quot;&gt;</span><br><span class="line">    &lt;button&gt;删除博客&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/Permission&gt;</span><br></pre></td></tr></table></figure><h3 id="3、jQuery-实现"><a href="#3、jQuery-实现" class="headerlink" title="3、jQuery 实现"></a>3、jQuery 实现</h3><p>不同于使用框架可以决定是否渲染指定组件，采用<code>jQuery</code>只能隐藏或者移除指定的<code>DOM</code>，而且也不够优雅。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;button class=&quot;resource&quot; data-type=&quot;deleteBlog&quot;&gt;删除博客&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    const PERMISSION_MAP = &#123;</span><br><span class="line">        1: [],</span><br><span class="line">        2: [&apos;deleteBlog&apos;],</span><br><span class="line">    &#125;;</span><br><span class="line">    const user = &#123;</span><br><span class="line">        role: 1,</span><br><span class="line">    &#125;;</span><br><span class="line">    $(document).ready(function () &#123;</span><br><span class="line">        const &#123; role &#125; = user;</span><br><span class="line">        resourceDOM = $(&apos;.resource&apos;);</span><br><span class="line">        for (let i = 0, l = resourceDOM.length; i &lt; l; i += 1) &#123;</span><br><span class="line">            const resource = resourceDOM[i];</span><br><span class="line">            const type = resource.dataset.type;</span><br><span class="line">            if (!PERMISSION_MAP[role].includes(type)) &#123;</span><br><span class="line">                resource.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="五、页面访问权限"><a href="#五、页面访问权限" class="headerlink" title="五、页面访问权限"></a>五、页面访问权限</h2><p>上面实现的权限组件，似乎只能处理页面内的组件，能处理页面吗？</p><p>现在博客系统新增需求，游客无法访问所有页面，只能注册成为会员，登录后进行访问。</p><p>使用<code>vue</code>的情况下，官方推荐在路由钩子内，进入页面前对当前用户权限进行判断并处理，能够进入，或者重定向到登录页。</p><p>同样的，我们可以将「页面」视为资源，判断指定角色是否拥有该资源即可。</p><p>使用<code>react</code>则麻烦一些，由于<code>react-router</code>没有提供路由钩子，无法像<code>vue</code>一样统一处理，</p><p>但仍然可以和处理页面组件权限一样，有两种方案：</p><ul><li>1、修改页面组件</li><li>2、修改<code>Route</code>组件</li></ul><h3 id="1、修改页面组件"><a href="#1、修改页面组件" class="headerlink" title="1、修改页面组件"></a>1、修改页面组件</h3><p>下面是博客列表页的代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blogs</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">    render() &#123;</span><br><span class="line">        &lt;Permission source=<span class="string">"blog_page"</span>&gt;</span><br><span class="line">            &lt;div&gt;...原先的页面代码&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/</span>Permission&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然能够在没有权限的情况下无法看到页面了，但显示一片空白也不好，我们可以在<code>Permission</code>内不返回<code>null</code>，而根据条件比如指定当前是处理页面，就返回一个<code>NotFound</code>页面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionWrapper</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  state = &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      role: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; user &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="comment">// 声明资源类型，增加 page 参数</span></span><br><span class="line">    <span class="keyword">const</span> &#123; source, page &#125; = <span class="keyword">this</span>.props;</span><br><span class="line">    <span class="comment">// 如果当前用户有该资源权限，就展示该组件</span></span><br><span class="line">    <span class="keyword">if</span> (PERMISSION_MAP[user.role].includes(source)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.props.children;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> （page) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml">    return null;</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="2、修改-Route-组件"><a href="#2、修改-Route-组件" class="headerlink" title="2、修改 Route 组件"></a>2、修改 Route 组件</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">PermissionRoute</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; resourceName, user = &#123;&#125; &#125; = props;</span><br><span class="line">    <span class="keyword">const</span> &#123; staffType &#125; = user;</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      hasPermission: <span class="keyword">this</span>.computedHasPermission(staffType, resourceName),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  componentWillReceiveProps(nextProps) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; resourceName, user = &#123;&#125; &#125; = nextProps;</span><br><span class="line">    <span class="keyword">const</span> &#123; staffType &#125; = user;</span><br><span class="line">    <span class="keyword">const</span> hasPermission = <span class="keyword">this</span>.computedHasPermission(staffType, resourceName);</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      hasPermission,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  computedHasPermission = <span class="function">(<span class="params">staffType, resourceName</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (permission[staffType] || []).includes(resourceName);</span><br><span class="line">  &#125;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; hasPermission &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      hasPermission ? <span class="xml"><span class="tag">&lt;<span class="name">Route</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span> : <span class="tag">&lt;<span class="name">NotFound</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    );</span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>核心逻辑还是一致的，判断用户权限，如果有权限，则返回正常的<code>&lt;Route&gt;</code>，就可以渲染出预期的页面。否则显示<code>NotFound</code>页面。</p><h2 id="六、缺点"><a href="#六、缺点" class="headerlink" title="六、缺点"></a>六、缺点</h2><p>虽然解决了一部分问题，但也引入了「资源」的维护成本，对资源的描述需要足够准确，才能直观的从权限对照表中看出资源对应的组件到底是什么。</p><p>同时对于一些复杂的权限处理无法胜任，还是以「删除博客」按钮为例，博客的作者对博客有删除权限。</p><p>那么，博客删除按钮只应该出现在作者属于「当前登录用户」的博客页面，如果访问其他作者的博客详情页，只是简单判断当前用户「是否有权限」，还是能够看到「删除博客」按钮。</p><p>即不仅是「有没有权限」，还涉及到「是不是」的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现如今我们访问的每个网站，或多或少都会存在「权限控制」。&lt;/p&gt;
&lt;p&gt;以一个博客系统为例，系统内共有三种角色&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、游客&lt;/li&gt;
&lt;li&gt;2、会员&lt;/li&gt;
&lt;li&gt;3、管理员&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不同角色支持不同的操作，比如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、游客可以访问博客列表页、博客详情页&lt;/li&gt;
&lt;li&gt;2、会员除游客权限外，还可以提交博客、提交评论、对博客进行编辑、删除操作等。&lt;/li&gt;
&lt;li&gt;3、管理员除上述权限外，还可访问用户管理页对用户进行管理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上述说明「什么用户能够进行什么操作，不能进行什么操作」，可以理解为就是「权限」，根据这些权限，做出正确的处理，就是「权限控制」，而「角色」，是「权限」的集合，也方便我们对用户的定义。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>一次「错误」的 Promise 实现 - 2</title>
    <link href="http://yoursite.com/2018/04/04/%E4%B8%80%E6%AC%A1%E3%80%8C%E9%94%99%E8%AF%AF%E3%80%8D%E7%9A%84%20Promise%20%E5%AE%9E%E7%8E%B0%20-%202/"/>
    <id>http://yoursite.com/2018/04/04/一次「错误」的 Promise 实现 - 2/</id>
    <published>2018-04-04T00:00:00.000Z</published>
    <updated>2018-04-04T08:31:28.131Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="/2018/02/11/一次「错误」的%20Promise%20实现/">一次「错误」的 Promise 实现 - 1</a></li></ul><p>时隔快两月，才产出了第二篇。在实际写博客中，发现<code>Promise</code>实在太难了，初稿在 2/18 就开始写，写到「链式调用」，发现自己还是对原理不够了解，于是耽搁了许久。期间又看了《你不知道的 JavaScript（中卷）》关于异步的部分，深觉自己的浅薄。</p><p>我们总是说回调不好用，因为回调地狱，但是回调也可以不写成回调地狱，只是写法问题，如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">foo(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        foo(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'callback hell'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以写成这样</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo(handler2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    foo(handler3);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handler3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'callback hell?'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">foo(handler1);</span><br></pre></td></tr></table></figure><p>而且本质上来说，<code>Promise</code>也是回调啊，<code>Promise</code>究竟在内部做了什么事情，让我们非常乐意接受了呢？</p><a id="more"></a><h2 id="核心机制"><a href="#核心机制" class="headerlink" title="核心机制"></a>核心机制</h2><p>之前的「错误」实现，核心在于<code>resolve</code>里面的条件判断与两个全局变量。</p><p>更合理的实现是将需要的变量保存在对象上或者局部作用域，同时也将状态补充进来。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  0 - Pending   即「处理中」</span></span><br><span class="line"><span class="comment"> *  1 - Fulfilled 即「成功」</span></span><br><span class="line"><span class="comment"> *  2 - Rejected  即「失败」</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="comment">// 开始状态为 「处理中」</span></span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        fn(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只是多了<code>_state</code>和<code>reject</code>，一切看起来还好。</p><h3 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilled = onFulfilled;</span><br><span class="line">        <span class="keyword">this</span>.onRejected = onRejected;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        fn(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多增加了<code>Handler</code>类，不将<code>onFulfilled</code>保存到全局<code>globalResolved</code>变量了，而是保存到<code>this.handler</code>变量上。</p><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue, self</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 到了这里，就表示「成功」，需要改变 promise 的状态了，增加 self 参数为 promise 实例</span></span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 值`newValue`也不保存到全局变量`globalParam`，也保存到`promise`实例上。</span></span><br><span class="line">    self._value = newValue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  0 - Pending</span></span><br><span class="line"><span class="comment"> *  1 - Fulfilled</span></span><br><span class="line"><span class="comment"> *  2 - Rejected</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// fn(resolve, reject);</span></span><br><span class="line">        fn(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                resolve(value, self);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                reject(reason, self);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后就可以调用<code>onFulfilled</code>了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue, self</span>) </span>&#123;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    self._value = newValue;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> handler = self.handler;</span><br><span class="line">    <span class="keyword">const</span> fn = handler.onFulfilled;</span><br><span class="line">    fn(self._value); <span class="comment">// 调用 onFulfilled</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但实际执行时，<code>handler</code>是<code>undefined</code>导致报错：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var fn = handler.onFulfilled;</span><br><span class="line">                 ^</span><br><span class="line"></span><br><span class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">'onFulfilled'</span> of undefined</span><br></pre></td></tr></table></figure><p>这就是在之前也遇到过的，<code>resolve</code>想通知<code>resolved</code>时发现<code>resolved</code>还没有出现的问题。</p><p>之前是通过<code>resolve</code>中的 4 个条件分支进行处理，而更合理的实现是增加<code>this._deferredState</code>变量，根据该变量进行区分，该变量有两个状态：</p><ul><li>0 - 初始化时的值，表示初始化状态</li><li>1 - 完成同步代码的执行，等待异步代码执行完成并调用 <code>resolve</code> 或 <code>reject</code></li></ul><p>那么在什么时候改变这个状态呢？答案是<code>then()</code>调用时，并且也要调用一次<code>resolve</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected);</span><br><span class="line">    <span class="keyword">this</span>._deferredState = <span class="number">1</span>;</span><br><span class="line">    handleResolve(<span class="keyword">this</span>, <span class="keyword">this</span>.handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue, self</span>) </span>&#123;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    self._value = newValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self._deferredState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = self.handler;</span><br><span class="line">        <span class="keyword">const</span> fn = handler.onFulfilled;</span><br><span class="line">        fn(self._value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilled = onFulfilled;</span><br><span class="line">        <span class="keyword">this</span>.onRejected = onRejected;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// fn(resolve, reject);</span></span><br><span class="line">        fn(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                resolve(value, self);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                reject(reason, self);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected);</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">1</span>;</span><br><span class="line">        onFulfilled(<span class="keyword">this</span>._value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'b'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>能够成功打印<code>hello</code>，但是改成异步就出问题了，先打印了<code>undefined</code>，再打印了<code>hello</code>。</p><p>测试用例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'b'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res); <span class="comment">// 会先调用这里，打印 undefined，待 resolve 执行后，再次打印 b</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p><p>所以在<code>then</code>内，还要增加判断是否调用了<code>resolve</code>，即我们之前判断是否有<code>globalParam</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">self, newValue</span>) </span>&#123;</span><br><span class="line">    self._value = newValue;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 要等 then 调用后才能拿到 handler</span></span><br><span class="line">    <span class="keyword">if</span> (self._deferredState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = self.handler.onFulfilled;</span><br><span class="line">        fn(newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilled  = onFulfilled;</span><br><span class="line">        <span class="keyword">this</span>.onRejected = onRejected;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">0</span>;</span><br><span class="line">        fn(</span><br><span class="line">            (value) =&gt; &#123;</span><br><span class="line">                resolve(<span class="keyword">this</span>, value);</span><br><span class="line">            &#125;,</span><br><span class="line">            (reason) =&gt; &#123;</span><br><span class="line">                reject(<span class="keyword">this</span>, reason);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected);</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 这里增加判断，如果 this._state ，必然是调用了 resolve 函数</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._state === <span class="number">1</span>) &#123;</span><br><span class="line">            onFulfilled(<span class="keyword">this</span>._value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但没有解决最核心的问题，异步。</p><p>需要将<code>onFulfilled</code>的调用改成在另一个任务队列中，简单的做法就是使用<code>setTimeout</code>包一层，变成了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    onFulfilled(<span class="keyword">this</span>._value);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>完成后的新代码与之前的代码做对比：<br><img src="/blog/2018/04/04/一次「错误」的 Promise 实现 - 2/15189691761623.jpg" alt="对比图"></p><p>可以看到使用<code>_state</code>替代对<code>value</code>是否存在的判断；使用<code>_deferredState</code>替代<code>then</code>是否调用的判断。</p><p>上篇最后的测试用例就能够符合预期了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    resolve(<span class="string">'b'</span>);</span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     resolve('b');</span></span><br><span class="line">    <span class="comment">// &#125;, 1000);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br></pre></td></tr></table></figure><p>结果为：start、a、c、end、b。</p><h2 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h2><p>下面代码会打印什么？请说出代码执行流程。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准 Promise</span></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'a'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>答案是 ‘a’，第二个<code>then</code>获取到了开始<code>resolve(&#39;a&#39;)</code>的值，这是为什么呢？</p><p>就结果而言，我们可以猜测第一个<code>then</code>其实是返回了一个新的<code>Promise</code>实例，如果我们的代码要实现链式调用，会是这样的吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected);</span><br><span class="line">    <span class="keyword">this</span>._deferredState = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>._state === <span class="number">1</span>) &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            onFulfilled(<span class="keyword">this</span>._value);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FakePromise(???);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么传什么参数呢？我们只需要一个<code>_state === 1</code>的<code>promise</code>实例，并没有要处理的逻辑。所以直接在构造函数处就可以中断了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">noop</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (fn === noop) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// fn(resolve, reject);</span></span><br><span class="line">        fn(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                resolve(value, self);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                reject(reason, self);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，可以认为，调用第二个<code>then</code>的<code>Promise</code>实例，「接收」了第一个<code>then</code>返回的值，这样才能在第二个<code>then</code>内拿到开始<code>resolve</code>的值。</p><p>那么问题来了，怎么「接收」呢？可能是在哪个步骤做这件事情呢？</p><p>而且，第一个<code>then</code>的函数是肯定被调用了，所以是在<code>resolve</code>中处理吗？</p><h3 id="resolve-1"><a href="#resolve-1" class="headerlink" title="resolve"></a>resolve</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue, self</span>) </span>&#123;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    self._value = newValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self._deferredState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = self.handler;</span><br><span class="line">        <span class="keyword">const</span> fn = handler.onFulfilled;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = fn(self._value);</span><br><span class="line">            <span class="comment">// &lt;-- 3、除了调用 fn 外，还要将 value 传给 then 内实例化的 promise</span></span><br><span class="line">            <span class="comment">// 和 handler.onFulfilled 一样，可以将其保存在 handler 实例上</span></span><br><span class="line">            handler.promise._value = value;</span><br><span class="line">            handler.promise._state = <span class="number">1</span>;</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(onFulfilled, onRejected, promise) &#123;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilled = onFulfilled;</span><br><span class="line">        <span class="keyword">this</span>.onRejected = onRejected;</span><br><span class="line">        <span class="comment">// &lt;-- 这里新增 </span></span><br><span class="line">        <span class="keyword">this</span>.promise = promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        <span class="keyword">this</span>._state = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (fn === noop) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">const</span> self = <span class="keyword">this</span>;</span><br><span class="line">        <span class="comment">// fn(resolve, reject);</span></span><br><span class="line">        fn(</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">                resolve(value, self);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="function"><span class="keyword">function</span> (<span class="params">reason</span>) </span>&#123;</span><br><span class="line">                reject(reason, self);</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="comment">// &lt;-- 1、生成新的 promise 实例 </span></span><br><span class="line">        <span class="keyword">const</span> p = <span class="keyword">new</span> FakePromise(noop);</span><br><span class="line">        <span class="comment">// &lt;-- 2、保存在 handler 上</span></span><br><span class="line">        <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected, p);</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._state === <span class="number">1</span>) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                onFulfilled(<span class="keyword">this</span>._value);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在<code>then</code>方法的最后，返回了一个新的<code>Promise</code>实例，调用第二个<code>then</code>实际上是调用的这个实例的<code>then</code>方法。</p><p>测试用例代码可以理解为这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a1 = <span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'a'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> a2 = a1.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;);</span><br><span class="line">a2.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>所以<code>a2</code>在调用<code>then</code>时，是也实际调用了<code>then</code>方法，但此时<code>a2._state !== 1</code>，所以没有调用。那什么时候调用呢？</p><p>由于<code>a2._value</code>要有值，所以肯定是在<code>a1.then</code>的参数调用后，即还是<code>resolve</code>里面。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue, self</span>) </span>&#123;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    self._value = newValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self._deferredState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = self.handler;</span><br><span class="line">        <span class="keyword">const</span> fn = handler.onFulfilled;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = fn(self._value);</span><br><span class="line">            <span class="comment">// &lt;-- 3、除了调用 fn 外，还要将 value 传给 then 内实例化的 promise</span></span><br><span class="line">            <span class="comment">// 和 handler.onFulfilled 一样，可以将其保存在 handler 实例上</span></span><br><span class="line">            handler.promise._value = value;</span><br><span class="line">            handler.promise._state = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// &lt;-- 4、handler.promise 也有 handler 实例，该实例上也有 onFulfilled</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                handler.promise.handler.onFulfilled(value);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改后，继续执行测试用例，得到我们想要的结果！！但是如果存在第三个<code>then</code>，就 GG 了。。。这是因为我们只处理了「两层」，什么意思呢，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">newValue, self</span>) </span>&#123;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    self._value = newValue;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (self._deferredState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> handler = self.handler;</span><br><span class="line">        <span class="keyword">const</span> fn = handler.onFulfilled;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> value = fn(self._value);</span><br><span class="line">            handler.promise._value = value;</span><br><span class="line">            handler.promise._state = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">// &lt;-- 4、handler.promise 也有 handler 实例，该实例上也有 onFulfilled</span></span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                handler.promise.handler.onFulfilled(value);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>handler.promise.handler.onFulfilled(value);</code>这里，其实应该拿到调用成功的值<code>thirdValue</code>，再执行一次：</p><p><code>handler.promise.handler.promise.handler.onFulfilled(thirdValue)</code>，这样有三个<code>then</code>也能处理，但是四个就处理不了了。。。所以我们代码思路是正确的，但是写法有问题，下面就对我们的代码进行优化，抽离重复的部分。</p><h3 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h3><p>将<code>resolve</code>拆成两个函数，<code>resolve</code>只负责一件事，改变<code>promise</code>实例状态为「成功」。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">self, newValue</span>) </span>&#123;</span><br><span class="line">    self._state = <span class="number">1</span>;</span><br><span class="line">    self._value = newValue;</span><br><span class="line">    </span><br><span class="line">    handleResolve(self, self.handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>handleResolve</code>只负责调用回调。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleResolve</span>(<span class="params">self, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (self._deferredState === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> cb = self._state === <span class="number">1</span> ? handler.onFulfilled : handler.onRejected;</span><br><span class="line">        <span class="keyword">const</span> ret = cb(self._value);</span><br><span class="line">        resolve(handler.promise, ret);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样无论几个<code>then</code>，都能够正确处理了。</p><p>但是如下测试用例又不行了。。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'success'</span>);</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>不过回头看代码，很容易就定位到是因为在<code>then</code>方法内没有正确处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    then(onFulfilled, onRejected) &#123;</span><br><span class="line">        <span class="keyword">const</span> p = <span class="keyword">new</span> FakePromise(noop);</span><br><span class="line">        <span class="keyword">this</span>.handler = <span class="keyword">new</span> Handler(onFulfilled, onRejected, p);</span><br><span class="line">        <span class="keyword">this</span>._deferredState = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>._state === <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">            <span class="comment">//     onFulfilled(this._value);</span></span><br><span class="line">            <span class="comment">// &#125;, 0);</span></span><br><span class="line">            handleResolve(<span class="keyword">this</span>, <span class="keyword">this</span>.handler);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>OK，虽然代码还存在很多问题，不过也留在后面优化。</p><p>本篇博客，我们在之前「错误」的基础上，首先改进了<code>then</code>的参数不是异步调用这个问题。</p><blockquote><p>但实际上<code>then</code>的参数异步调用不能使用<code>setTimeout</code>，因为在规范中，<code>setTimeout</code>异步属于<code>macroTask</code>，而<code>then</code>参数的异步应该是<code>microTask</code>。</p></blockquote><p>接下来，我们探索了「链式调用」的原理，并做了简单实现，对<code>then</code>的返回值有了更深的理解。</p><h2 id="下篇预告"><a href="#下篇预告" class="headerlink" title="下篇预告"></a>下篇预告</h2><p>如果对同一个<code>Promise</code>实例调用两次<code>then</code>方法，会发生什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">'value'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">instance.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">instance.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>会打印两次<code>value</code>吗，如果是这样呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> instance = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'value'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line">instance.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">instance.then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>首先你预期的结果是什么，真实结果是什么，为什么？我们上面的实现能处理这种情况吗？</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/then/promise" target="_blank" rel="noopener">Bare bones Promises/A+ implementation</a> </li></ul>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;/2018/02/11/一次「错误」的%20Promise%20实现/&quot;&gt;一次「错误」的 Promise 实现 - 1&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;时隔快两月，才产出了第二篇。在实际写博客中，发现&lt;code&gt;Promise&lt;/code&gt;实在太难了，初稿在 2/18 就开始写，写到「链式调用」，发现自己还是对原理不够了解，于是耽搁了许久。期间又看了《你不知道的 JavaScript（中卷）》关于异步的部分，深觉自己的浅薄。&lt;/p&gt;
&lt;p&gt;我们总是说回调不好用，因为回调地狱，但是回调也可以不写成回调地狱，只是写法问题，如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;foo(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        foo(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;callback hell&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 可以写成这样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler1&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo(handler2);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler2&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foo(handler3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;handler3&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;callback hell?&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;foo(handler1);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;而且本质上来说，&lt;code&gt;Promise&lt;/code&gt;也是回调啊，&lt;code&gt;Promise&lt;/code&gt;究竟在内部做了什么事情，让我们非常乐意接受了呢？&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>一次「错误」的 Promise 实现 - 1</title>
    <link href="http://yoursite.com/2018/02/11/%E4%B8%80%E6%AC%A1%E3%80%8C%E9%94%99%E8%AF%AF%E3%80%8D%E7%9A%84%20Promise%20%E5%AE%9E%E7%8E%B0/"/>
    <id>http://yoursite.com/2018/02/11/一次「错误」的 Promise 实现/</id>
    <published>2018-02-11T00:00:00.000Z</published>
    <updated>2018-02-18T15:07:31.576Z</updated>
    
    <content type="html"><![CDATA[<p><code>Promise</code>在日常中经常用到，并且也能够熟练使用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'a'</span>)</span><br><span class="line">  resolve(<span class="string">'b'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'c'</span>)</span><br><span class="line">&#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>上面代码会依次打印<code>a、c、b</code>，对此我们都毫无疑义。</p><p>但是为什么呢？我们能自己实现一个<code>Promise</code>库吗？</p><a id="more"></a><h2 id="「错误」的实现"><a href="#「错误」的实现" class="headerlink" title="「错误」的实现"></a>「错误」的实现</h2><p>不参考任何教程、代码，只从上面的结果推理出<code>Promise</code>是什么样的，或许正确，或许错误。但这也是最有趣的地方，完成后可以与其他<code>Promise</code>库对照，差距究竟差在哪。</p><blockquote><p>读者，也就是你，如果真的想对<code>Promise</code>深入了解，更正确的做法也是自己手撸一个，而不是从各种「二手信息」（包括此文）中学习。</p></blockquote><p>话不多说，开始探索之旅。</p><h3 id="Promise-类"><a href="#Promise-类" class="headerlink" title="Promise 类"></a>Promise 类</h3><p>首先分析上面的代码，很容易看出是先调用<code>new</code>关键字生成<code>Promise</code>实例，并执行传入的参数，假设形参是<code>fn</code>。</p><p>然后调用得到的实例上的<code>then</code>方法，也传入一个参数，该参数也会被调用，假设该形参为<code>resolved</code>。</p><p>所以<code>Promise</code>类应该是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 用 FakePromise 避免覆盖原生的 Promise</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(resolved) &#123;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>而我们又知道，在调用<code>new</code>关键字时，马上就会打印<code>a、c</code>，这表示传入的参数<code>fn</code>被立即调用了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    fn();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并且该函数有形参<code>resolve</code>会被调用时使用，所以在调用<code>fn</code>时还要传入实参<code>resolve</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    fn(resolve);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么问题来了，这个<code>resolve</code>实参是哪里来的？或许是在全局的一个函数？那么试试看好了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        fn(resolve);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(resolved) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用开始的实例测试一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    resolve(<span class="string">'b'</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><p>bingo！没有报错就是好的开始，好的开始就是成功了一半~~~</p><h3 id="then-方法"><a href="#then-方法" class="headerlink" title="then 方法"></a>then 方法</h3><p>继续，我们从开始的例子打印的结果<code>a、c、b</code>可以知道在调用<code>then</code>方法后，也会调用传入的参数<code>resolved</code>，并且还接受一个参数，该参数为<code>constructor</code>内<code>resolve</code>的实参。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        fn(resolve);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(resolved) &#123;</span><br><span class="line">        resolved(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15182655749667.jpg" alt="resolved的参数即resolve的实参"></p><p>整体观察一下，在「1」调用了「2」，此时「2」是可以拿到<code>b</code>这个参数的，是否可以将参数保存起来作为全局变量，在「3」处使用呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> globalParam = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    globalParam = param;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        fn(resolve);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(resolved) &#123;</span><br><span class="line">        resolved(globalParam);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再实际测试一下，成功打印<code>a、c、b</code>！！实际的<code>Promise</code>就这么简单吗？</p><p>用复杂些的例子测试：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    <span class="comment">// resolve('b');</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        resolve(<span class="string">'b'</span>);</span><br><span class="line">    &#125;, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// c</span></span><br><span class="line"><span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>结果是<code>&#39;a&#39;、&#39;c&#39;、null</code>，此时流程是这样的（按执行顺序）：</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15182662332911.jpg" alt="流程图"></p><p><code>resolved</code>在<code>resolve</code>前执行，导致<code>globalParam = param</code>没有执行，所以传入的是<code>null</code>。</p><h3 id="then-与-resolve-的顺序"><a href="#then-与-resolve-的顺序" class="headerlink" title="then 与 resolve 的顺序"></a>then 与 resolve 的顺序</h3><p>问题出在哪里呢？</p><p>可以想到，必须要<code>resolve(&#39;b&#39;)</code>执行完后，才能调用<code>resolved</code>。</p><blockquote><p>resolved: hi，resolve，执行了吗？<br>resolve: 还没呢，再等会，要不然我通知你吧，不然你每隔一秒就来问也挺累的。<br>resolved: 那成，麻烦你了啊老铁</p></blockquote><p>按照这个思路，修改下代码，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> globalResolved = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (globalResolved) &#123;</span><br><span class="line">        globalResolved(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        fn(resolve);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(resolved) &#123;</span><br><span class="line">        <span class="comment">// resolved(globalParam);</span></span><br><span class="line">        <span class="comment">// 这里不能立即调用 resolve，必须等 resolve 通知</span></span><br><span class="line">        <span class="comment">// 那就先保存起来</span></span><br><span class="line">        globalResolved = resolved;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>then</code>方法内，不立即执行传入的<code>resolved</code>了，而是保存起来，等待<code>resolve</code>执行完成后再调用，就实现了「<code>resolve</code>通知<code>resolved</code>」。</p><p>实际测试发现在打印<code>&#39;c&#39;</code>后延迟 1s 后打印了<code>&#39;b&#39;</code>。</p><p>但是发现使用开始的例子测试又出问题了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    resolve(<span class="string">'b'</span>);</span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     resolve('b');</span></span><br><span class="line">    <span class="comment">// &#125;, 1000);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// a</span></span><br><span class="line"><span class="comment">// c</span></span><br></pre></td></tr></table></figure><p>只打印了<code>&#39;a&#39;、&#39;c&#39;</code>，这是因为先执行<code>resolve(&#39;b&#39;)</code>后才执行<code>resolved()</code>。</p><p>用上面的例子来说，就是<code>resolve</code>想要通知<code>resolved</code>时发现<code>resolved</code>还没出现。。。</p><blockquote><p>resolve: 老铁，你要的参数来了，老铁呢？</p></blockquote><h3 id="「成功」的实现"><a href="#「成功」的实现" class="headerlink" title="「成功」的实现"></a>「成功」的实现</h3><p>如果这样，还要判断<code>then</code>是否执行？</p><p>捋一捋，首先我们可以认为两个函数是同时执行的（同一个 task）</p><ul><li>constructor</li><li>then</li></ul><p>当调用<code>then</code>的实参<code>resolved</code>时，<code>constructor</code>的实参<code>fn</code>内可能还有函数<code>setTimeout</code>在执行。</p><p>所以是全局<code>resolve</code>的调用时间不确定，只能在它调用时去通知<code>resolved</code>，并且还要判断<code>resolved</code>是否存在。</p><p><img src="http://oyy3cbpm3.bkt.clouddn.com/15182672169883.jpg" alt="可能的流程图"></p><p>思路没有问题，回顾下之前的实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一次的尝试，由 then 的参数 resolved 通知</span></span><br><span class="line"><span class="keyword">let</span> globalParam = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    globalParam = param;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 第二次的尝试，由 resolve 通知</span></span><br><span class="line"><span class="keyword">let</span> globalResolved = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (globalResolved) &#123;</span><br><span class="line">        globalResolved(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果把这两者结合起来呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> globalParam = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> globalResolved = <span class="literal">null</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">param</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 2</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> param === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="comment">// 3</span></span><br><span class="line">        <span class="keyword">if</span> (globalParam) &#123;</span><br><span class="line">            param(globalParam);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        globalResolved = param;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4</span></span><br><span class="line">    <span class="keyword">if</span> (globalResolved) &#123;</span><br><span class="line">        globalResolved(param);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 1</span></span><br><span class="line">    globalParam = param;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FakePromise</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">        fn(resolve);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    then(resolved) &#123;</span><br><span class="line">        resolve(resolved);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>思路就是分两种情况，</p><p>1、假设<code>constructor</code>内的<code>resolve</code>先执行了，此时还没有<code>globalResolved</code>，就保存<code>param</code>，即上面代码的「1」。</p><p>然后会执行到<code>then</code>方法中的<code>resolve(resolved)</code>，「2」「3」处的条件为真，成功。</p><p>2、假设先执行了<code>then</code>的<code>resolve(resolved)</code>，能够通过「2」的条件判断，但是无法通过「3」，所以保存了参数到<code>globalResolved</code>变量中。然后执行到了<code>constructor</code>内的<code>resolve</code>，「4」条件为真，也能够成功打印。</p><p>总之<code>resolve</code>必须要被调用两次。</p><p>代码在两种情况下都能够成功打印需要的结果，但仔细思考，如果<code>constructor</code>内的<code>resolve</code>参数是一个函数呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    resolve(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'i am function'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     resolve('b');</span></span><br><span class="line">    <span class="comment">// &#125;, 1000);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h3 id="各种错误"><a href="#各种错误" class="headerlink" title="各种错误"></a>各种错误</h3><p>脑洞告一段落，虽然「实现」了需要的功能，但实际上并没有按照规范来，比如我们都知道<code>Promise</code>在执行过程中是有「状态」的，并且必然是以下其中一种状态</p><ul><li>Pending</li><li>Fulfilled</li><li>Rejected</li></ul><p>参考 <a href="https://github.com/then/promise" target="_blank" rel="noopener">Bare bones Promises/A+ implementation</a> 发现核心原理和上面的类似，除了一些潜在的<code>bug</code>、没有状态等等，一个最大的问题是代码都是<strong>同步执行</strong>，即在一个 task 中，而规范要求</p><blockquote><p>实践中要确保 onFulfilled 和 onRejected 方法异步执行，且应该在 then 方法被调用的那一轮事件循环之后的新执行栈中执行。</p></blockquote><p>举个例子，下面的代码执行结果是什么？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'start'</span>);</span><br><span class="line"><span class="comment">// 上面「错误」的 Promise 实现</span></span><br><span class="line"><span class="keyword">new</span> FakePromise(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'a'</span>);</span><br><span class="line">    resolve(<span class="string">'b'</span>);</span><br><span class="line">    <span class="comment">// setTimeout(() =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     resolve('b');</span></span><br><span class="line">    <span class="comment">// &#125;, 1000);</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'c'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'end'</span>);</span><br></pre></td></tr></table></figure><p>先仔细思考下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// 想清楚了？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 确定吗？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 确定你确定你想清楚了？</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 好吧，来看答案</span><br></pre></td></tr></table></figure><p>在使用自己实现的<code>FakePromise</code>时，输出为：<code>&#39;start&#39;、&#39;a&#39;、&#39;b&#39;、&#39;c&#39;、&#39;end&#39;</code>。</p><p>将上面代码的<code>FakePromise</code>改为原生的<code>Promise</code>即可查看到正确的输出为：<code>&#39;start&#39;、&#39;a&#39;、&#39;c&#39;、&#39;end&#39;、&#39;b&#39;</code>。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实<code>Promise</code>也没有想象的难，花一些时间就能够实现。但相比实现了，更重要的是探索的过程，以及对于「规范」的了解。</p><p>下一篇将<code>FakePromise</code>改造成「正确」的<code>Promise</code>实现，敬请期待~</p><blockquote><p>对于上面答案有疑义的可以看 <a href="http://ftandy.com/2015/08/23/2015-08-23-tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules(译)</a> 这篇。</p></blockquote><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://malcolmyu.github.io/malnote/2015/06/12/Promises-A-Plus/" target="_blank" rel="noopener">【翻译】Promises/A+规范</a></li><li><a href="http://ftandy.com/2015/08/23/2015-08-23-tasks-microtasks-queues-and-schedules/" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules(译)</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;Promise&lt;/code&gt;在日常中经常用到，并且也能够熟练使用：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;resolve&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  resolve(&lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;).then(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;data&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;上面代码会依次打印&lt;code&gt;a、c、b&lt;/code&gt;，对此我们都毫无疑义。&lt;/p&gt;
&lt;p&gt;但是为什么呢？我们能自己实现一个&lt;code&gt;Promise&lt;/code&gt;库吗？&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>可视化布局工具有价值吗？</title>
    <link href="http://yoursite.com/2018/02/09/%E5%8F%AF%E8%A7%86%E5%8C%96%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/02/09/可视化布局/</id>
    <published>2018-02-09T00:00:00.000Z</published>
    <updated>2018-02-09T09:36:07.555Z</updated>
    
    <content type="html"><![CDATA[<p>可视化布局虽然已经发展很久，但一直没有出现被大量使用的平台或工具，而实际上这类需求确确实实存在，那么，这类可视化布局工具到底有没有价值呢？</p><a id="more"></a><p>我们先来做一个需求。假设现在需要开发一个应用，该应用用于信息录入，分为「客户信息录入页」、「商品信息录入页」、「活动创建页」、「申请培训页」等，每个页面需要用户填写信息。以「申请培训页」为例：<br><img src="http://oyy3cbpm3.bkt.clouddn.com/15180626174328.jpg" alt=""><br>其他页面类似，区别只在于要填写的内容不同。</p><p>确认好每个字段的标题、字段名、校验项等等之后就可以开始编码了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;FormItem &#123;...formItemLayout&#125; label=<span class="string">"培训时间"</span>&gt;</span><br><span class="line">&#123;getFieldDecorator(<span class="string">'range'</span>, &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      required: <span class="literal">true</span>,</span><br><span class="line">      message: <span class="string">'请选择起止日期'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;)(</span><br><span class="line">  &lt;RangePicker</span><br><span class="line">    style=&#123;&#123; <span class="attr">width</span>: <span class="string">'100%'</span> &#125;&#125;</span><br><span class="line">    placeholder=&#123;[<span class="string">'开始日期'</span>, <span class="string">'结束日期'</span>]&#125;</span><br><span class="line">  /&gt;,</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">&lt;FormItem &#123;...formItemLayout&#125; label="培训类型"&gt;</span></span><br><span class="line"><span class="regexp">&#123;getFieldDecorator('trainType', &#123;</span></span><br><span class="line"><span class="regexp">  rules: [</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      required: true,</span></span><br><span class="line"><span class="regexp">      message: '请输入培训类型',</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  ],</span></span><br><span class="line"><span class="regexp">&#125;)(</span></span><br><span class="line"><span class="regexp">  &lt;Input placeholder="请输入培训类型" /</span>&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">&lt;FormItem &#123;...formItemLayout&#125; label="培训对象"&gt;</span></span><br><span class="line"><span class="regexp">&#123;getFieldDecorator('trainTarget', &#123;</span></span><br><span class="line"><span class="regexp">  rules: [</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      required: true,</span></span><br><span class="line"><span class="regexp">      message: '请输入培训对象',</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  ],</span></span><br><span class="line"><span class="regexp">&#125;)(</span></span><br><span class="line"><span class="regexp">  &lt;Input placeholder="请输入培训对象" /</span>&gt;</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">&lt;FormItem &#123;...formItemLayout&#125; label="培训师"&gt;</span></span><br><span class="line"><span class="regexp">&#123;getFieldDecorator('trainer')(</span></span><br><span class="line"><span class="regexp">  &lt;Input placeholder="请填写培训师" /</span>&gt;,</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">&lt;FormItem &#123;...formItemLayout&#125; label="对接人"&gt;</span></span><br><span class="line"><span class="regexp">&#123;getFieldDecorator('liaison')(</span></span><br><span class="line"><span class="regexp">  &lt;Input placeholder="请填写对接人" /</span>&gt;,</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/FormItem&gt;</span></span><br><span class="line"><span class="regexp">&lt;FormItem &#123;...formItemLayout&#125; label="培训需求"&gt;</span></span><br><span class="line"><span class="regexp">&#123;getFieldDecorator('requirement', &#123;</span></span><br><span class="line"><span class="regexp">  rules: [</span></span><br><span class="line"><span class="regexp">    &#123;</span></span><br><span class="line"><span class="regexp">      required: true,</span></span><br><span class="line"><span class="regexp">      message: '请输入培训需求',</span></span><br><span class="line"><span class="regexp">    &#125;,</span></span><br><span class="line"><span class="regexp">  ],</span></span><br><span class="line"><span class="regexp">&#125;)(</span></span><br><span class="line"><span class="regexp">  &lt;TextArea</span></span><br><span class="line"><span class="regexp">    style=&#123;&#123; minHeight: 32 &#125;&#125;</span></span><br><span class="line"><span class="regexp">    placeholder="请输入培训需求"</span></span><br><span class="line"><span class="regexp">    rows=&#123;4&#125;</span></span><br><span class="line"><span class="regexp">  /</span>&gt;,</span><br><span class="line">)&#125;</span><br><span class="line">&lt;<span class="regexp">/FormItem&gt;</span></span><br></pre></td></tr></table></figure><p>每个字段、甚至每个页面的代码都大同小异，如果是你，是不是已经意识到要做点什么来简化这一「无聊」的工作呢？</p><ul><li>写一个「基础」模板，复制多个并做调整</li><li>命令行根据配置项生成代码</li><li>图形界面通过拖拽生成代码</li></ul><p>我更倾向于第三个，所以有了这篇讨论，《可视化布局工具有价值吗？》</p><h2 id="什么是可视化布局"><a href="#什么是可视化布局" class="headerlink" title="什么是可视化布局"></a>什么是可视化布局</h2><p>先来谈谈什么是可视化布局。</p><p>狭义的说，在图形界面，通过交互「堆叠」一些「区块」，即可得到对应的代码。</p><p>广义上来说，就是「所见即所得」。</p><p>如富文本编辑器，输入文本，调整样式即可生成<code>html</code>代码，该代码可以直接在网页中使用，复现在富文本编辑器中的样式。</p><p>而我们最经常使用的<code>bootstrap</code>与<code>antd</code>在某种程度上来说也是「可视化布局」。</p><h3 id="bootstrap"><a href="#bootstrap" class="headerlink" title="bootstrap"></a>bootstrap</h3><p>对于<code>bootstrap</code>这个项目，有非常多值得谈论的话题，最突出的一点是没有前端基础也能够与<code>jQuery</code>搭配快速搭建中后台应用，深受后端开发的喜爱。</p><p>以一个分页来说，只要拷贝对应的代码即可实现指定的样式。<br><img src="http://oyy3cbpm3.bkt.clouddn.com/15178909494893.jpg" alt="bootstrap pagination"></p><h3 id="antd"><a href="#antd" class="headerlink" title="antd"></a>antd</h3><p>使用<code>antd</code>实现一个分页变得更为简单。<br><img src="http://oyy3cbpm3.bkt.clouddn.com/15178909987198.jpg" alt="antd pagination"></p><h2 id="所以呢？"><a href="#所以呢？" class="headerlink" title="所以呢？"></a>所以呢？</h2><p>无论<code>bootstrap</code>还是<code>antd</code>，都是要实际写代码的，怎么能说是可视化呢？</p><p>但仔细思考，在静态页面的开发上，可以不写代码了，不写<code>CSS</code>代码，写的都是<code>html</code>或者组件代码。</p><p>而可视化布局的最终目标，不仅是不写样式代码，<code>html</code>或者组件代码也不用写。</p><p>上面提到，<code>antd</code>实现一个分页组件变得更加简单了，因为<code>antd</code>是比<code>bootstrap</code>更高一层的解决方案。</p><blockquote><p>可能在这里用 <a href="https://react-bootstrap.github.io/" target="_blank" rel="noopener">react-bootstrap</a> 替代 <a href="https://ant.design/index-cn" target="_blank" rel="noopener">ant design</a> 会更恰当些。</p></blockquote><p>从开发的简单程度来说，可视化要比<code>antd</code>更高一层，是对<code>antd</code>这类组件库使用的简化。从这一点来说，可视化布局是有价值的。</p><h2 id="为什么不使用可视化布局"><a href="#为什么不使用可视化布局" class="headerlink" title="为什么不使用可视化布局"></a>为什么不使用可视化布局</h2><p>说了这么多，但所谓的「可视化布局」也有很长一段时间的发展了，并没有像<code>antd</code>这类工具普及，是为什么呢？</p><p>抛开使用场景谈论一个东西好坏是没有意义的，就好像问<code>antd</code>有用吗，对于没有设计的项目来说，非常有用，而对于有设计的项目来说，价值并没有前者那么大。</p><p>可视化布局也是如此，在官网 or 活动页的开发中能起到的作用没有在中后台应用开发中的作用大。</p><p>虽然这么说，却也没有听说有成熟的方案能够让我们放心在中后台应用中使用，就好像使用<code>antd</code>一样。会有哪些可能的原因呢？</p><ul><li>无法满足需求</li><li>上手难度大（整个工具太复杂）</li><li>不好迭代（整个生命周期都在工具内管理、页面数据保存在数据库）</li></ul><p>这些是我实际遇到的问题，使用过一个这类工具，能够在该工具内完成包括页面搭建到读取数据库的所有操作。经过一段时间的培训后，考试的题目是开发一个请假审批应用，需求如下：</p><blockquote><p>员工可以在线填写请假申请，该申请会被发送到指定主管处审批，三天以内上级领导，超过三天部门领导。主管可选择通过或退回。被退回后员工需要编辑后重新提交。</p></blockquote><p>emmm…</p><p>整体来说其实还好，在某些需求下能快速完成开发上线。却不是我想要的工具，怎么样才算一个好用的工具呢？</p><h2 id="好用的可视化"><a href="#好用的可视化" class="headerlink" title="好用的可视化"></a>好用的可视化</h2><p>首先它只是一个工具，是用来帮助我们简化一部分开发工作。</p><p>还是以<code>bootstrap</code>与<code>antd</code>为例，<code>bootstrap</code>通过复制一段代码与引入样式文件，可以快速实现一个美观的组件。在这个过程中，<code>bootstrap</code>的作用是帮助我完成了样式部分的代码，整个过程对于我而言是透明的，我可以随时任意的修改它。</p><p><code>antd</code>相比<code>bootstrap</code>更方便，但也多了更多的限制。比如变得更为复杂，无法随意修改源码等。但它仍然帮助我们完成了将<code>react 组件</code>与<code>ui</code>库整合的工作，否则我们就需要自己写了。</p><p>所以理想的工具，是帮助我们完成页面搭建的开发工作，是如果没有这个工具，我们需要自己写的那部分工作。</p><p>首先它要可以生产代码，同时它也只需要生产代码。</p><p>也许有人会说生成的代码会不会难以维护，还要花时间去做删改，<strong>只要删改的时间小于从零开始开发的时间，它就是有价值的</strong>。</p><h2 id="lego"><a href="#lego" class="headerlink" title="lego"></a>lego</h2><p>基于我自己的需求，开发了这样一个简单的工具。从名字来说是希望页面的开发能像搭积木一样简单。</p><p>以最开始的「申请培训页」为例，制作了使用该工具实现的过程 gif。<br><img src="http://oyy3cbpm3.bkt.clouddn.com/15180684688171.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;可视化布局虽然已经发展很久，但一直没有出现被大量使用的平台或工具，而实际上这类需求确确实实存在，那么，这类可视化布局工具到底有没有价值呢？&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="React" scheme="http://yoursite.com/tags/React/"/>
    
      <category term="可视化" scheme="http://yoursite.com/tags/%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>写给 JSer 的 python 学习手册 - 数据类型篇</title>
    <link href="http://yoursite.com/2018/01/21/javascript2python02/"/>
    <id>http://yoursite.com/2018/01/21/javascript2python02/</id>
    <published>2018-01-21T00:00:00.000Z</published>
    <updated>2018-01-21T14:20:32.385Z</updated>
    
    <content type="html"><![CDATA[<p>基础语法之后，就需要了解数据类型了，大部分语言的数据类型都是相似的，字符串、数字、布尔值、数组对象等等，虽然不同语言可能本质上的实现不同，但在编程时的写法是相似的，只有在本质上有什么不同，就可以作为深入学习去了解了。</p><p><code>JavaScript</code>中有七种数据类型</p><ul><li>String</li><li>Number</li><li>Boolean</li><li>null</li><li>undefined</li><li>Symbol</li><li>Object</li></ul><p><code>Python3</code>中有六个标准的数据类型</p><ul><li>String</li><li>Number</li><li>List</li><li>Tuple</li><li>Sets</li><li>Dictionary</li></ul><p>下面进行一一对比。</p><a id="more"></a><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>和<code>JavaScript</code>一样，可以用单引号，也可以用双引号表示一个字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">foo = <span class="string">'bar'</span></span><br><span class="line">bar = <span class="string">"foo"</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="string">'bar'</span>;</span><br><span class="line"><span class="keyword">let</span> bar = <span class="string">"foo"</span>;</span><br></pre></td></tr></table></figure><h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;ltaoo&apos;</span><br><span class="line">age = 25</span><br><span class="line">print(&quot;My name is %s and age is %d&quot;%(name, age))</span><br></pre></td></tr></table></figure><p>对应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">'ltaoo'</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`My name is <span class="subst">$&#123;name&#125;</span> and age is <span class="subst">$&#123;age&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>同样的，<code>python</code>中的字符串也有方法可以进行调用。</p><table><thead><tr><th>JavaScript</th><th>Python</th><th>描述</th></tr></thead><tbody><tr><td>charAt</td><td></td><td>返回特定位置的字符</td></tr><tr><td>charCodeAt</td><td></td><td>返回表示给定索引的字符的 Unicode 的值</td></tr><tr><td>codePointAt</td><td></td><td>返回使用UTF-16编码的给定位置的值的非负整数</td></tr><tr><td>concat</td><td></td><td>连接两个字符串文本，并返回一个新的字符串</td></tr><tr><td>includes</td><td></td><td>判断一个字符串里是否包含其他字符串</td></tr><tr><td>endWith</td><td>endswith</td><td>判断一个字符串的结尾是否包含其他字符串中的字符</td></tr><tr><td>indexOf</td><td>find</td><td>从字符串对象中返回首个被发现的给定值的索引值，如果没有找到则返回-1</td></tr><tr><td>lastIndexOf</td><td>rfind(str, beg=0,end=len(string))</td><td>从字符串对象中返回最后一个被发现的给定值的索引值，如果没有找到则返回-1</td></tr><tr><td>localeCompare</td><td></td><td>返回一个数字表示是否引用字符串在排序中位于比较字符串的前面，后面，或者二者相同</td></tr><tr><td>match</td><td></td><td>使用正则表达式与字符串相比较</td></tr><tr><td>normalize</td><td></td><td>返回调用字符串值的Unicode标准化形式</td></tr><tr><td>padEnd</td><td>ljust(width)</td><td>在当前字符串尾部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串</td></tr><tr><td>padStart</td><td>rjust(width)</td><td>在当前字符串头部填充指定的字符串， 直到达到指定的长度。 返回一个新的字符串</td></tr><tr><td>repeat</td><td>str*n</td><td>返回指定重复次数的由元素组成的字符串对象</td></tr><tr><td>replace</td><td>replace(str1, str2,  num=string.count(str1))</td><td>被用来在正则表达式和字符串直接比较，然后用新的子串来替换被匹配的子串</td></tr><tr><td>search</td><td></td><td>对正则表达式和指定字符串进行匹配搜索，返回第一个出现的匹配项的下标</td></tr><tr><td>slice</td><td>str[x:n]</td><td>摘取一个字符串区域，返回一个新的字符串；<code>python</code>中虽然没有该方法，但有更简单的方式。</td></tr><tr><td>split</td><td>split(str=””, num=string.count(str))</td><td>通过分离字符串成字串，将字符串对象分割成字符串数组</td></tr><tr><td>startWith</td><td>startswith(obj, beg=0,end=len(string))</td><td>判断字符串的起始位置是否匹配其他字符串中的字符</td></tr><tr><td>substr</td><td></td><td>通过指定字符数返回在指定位置开始的字符串中的字符</td></tr><tr><td>substring</td><td></td><td>返回在字符串中指定两个下标之间的字符</td></tr><tr><td>toLocaleLowerCase</td><td></td><td>根据当前区域设置，将符串中的字符转换成小写。对于大多数语言来说，toLowerCase的返回值是一致的</td></tr><tr><td>toLocaleUpperCase</td><td></td><td>根据当前区域设置，将字符串中的字符转换成大写，对于大多数语言来说，toUpperCase的返回值是一致的</td></tr><tr><td>toLowerCase</td><td>lower</td><td>将字符串转换成小写并返回</td></tr><tr><td>toString</td><td></td><td>返回用字符串表示的特定对象</td></tr><tr><td>toUpperCase</td><td>upper</td><td>将字符串转换成大写并返回</td></tr><tr><td>trim</td><td>strip</td><td>从字符串的开始和结尾去除空格；strip 实际是执行了 lstrip 和 rstrip，即去除左侧的空格与右侧的空格。</td></tr><tr><td>valueOf</td><td></td><td>返回特定对象的原始值</td></tr><tr><td></td><td>capitalize</td><td>把字符串的第一个字符大写</td></tr><tr><td></td><td>center(width)</td><td>返回一个原字符串居中,并使用空格填充至长度 width 的新字符串</td></tr><tr><td></td><td>count(str, beg=0, end=len(string))</td><td>返回 str 在 string 里面出现的次数，如果 beg 或者 end 指定则返回指定范围内 str 出现的次数</td></tr><tr><td></td><td>decode(encoding=’UTF-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式解码 string，如果出错默认报一个 ValueError 的 异 常 ， 除非 errors 指 定 的 是 ‘ignore’ 或 者’replace’</td></tr><tr><td></td><td>encode(encoding=’UTF-8’, errors=’strict’)</td><td>以 encoding 指定的编码格式编码 string，如果出错默认报一个ValueError 的异常，除非 errors 指定的是’ignore’或者’replace’</td></tr><tr><td></td><td>expandtabs(tabsize=8)</td><td>把字符串 string 中的 tab 符号转为空格，tab 符号默认的空格数是 8</td></tr><tr><td></td><td>format()</td><td>格式化字符串</td></tr><tr><td></td><td>index(str, beg=0, end=len(string))</td><td>跟find()方法一样，只不过如果str不在 string中会报一个异常</td></tr><tr><td></td><td>isalnum()</td><td><div>如果 string 至少有一个字符并且所有字符都是字母或数字则返回 True,否则返回 False</div></td></tr><tr><td></td><td>isalpha()</td><td><div>如果 string 至少有一个字符并且所有字符都是字母则返回 True,否则返回 False</div></td></tr><tr><td></td><td>isdecimal()</td><td>如果 string 只包含十进制数字则返回 True 否则返回 False</td></tr><tr><td></td><td>isdigit()</td><td>如果 string 只包含数字则返回 True 否则返回 False</td></tr><tr><td></td><td>islower()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是小写，则返回 True，否则返回 False</td></tr><tr><td></td><td>isnumeric()</td><td>如果 string 中只包含数字字符，则返回 True，否则返回 False</td></tr><tr><td></td><td>isspace()</td><td>如果 string 中只包含空格，则返回 True，否则返回 False</td></tr><tr><td></td><td>istitle()</td><td>如果 string 是标题化的(见 title())则返回 True，否则返回 False</td></tr><tr><td></td><td>isupper()</td><td>如果 string 中包含至少一个区分大小写的字符，并且所有这些(区分大小写的)字符都是大写，则返回 True，否则返回 False</td></tr><tr><td></td><td>join(seq)</td><td>以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</td></tr><tr><td></td><td>lstrip()</td><td>截掉 string 左边的空格；JavaScript 中有该方法但不属于标准</td></tr><tr><td></td><td>maketrans(intab, outtab])</td><td>maketrans() 方法用于创建字符映射的转换表，对于接受两个参数的最简单的调用方式，第一个参数是字符串，表示需要转换的字符，第二个参数也是字符串表示转换的目标。</td></tr><tr><td></td><td>partition(str)</td><td>有点像 find()和 split()的结合体,从 str 出现的第一个位置起,把字符串 string 分成一个3元素的元组(string_pre_str,str,string_post_str),如果 string 中不包含str 则 string_pre_str == string.</td></tr><tr><td></td><td>rindex( str, beg=0,end=len(string))</td><td>类似于 index()，不过是从右边开始</td></tr><tr><td></td><td>rpartition(str)</td><td>类似于 partition()函数,不过是从右边开始查找</td></tr><tr><td></td><td>rstrip()</td><td>删除 string 字符串末尾的空格</td></tr><tr><td></td><td>splitlines([keepends])</td><td>按照行(‘\r’, ‘\r\n’, \n’)分隔，返回一个包含各行作为元素的列表，如果参数 keepends 为 False，不包含换行符，如果为 True，则保留换行符</td></tr><tr><td></td><td>swapcase()</td><td>翻转 string 中的大小写</td></tr><tr><td></td><td>title()</td><td>返回”标题化”的 string,就是说所有单词都是以大写开始，其余字母均为小写(见 istitle())</td></tr><tr><td></td><td>translate(str, del=””)</td><td><div>根据 str 给出的表(包含 256 个字符)转换 string 的字符,</div><div>要过滤掉的字符放到 del 参数中</div></td></tr><tr><td></td><td>zfill(width)</td><td>返回长度为 width 的字符串，原字符串 string 右对齐，前面填充0</td></tr><tr><td></td><td>isdecimal()</td><td>isdecimal()方法检查字符串是否只包含十进制字符。这种方法只存在于unicode对象</td></tr></tbody></table><p>可以看到<code>python</code>中内置的方法数远大于<code>JavaScript</code>拥有的，不过常用的还是相同。从这里可以看出<code>Python</code>的<code>slogon</code>，内置更多的方法避免自己花时间实现。</p><h2 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">a = <span class="keyword">True</span></span><br><span class="line">b = <span class="keyword">False</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure><p><code>python</code>中的布尔值是大写开头的，其他方面并没有太大的区别。</p><h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">var1 = <span class="number">1</span></span><br><span class="line">var2 = <span class="number">1.0</span></span><br><span class="line">var3 = <span class="number">-1</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> var1 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> var2 = <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">let</span> var3 = <span class="number">-1</span>;</span><br></pre></td></tr></table></figure><p>在<code>python</code>中，数字分为</p><ul><li>整型(int)</li><li>长整型(long integers)</li><li>浮点型(floating point real values)</li><li>复数(complex numbers)</li></ul><p>相比之下<code>JavaScript</code>只有「数字」，且并不区分浮点型和整型。那<code>Python</code>这四种类型有明确的区别吗？</p><blockquote><p><code>Python</code>和<code>JavaScript</code>都有（其实是所有语言）一个共同的问题，即<code>0.2 + 0.1</code>结果并非<code>0.3</code>。</p></blockquote><h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><p><code>Python</code>中的数字类型没有方法，而<code>JavaScript</code>有一些不常用的：</p><table><thead><tr><th>JavaScript</th><th>Python</th><th>描述</th></tr></thead><tbody><tr><td>toFixed()</td><td></td><td>用来去除指定数量的小数位数</td></tr><tr><td>toLocaleString([locales [, options]])</td><td></td></tr></tbody></table><p>貌似只有这个是常用的。</p><h3 id="整数相除"><a href="#整数相除" class="headerlink" title="整数相除"></a>整数相除</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">var1 = <span class="number">3</span>/<span class="number">2</span></span><br></pre></td></tr></table></figure><p>在<code>python2</code>中，得到的结果是<code>1</code>，如果希望得到<code>1.5</code>，两个数字中有一个需要是浮点类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">let</span> var1 = <span class="number">3</span>/<span class="number">2</span>; <span class="comment">// 1.5 正确!</span></span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><code>JavaScript</code>中的数组在<code>Python</code>中称为「列表」。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list = [<span class="string">'a'</span>, <span class="number">123</span>, <span class="keyword">True</span>];</span><br></pre></td></tr></table></figure><p>对应的<code>JavaScript</code>版则是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list = [<span class="string">'a'</span>, <span class="number">123</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure><p>完全一毛一样啊！似不似，元素都可以是任意类型。</p><h3 id="访问数组中的值"><a href="#访问数组中的值" class="headerlink" title="访问数组中的值"></a>访问数组中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">firstItem = list[<span class="number">0</span>]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> firstItem = list[<span class="number">0</span>];</span><br></pre></td></tr></table></figure><h3 id="更新数组中的值"><a href="#更新数组中的值" class="headerlink" title="更新数组中的值"></a>更新数组中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 5, 3, 4]</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">list[<span class="number">1</span>] = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 5, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="删除数组中的值"><a href="#删除数组中的值" class="headerlink" title="删除数组中的值"></a>删除数组中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"><span class="keyword">del</span> list[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2, 3, 4]</span></span><br></pre></td></tr></table></figure><p><code>JavaScript</code>中数组并没有该方法，但可以使用<code>delete</code>实现，而该关键字是用在对象上的，由于数组就是对象，所以也可以用在数组上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">delete</span> list[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// [empty, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>结果和<code>Python</code>的并不一样，只是将值删掉了，但还有个「坑」在，其实就是<code>undefined</code>；事实上如果要实现和<code>Python</code>一样的效果，往往是使用<code>splice</code>方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list.splice(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="截取"><a href="#截取" class="headerlink" title="截取"></a>截取</h3><p>也可以称为「切片」</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">list2 = list[<span class="number">1</span>:]</span><br><span class="line">list3 = list[<span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2, 3, 4]</span></span><br><span class="line"><span class="comment"># [2]</span></span><br></pre></td></tr></table></figure><p><code>JavaScript</code>中则需要使用方法实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> list2 = list.slice(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> list3 = list.slice(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 3, 4]</span></span><br><span class="line"><span class="comment">// [2]</span></span><br></pre></td></tr></table></figure><p>同样是「左闭右开区间」，即包含左边的下标，不包含右边的下标，所以得到的值有<code>2</code>没有<code>3</code>。</p><h3 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h3><h4 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h4><p>和<code>JavaScript</code>很大不同，<code>Python</code>中的「列表」，是可以使用一些操作符的，比如<code>+</code>用来连接两个列表：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="number">1</span>]</span><br><span class="line">list2 = [<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">list3 = list1 + list2</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 2]</span></span><br></pre></td></tr></table></figure><p>而<code>JavaScript</code>这么做，实际会将两个数组的字符串相加，得到<code>[object Array][object Array]</code>；如果要实现元素相加，则需要使用<code>concat</code>方法，或者解构：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list1 = [<span class="number">1</span>];</span><br><span class="line"><span class="keyword">const</span> list2 = [<span class="number">2</span>];</span><br><span class="line"><span class="keyword">const</span> list3 = list1.concat(list2);</span><br><span class="line"></span><br><span class="line"><span class="comment">// or</span></span><br><span class="line"><span class="keyword">const</span> list3 = [...list1, ...list2];</span><br></pre></td></tr></table></figure><h4 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list = [<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">list2 = list * <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1, 1, 1, 1]</span></span><br></pre></td></tr></table></figure><p><code>JavaScript</code>就没有这么方便了，甚至可以说很麻烦，需要自己实现函数。</p><h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>JavaScript</th><th>Python</th><th>描述</th></tr></thead><tbody><tr><td>修改器方法</td><td></td><td>JavaScript 中下面这些方法会改变原数组</td></tr><tr><td>pop()</td><td>pop(obj=list[-1])</td><td>删除数组的最后一个元素，并返回这个元素；python 可以删除任意下标的元素，默认最后一个。</td></tr><tr><td>push()</td><td>append(obj)</td><td>在数组的末尾增加一个或多个元素，并返回数组的新长度</td></tr><tr><td>reverse()</td><td>reverse()</td><td>颠倒数组中元素的排列顺序，即原先的第一个变为最后一个，原先的最后一个变为第一个</td></tr><tr><td>shift()</td><td></td><td>删除数组的第一个元素，并返回这个元素</td></tr><tr><td>sort()</td><td>sort(func)</td><td>对数组元素进行排序，并返回当前数组</td></tr><tr><td>splice()</td><td></td><td>在任意的位置给数组添加或删除任意个元素</td></tr><tr><td>unshift()</td><td></td><td>在数组的开头增加一个或多个元素，并返回数组的新长度</td></tr><tr><td>访问方法</td><td></td><td>不会改变原数组的方法</td></tr><tr><td>concat()</td><td>extend(seq)</td><td>返回一个由当前数组和其它若干个数组或者若干个非数组值组合而成的新数组</td></tr><tr><td>join()</td><td></td><td>连接所有数组元素组成一个字符串</td></tr><tr><td>slice()</td><td></td><td>抽取当前数组中的一段元素组合成一个新数组</td></tr><tr><td>toString()</td><td></td><td>返回一个由所有数组元素组合而成的字符串</td></tr><tr><td>toLocaleString()</td><td></td><td>返回一个由所有数组元素组合而成的本地化后的字符串</td></tr><tr><td>indexOf()</td><td>index(obj)</td><td>返回数组中第一个与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1</td></tr><tr><td>lastIndexOf()</td><td></td><td>返回数组中最后一个（从右边数第一个）与指定值相等的元素的索引，如果找不到这样的元素，则返回 -1</td></tr><tr><td>迭代方法</td><td></td><td></td></tr><tr><td>forEach()</td><td></td><td>为数组中的每个元素执行一次回调函数</td></tr><tr><td>every()</td><td></td><td>如果数组中的每个元素都满足测试函数，则返回 true，否则返回 false</td></tr><tr><td>some()</td><td></td><td>如果数组中至少有一个元素满足测试函数，则返回 true，否则返回 false</td></tr><tr><td>filter()</td><td></td><td>将所有在过滤函数中返回 true 的数组元素放进一个新数组中并返回</td></tr><tr><td>map()</td><td></td><td>返回一个由回调函数的返回值组成的新数组</td></tr><tr><td>reduce()</td><td></td><td>从左到右为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值</td></tr><tr><td>reduceRight()</td><td></td><td>从右到左为每个数组元素执行一次回调函数，并把上次回调函数的返回值放在一个暂存器中传给下次回调函数，并返回最后一次回调函数的返回值</td></tr><tr><td></td><td>count(obj)</td><td>统计某个元素在列表中出现的次数</td></tr><tr><td></td><td>insert(index, obj)</td><td>将对象插入列表；JavaScript可以使用 splice 模拟</td></tr><tr><td></td><td>remove(obj)</td><td>移除列表中某个值的第一个匹配项；JavaScript可以使用 splice 模拟</td></tr></tbody></table><p>相比<code>JavaScript</code>，<code>Python</code>中数组的方法就比较少了。</p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><blockquote><p>字典是另一种可变容器模型，且可存储任意类型对象。字典的每个键值(key=&gt;value)对用冒号(:)分割，每个对之间用逗号(,)分割，整个字典包括在花括号({})中</p></blockquote><p><code>Python</code>中的字典，即<code>JavaScript</code>中的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">dict = &#123;<span class="string">'name'</span>: <span class="string">'ltaoo'</span>, <span class="string">'age'</span>: <span class="number">7</span>&#125;</span><br></pre></td></tr></table></figure><p>对比</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dict = &#123;<span class="attr">name</span>: <span class="string">'ltaoo'</span>, <span class="attr">age</span>: <span class="number">7</span>&#125;;</span><br></pre></td></tr></table></figure><p>有一个很大不同，<code>Python</code>中的键也需要用单引号或双引号包裹，而<code>JavaScript</code>不需要。</p><p>如果不用引号包裹，表示这是一个变量，如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">key = <span class="string">'name'</span></span><br><span class="line">dict = &#123; key: <span class="string">'ltaoo'</span> &#125;</span><br></pre></td></tr></table></figure><p>而<code>JavaScript</code>默认将键作为字符串处理，即使有同名的变量，仍然是字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = <span class="string">'name'</span>;</span><br><span class="line"><span class="keyword">const</span> dict = &#123; <span class="attr">key</span>: <span class="string">'ltaoo'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样写才是和 python 效果相同</span></span><br><span class="line">dict = &#123; [key]: <span class="string">'ltaoo'</span> &#125;;</span><br></pre></td></tr></table></figure><h3 id="访问对象中的值"><a href="#访问对象中的值" class="headerlink" title="访问对象中的值"></a>访问对象中的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;;</span><br><span class="line">name = dict[<span class="string">'Name'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Zara</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dict = &#123;</span><br><span class="line">    Name: <span class="string">'Zara'</span>,</span><br><span class="line">    Age: <span class="number">7</span>,</span><br><span class="line">    Class: <span class="string">'First'</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> name = dict[<span class="string">'Name'</span>];</span><br><span class="line"><span class="comment">// 更常用的</span></span><br><span class="line">name = dict.Name;</span><br></pre></td></tr></table></figure><p>如果访问一个不存在的键，比如<code>dict[&#39;Hello&#39;]</code>，<code>Python</code>会报<code>KeyError</code>，而<code>JavaScript</code>则返回<code>undefined</code>，并不会报错。</p><h3 id="修改字典"><a href="#修改字典" class="headerlink" title="修改字典"></a>修改字典</h3><h4 id="更新已存在的值"><a href="#更新已存在的值" class="headerlink" title="更新已存在的值"></a>更新已存在的值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">dict = &#123; <span class="string">'name'</span>: <span class="string">'ltaoo'</span>, <span class="string">'age'</span>, <span class="number">18</span> &#125;</span><br><span class="line">dict[<span class="string">'name'</span>] = <span class="string">'wuya'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> dict = &#123; <span class="attr">name</span>: <span class="string">'ltaoo'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;;</span><br><span class="line">dict[<span class="string">'name'</span>] = <span class="string">'wuya'</span>;</span><br><span class="line">dict.name = <span class="string">'wuya'</span>;</span><br></pre></td></tr></table></figure><h4 id="增加键值对"><a href="#增加键值对" class="headerlink" title="增加键值对"></a>增加键值对</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">dict[<span class="string">'tel'</span>] = <span class="string">'123123123'</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line">dict.tel = <span class="string">'123123123'</span>;</span><br></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">7</span>, <span class="string">'Class'</span>: <span class="string">'First'</span>&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> dict[<span class="string">'Name'</span>]; <span class="comment"># 删除键是'Name'的条目</span></span><br><span class="line">dict.clear();     <span class="comment"># 清空词典所有条目</span></span><br><span class="line"><span class="keyword">del</span> dict;        <span class="comment"># 删除词典</span></span><br></pre></td></tr></table></figure><p><code>JavaScript</code>没有直接的方法清空所有条目。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dict = &#123; <span class="attr">Name</span>: <span class="string">'Zara'</span>, <span class="attr">Age</span>: <span class="number">7</span>, <span class="attr">Class</span>: <span class="string">'First'</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> dict.Name;</span><br><span class="line"><span class="keyword">delete</span> dict;</span><br></pre></td></tr></table></figure><p>可以给<code>dict</code>重新赋值为<code>{}</code>等于变相实现清空所有条目，而<code>delete dict</code>本质上是<code>delete window.dict</code>，也是删除键值对。</p><h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><table><thead><tr><th>JavaScript</th><th>Python</th><th>描述</th></tr></thead><tbody><tr><td>hasOwnProperty()</td><td></td><td>返回一个布尔值 ，表示某个对象是否含有指定的属性，而且此属性非原型链继承的</td></tr><tr><td>isPrototypeOf()</td><td></td><td>返回一个布尔值，表示指定的对象是否在本对象的原型链中</td></tr><tr><td>propertyIsEnumerable()</td><td></td><td>判断指定属性是否可枚举</td></tr><tr><td></td><td>clear()</td><td>删除字典内所有元素</td></tr><tr><td>{…obj}</td><td>copy()</td><td>返回一个字典的浅复制</td></tr><tr><td></td><td>fromkeys(seq[, val])</td><td>创建一个新字典，以序列 seq 中元素做字典的键，val 为字典所有键对应的初始值</td></tr><tr><td></td><td>get(key, default=None)</td><td>返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td></td><td>has_key(key)</td><td>如果键在字典dict里返回true，否则返回false</td></tr><tr><td></td><td>items()</td><td>以列表返回可遍历的(键, 值) 元组数组</td></tr><tr><td>Object.keys(obj)</td><td>keys()</td><td>以列表返回一个字典所有的键</td></tr><tr><td></td><td>setdefault(key, default=None)</td><td>和get()类似, 但如果键不存在于字典中，将会添加键并将值设为default</td></tr><tr><td>Object.assign(obj1, obj2)</td><td>update(dict2)</td><td>把字典dict2的键/值对更新到dict里</td></tr><tr><td>Object.values()</td><td>values()</td><td>以列表返回字典中的所有值</td></tr></tbody></table><p><code>Python</code>中字典的方法数远大于<code>JavaScript</code>的，但很多方法在<code>JavaScript</code>不是实例方法而是「静态方法」。</p><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p><code>Python</code>中存在一种数据类型是<code>JavaScript</code>中没有的，但可以模拟，即「元组」。</p><blockquote><p>Python的元组与列表类似，不同之处在于元组的元素不能修改。元组使用小括号，列表使用方括号。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">tup1 = (<span class="string">'physics'</span>, <span class="string">'chemistry'</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line">tup3 = <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span></span><br><span class="line"></span><br><span class="line">tup = (<span class="number">1</span>,) <span class="comment"># 只包含一个元素时，需要在元素后面添加逗号</span></span><br></pre></td></tr></table></figure><p>在<code>JavaScript</code>使用<code>Object.freeze()</code>可以「冻结」一个对象，不能修改、删除该对象的属性，而数组其实也是对象，所有可以用该函数模拟元组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ary1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> ary2 = <span class="built_in">Object</span>.freeze(ary1);</span><br><span class="line">ary2[<span class="number">0</span>] = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ary2 === [1, 2, 3];</span></span><br></pre></td></tr></table></figure><h2 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h2><blockquote><p>集合（set）是一个无序不重复元素的序列。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">sets = &#123; <span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span> &#125;</span><br></pre></td></tr></table></figure><p>该数据类型可以进行集合运算，即交集、并集差集等。</p><p><code>JavaScript</code>中新增的<code>Set</code>和该数据类型相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> set1 = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>]);</span><br></pre></td></tr></table></figure><p>只能通过构造函数得到，没有字面量。</p><h2 id="空"><a href="#空" class="headerlink" title="空"></a>空</h2><p><code>Python</code>中有两个特殊的值</p><ul><li>Null</li><li>None</li></ul><p>使用<code>type(None)</code>返回<code>&lt;class &#39;NoneType&#39;&gt;</code>，而<code>type(Null)</code>会报错<code>Null is not defined</code>（<code>null</code>也一样）。</p><p><code>Null</code>表示「空值」，即这里没有值，查找了一些资料，提到从数据库中读取数据，如果没有值，要区分是「空字符串」还是<code>Null</code>。</p><p>也还是蛮复杂的。</p><h2 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">print(type(vari))</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> vari);</span><br></pre></td></tr></table></figure><h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><code>python</code>中不存在自动转换，所以：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="string">'1'</span></span><br><span class="line">print(a + b) <span class="comment"># TypeError: must be str, not int</span></span><br></pre></td></tr></table></figure><p>字符串与数值相加，会报错，所以需要手动转换。</p><h3 id="其他类型转数字"><a href="#其他类型转数字" class="headerlink" title="其他类型转数字"></a>其他类型转数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">a = <span class="string">'1'</span></span><br><span class="line">b = int(a)</span><br></pre></td></tr></table></figure><h3 id="其他类型转布尔"><a href="#其他类型转布尔" class="headerlink" title="其他类型转布尔"></a>其他类型转布尔</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">'a'</span></span><br><span class="line">b = bool(a)</span><br></pre></td></tr></table></figure><h3 id="其他类型转字符"><a href="#其他类型转字符" class="headerlink" title="其他类型转字符"></a>其他类型转字符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line">b = str(a)</span><br></pre></td></tr></table></figure><h3 id="列表转元组"><a href="#列表转元组" class="headerlink" title="列表转元组"></a>列表转元组</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">tup = tuple(list)</span><br></pre></td></tr></table></figure><h3 id="元组转为列表"><a href="#元组转为列表" class="headerlink" title="元组转为列表"></a>元组转为列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python</span></span><br><span class="line"></span><br><span class="line">list1 = list(tup)</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>Python</code>与<code>JavaScript</code>同样是脚本语言，在很多方面都是类似的，比如「万物皆对象」，<code>JavaScript</code>中适用，<code>Python</code>也是一样。</p><p>除去类似的部分，两者仍有很多不同的地方，例如<code>JavaScript</code>的异步编程<code>Python</code>似乎没有，而在元编程方面<code>Python</code>早已经非常成熟而<code>JavaScript</code>这方面属于刚起步。</p><p>在未来各语言是否会取长补短而变得越来越相似呢，有趣。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基础语法之后，就需要了解数据类型了，大部分语言的数据类型都是相似的，字符串、数字、布尔值、数组对象等等，虽然不同语言可能本质上的实现不同，但在编程时的写法是相似的，只有在本质上有什么不同，就可以作为深入学习去了解了。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;中有七种数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;Boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;undefined&lt;/li&gt;
&lt;li&gt;Symbol&lt;/li&gt;
&lt;li&gt;Object&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Python3&lt;/code&gt;中有六个标准的数据类型&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;String&lt;/li&gt;
&lt;li&gt;Number&lt;/li&gt;
&lt;li&gt;List&lt;/li&gt;
&lt;li&gt;Tuple&lt;/li&gt;
&lt;li&gt;Sets&lt;/li&gt;
&lt;li&gt;Dictionary&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面进行一一对比。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/categories/Python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>2018 年计划</title>
    <link href="http://yoursite.com/2018/01/07/2018%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    <id>http://yoursite.com/2018/01/07/2018年计划/</id>
    <published>2018-01-07T00:00:00.000Z</published>
    <updated>2018-01-07T14:17:37.127Z</updated>
    
    <content type="html"><![CDATA[<p>希望能更加有计划的度过吧，避免不知道做什么而浪费时间。</p><p>其实做计划也是一门学问，如何更好地制定计划以能够在能力范围内实现，并且愿意去实现。发现“九宫格”的形式制定计划很多人在使用。</p><p>即制定八个大方向，在每个大方向上制定细致的<code>action</code>。</p><p>去年“简单”的两项，实质上没有明确的目标，也没有可以衡量的标准，导致没有动力也没有方向去做，陷入迷茫的境地。</p><p>基于此，尝试制定明确的目标，看能否做到。</p><a id="more"></a><h2 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h2><ul><li>每周日下午两点至五点写一篇技术相关博客。</li><li>每周日下午五点至六点回顾前一个月的博客，总结出改进点。</li><li>每天抽出 1 小时时间看书，一周一本（至少两周一本）并完成读书笔记。</li><li>每周末晚十点至十一点阅读哈利波特，半年内读完第一本。</li><li><code>kotlin</code>、<code>swift</code>和<code>python</code>做到能够使用的程度，前四个月学习<code>python</code>，中间四个学习<code>swift</code>，最后学习<code>kotlin</code>。</li><li>在学习<code>swift</code>过程中开发出一款<code>iOS</code>应用。</li><li>在学习<code>kotlin</code>过程共将上一款应用开发出<code>android</code>版。</li></ul><h2 id="绘画"><a href="#绘画" class="headerlink" title="绘画"></a>绘画</h2><ul><li>每晚十点至十点半画一张画，题材不限，尽可能覆盖多一些。</li><li>每个月最后的那个周末早上尝试实现一张完成度高的。</li></ul><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><ul><li>优先 5 小时的工作时间，不摸鱼。</li><li>八点半上班，八点半下班。</li><li>八点半至九点阅读前一天资讯，记录有用的，关闭<code>reeder</code>。</li><li>中午一小时阅读。</li><li>五点至六点视情况学习其他语言或做项目相关。</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><ul><li>七点半起床，十一点睡觉。周末也一样。</li><li>如果该季度做到 90%，买一件想要的东西作为奖励。</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这么下来，希望能有一个<code>App</code>，预先填写<code>todo</code>，可以随时查看当前我应该做什么，并且统计完成率。</p><p>希望能过得像计划这般充实。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;希望能更加有计划的度过吧，避免不知道做什么而浪费时间。&lt;/p&gt;
&lt;p&gt;其实做计划也是一门学问，如何更好地制定计划以能够在能力范围内实现，并且愿意去实现。发现“九宫格”的形式制定计划很多人在使用。&lt;/p&gt;
&lt;p&gt;即制定八个大方向，在每个大方向上制定细致的&lt;code&gt;action&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;去年“简单”的两项，实质上没有明确的目标，也没有可以衡量的标准，导致没有动力也没有方向去做，陷入迷茫的境地。&lt;/p&gt;
&lt;p&gt;基于此，尝试制定明确的目标，看能否做到。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://yoursite.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="计划" scheme="http://yoursite.com/tags/%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
</feed>
